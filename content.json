[{"title":"React Hooks系列之useEffect（三）","date":"2019-12-25T09:02:55.752Z","path":"/posts/8/","text":"React Hooks系列之useEffect（三） 前言还记得我们说过同步才是理解effects的心智模型吗？同步的一个有趣地方在于你通常想要把同步的“信息”和状态解耦。举个例子，当你在Google Docs编辑文档的时候，Google并不会把整篇文章发送给服务器。那样做会非常低效。相反的，它只是把你的修改以一种形式发送给服务端。 虽然我们effect的情况不尽相同，但可以应用类似的思想。只在effects中传递最小的信息会很有帮助。类似于setCount(c =&gt; c + 1)这样的更新形式比setCount(count + 1)传递了更少的信息，因为它不再被当前的count值“污染”。它只是表达了一种行为（“递增”）。“Thinking in React”也讨论了如何找到最小状态。原则是类似的，只不过现在关注的是如何更新。 表达意图（而不是结果）和Google Docs如何处理共同编辑异曲同工。虽然这个类比略微延伸了一点，函数式更新在React中扮演了类似的角色。它们确保能以批量地和可预测的方式来处理各种源头（事件处理函数，effect中的订阅，等等）的状态更新。 然而，即使是setCount(c =&gt; c + 1)也并不完美。它看起来有点怪，并且非常受限于它能做的事。举个例子，如果我们有两个互相依赖的状态，或者我们想基于一个prop来计算下一次的state，它并不能做到。幸运的是， setCount(c =&gt; c + 1)有一个更强大的姐妹模式，它的名字叫useReducer。 正文解耦来自Actions的更新我们来修改上面的例子让它包含两个状态：count 和 step。我们的定时器会每次在count上增加一个step值： 123456789101112131415161718function Counter() { const [count, setCount] = useState(0); const [step, setStep] = useState(1); useEffect(() =&gt; { const id = setInterval(() =&gt; { setCount(c =&gt; c + step); }, 1000); return () =&gt; clearInterval(id); }, [step]); return ( &lt;&gt; &lt;h1&gt;{count}&lt;/h1&gt; &lt;input value={step} onChange={e =&gt; setStep(Number(e.target.value))} /&gt; &lt;/&gt; );} (这里是demo) 注意我们没有撒谎。既然我们在effect里使用了step，我们就把它加到依赖里。所以这也是为什么代码能运行正确。 这个例子目前的行为是修改step会重启定时器 - 因为它是依赖项之一。在大多数场景下，这正是你所需要的。清除上一次的effect然后重新运行新的effect并没有任何错。除非我们有很好的理由，我们不应该改变这个默认行为。 不过，假如我们不想在step改变后重启定时器，我们该如何从effect中移除对step的依赖呢？ 当你想更新一个状态，并且这个状态更新依赖于另一个状态的值时，你可能需要用useReducer去替换它们。 当你写类似setSomething(something =&gt; …)这种代码的时候，也许就是考虑使用reducer的契机。reducer可以让你把组件内发生了什么(actions)和状态如何响应并更新分开表述。 我们用一个dispatch依赖去替换effect的step依赖： 123456789const [state, dispatch] = useReducer(reducer, initialState);const { count, step } = state;useEffect(() =&gt; { const id = setInterval(() =&gt; { dispatch({ type: 'tick' }); // Instead of setCount(c =&gt; c + step); }, 1000); return () =&gt; clearInterval(id);}, [dispatch]); (查看demo) 你可能会问：“这怎么就更好了？”答案是React会保证dispatch在组件的声明周期内保持不变。所以上面例子中不再需要重新订阅定时器。 我们解决了问题! （你可以从依赖中去除dispatch, setState, 和useRef包裹的值因为React会确保它们是静态的。不过你设置了它们作为依赖也没什么问题。） 相比于直接在effect里面读取状态，它dispatch了一个action来描述发生了什么。这使得我们的effect和step状态解耦。我们的effect不再关心怎么更新状态，它只负责告诉我们发生了什么。更新的逻辑全都交由reducer去统一处理: 123456789101112131415const initialState = { count: 0, step: 1,};function reducer(state, action) { const { count, step } = state; if (action.type === 'tick') { return { count: count + step, step }; } else if (action.type === 'step') { return { count, step: action.step }; } else { throw new Error(); }} (这里是demo如果你之前错过了。) 为什么useReducer是Hooks的作弊模式我们已经学习到如何移除effect的依赖，不管状态更新是依赖上一个状态还是依赖另一个状态。但假如我们需要依赖props去计算下一个状态呢？举个例子，也许我们的API是&lt;Counter step={1} /&gt;。确定的是，在这种情况下，我们没法避免依赖props.step 。是吗？ 实际上， 我们可以避免！我们可以把reducer函数放到组件内去读取props： 1234567891011121314151617181920function Counter({ step }) { const [count, dispatch] = useReducer(reducer, 0); function reducer(state, action) { if (action.type === 'tick') { return state + step; } else { throw new Error(); } } useEffect(() =&gt; { const id = setInterval(() =&gt; { dispatch({ type: 'tick' }); }, 1000); return () =&gt; clearInterval(id); }, [dispatch]); return &lt;h1&gt;{count}&lt;/h1&gt;;} 这种模式会使一些优化失效，所以你应该避免滥用它，不过如果你需要你完全可以在reducer里面访问props。（这里是demo） 即使是在这个例子中，React也保证dispatch在每次渲染中都是一样的。 所以你可以在依赖中去掉它。它不会引起effect不必要的重复执行。 你可能会疑惑：这怎么可能？在之前渲染中调用的reducer怎么“知道”新的props？答案是当你dispatch的时候，React只是记住了action - 它会在下一次渲染中再次调用reducer。在那个时候，新的props就可以被访问到，而且reducer调用也不是在effect里。 这就是为什么我倾向认为useReducer是Hooks的“作弊模式”。它可以把更新逻辑和描述发生了什么分开。结果是，这可以帮助我移除不必需的依赖，避免不必要的effect调用。 把函数移到Effects里一个典型的误解是认为函数不应该成为依赖。举个例子，下面的代码看上去可以运行正常： 12345678910111213141516function SearchResults() { const [data, setData] = useState({ hits: [] }); async function fetchData() { const result = await axios( 'https://hn.algolia.com/api/v1/search?query=react', ); setData(result.data); } useEffect(() =&gt; { fetchData(); }, []); // Is this okay? // ...} (这个例子改编自Robin Wieruch这篇很棒的文章 — 点击查看！) 需要明确的是，上面的代码可以正常工作。但这样做在组件日渐复杂的迭代过程中我们很难确保它在各种情况下还能正常运行。 想象一下我们的代码做下面这样的分离，并且每一个函数的体量是现在的五倍： 123456789101112131415161718function SearchResults() { // Imagine this function is long function getFetchUrl() { return 'https://hn.algolia.com/api/v1/search?query=react'; } // Imagine this function is also long async function fetchData() { const result = await axios(getFetchUrl()); setData(result.data); } useEffect(() =&gt; { fetchData(); }, []); // ...} 然后我们在某些函数内使用了某些state或者prop： 1234567891011121314151617181920function SearchResults() { const [query, setQuery] = useState('react'); // Imagine this function is also long function getFetchUrl() { return 'https://hn.algolia.com/api/v1/search?query=' + query; } // Imagine this function is also long async function fetchData() { const result = await axios(getFetchUrl()); setData(result.data); } useEffect(() =&gt; { fetchData(); }, []); // ...} 如果我们忘记去更新使用这些函数（很可能通过其他函数调用）的effects的依赖，我们的effects就不会同步props和state带来的变更。这当然不是我们想要的。 幸运的是，对于这个问题有一个简单的解决方案。如果某些函数仅在effect中调用，你可以把它们的定义移到effect中： 12345678910111213141516function SearchResults() { // ... useEffect(() =&gt; { // We moved these functions inside! function getFetchUrl() { return 'https://hn.algolia.com/api/v1/search?query=react'; } async function fetchData() { const result = await axios(getFetchUrl()); setData(result.data); } fetchData(); }, []); // ✅ Deps are OK // ...} (这里是demo) 这么做有什么好处呢？我们不再需要去考虑这些“间接依赖”。我们的依赖数组也不再撒谎：在我们的effect中确实没有再使用组件范围内的任何东西。 如果我们后面修改 getFetchUrl去使用query状态，我们更可能会意识到我们正在effect里面编辑它 - 因此，我们需要把query添加到effect的依赖里： 123456789101112131415161718function SearchResults() { const [query, setQuery] = useState('react'); useEffect(() =&gt; { function getFetchUrl() { return 'https://hn.algolia.com/api/v1/search?query=' + query; } async function fetchData() { const result = await axios(getFetchUrl()); setData(result.data); } fetchData(); }, [query]); // ✅ Deps are OK // ...} (这里是demo) 添加这个依赖，我们不仅仅是在“取悦React”。在query改变后去重新请求数据是合理的。useEffect的设计意图就是要强迫你关注数据流的改变，然后决定我们的effects该如何和它同步 - 而不是忽视它直到我们的用户遇到了bug。 感谢eslint-plugin-react-hooks 插件的exhaustive-depslint规则，它会在你编码的时候就分析effects并且提供可能遗漏依赖的建议。换句话说，机器会告诉你组件中哪些数据流变更没有被正确地处理。 非常棒。 但我不能把这个函数放到Effect里有时候你可能不想把函数移入effect里。比如，组件内有几个effect使用了相同的函数，你不想在每个effect里复制黏贴一遍这个逻辑。也或许这个函数是一个prop。 在这种情况下你应该忽略对函数的依赖吗？我不这么认为。再次强调，efffects不应该对它的依赖撒谎。通常我们还有更好的解决办法。一个常见的误解是，“函数从来不会改变”。但是这篇文章你读到现在，你知道这显然不是事实。实际上，在组件内定义的函数每一次渲染都在变。 函数每次渲染都会改变这个事实本身就是个问题。 比如有两个effects会调用 getFetchUrl: 1234567891011121314151617function SearchResults() { function getFetchUrl(query) { return 'https://hn.algolia.com/api/v1/search?query=' + query; } useEffect(() =&gt; { const url = getFetchUrl('react'); // ... Fetch data and do something ... }, []); // 🔴 Missing dep: getFetchUrl useEffect(() =&gt; { const url = getFetchUrl('redux'); // ... Fetch data and do something ... }, []); // 🔴 Missing dep: getFetchUrl // ...} 在这个例子中，你可能不想把getFetchUrl 移到effects中，因为你想复用逻辑。 另一方面，如果你对依赖很“诚实”，你可能会掉到陷阱里。我们的两个effects都依赖getFetchUrl，而它每次渲染都不同，所以我们的依赖数组会变得无用： 123456789101112131415161718function SearchResults() { // 🔴 Re-triggers all effects on every render function getFetchUrl(query) { return 'https://hn.algolia.com/api/v1/search?query=' + query; } useEffect(() =&gt; { const url = getFetchUrl('react'); // ... Fetch data and do something ... }, [getFetchUrl]); // 🚧 Deps are correct but they change too often useEffect(() =&gt; { const url = getFetchUrl('redux'); // ... Fetch data and do something ... }, [getFetchUrl]); // 🚧 Deps are correct but they change too often // ...} 一个可能的解决办法是把getFetchUrl从依赖中去掉。但是，我不认为这是好的解决方式。这会使我们后面对数据流的改变很难被发现从而忘记去处理。这会导致类似于上面“定时器不更新值”的问题。 相反的，我们有两个更简单的解决办法。 第一个， 如果一个函数没有使用组件内的任何值，你应该把它提到组件外面去定义，然后就可以自由地在effects中使用： 123456789101112131415161718// ✅ Not affected by the data flowfunction getFetchUrl(query) { return 'https://hn.algolia.com/api/v1/search?query=' + query;}function SearchResults() { useEffect(() =&gt; { const url = getFetchUrl('react'); // ... Fetch data and do something ... }, []); // ✅ Deps are OK useEffect(() =&gt; { const url = getFetchUrl('redux'); // ... Fetch data and do something ... }, []); // ✅ Deps are OK // ...} 你不再需要把它设为依赖，因为它们不在渲染范围内，因此不会被数据流影响。它不可能突然意外地依赖于props或state。 或者， 你也可以把它包装成useCallback Hook: 123456789101112131415161718function SearchResults() { // ✅ Preserves identity when its own deps are the same const getFetchUrl = useCallback((query) =&gt; { return 'https://hn.algolia.com/api/v1/search?query=' + query; }, []); // ✅ Callback deps are OK useEffect(() =&gt; { const url = getFetchUrl(‘react’); // … Fetch data and do something … }, [getFetchUrl]); // ✅ Effect deps are OK useEffect(() =&gt; { const url = getFetchUrl(‘redux’); // … Fetch data and do something … }, [getFetchUrl]); // ✅ Effect deps are OK // …} useCallback本质上是添加了一层依赖检查。它以另一种方式解决了问题 - 我们使函数本身只在需要的时候才改变，而不是去掉对函数的依赖。 我们来看看为什么这种方式是有用的。之前，我们的例子中展示了两种搜索结果（查询条件分别为’react’和’redux’）。但如果我们想添加一个输入框允许你输入任意的查询条件(query)。不同于传递query参数的方式，现在getFetchUrl会从状态中读取。 我们很快发现它遗漏了query依赖： 1234567function SearchResults() { const [query, setQuery] = useState(‘react’); const getFetchUrl = useCallback(() =&gt; { // No query argument return ‘https://hn.algolia.com/api/v1/search?query=‘ + query; }, []); // 🔴 Missing dep: query // …} 如果我把query添加到useCallback的依赖中，任何调用了getFetchUrl的effect在query改变后都会重新运行： 123456789101112131415function SearchResults() { const [query, setQuery] = useState(‘react’); // ✅ Preserves identity until query changes const getFetchUrl = useCallback(() =&gt; { return ‘https://hn.algolia.com/api/v1/search?query=‘ + query; }, [query]); // ✅ Callback deps are OK useEffect(() =&gt; { const url = getFetchUrl(); // … Fetch data and do something … }, [getFetchUrl]); // ✅ Effect deps are OK // …} 我们要感谢useCallback，因为如果query保持不变，getFetchUrl也会保持不变，我们的effect也不会重新运行。但是如果query修改了，getFetchUrl也会随之改变，因此会重新请求数据。这就像你在Excel里修改了一个单元格的值，另一个使用它的单元格会自动重新计算一样。 这正是拥抱数据流和同步思维的结果。对于通过属性从父组件传入的函数这个方法也适用： 123456789101112131415161718192021function Parent() { const [query, setQuery] = useState(‘react’); // ✅ Preserves identity until query changes const fetchData = useCallback(() =&gt; { const url = ‘https://hn.algolia.com/api/v1/search?query=‘ + query; // … Fetch data and return it … }, [query]); // ✅ Callback deps are OK return &lt;Child fetchData={fetchData} /&gt;}function Child({ fetchData }) { let [data, setData] = useState(null); useEffect(() =&gt; { fetchData().then(setData); }, [fetchData]); // ✅ Effect deps are OK // …} 因为fetchData只有在Parent的query状态变更时才会改变，所以我们的Child只会在需要的时候才去重新请求数据。 函数是数据流的一部分吗？有趣的是，这种模式在class组件中行不通，并且这种行不通恰到好处地揭示了effect和生命周期范式之间的区别。考虑下面的转换： 123456789101112131415161718192021222324class Parent extends Component { state = { query: ‘react’ }; fetchData = () =&gt; { const url = ‘https://hn.algolia.com/api/v1/search?query=‘ + this.state.query; // … Fetch data and do something … }; render() { return &lt;Child fetchData={this.fetchData} /&gt;; }}class Child extends Component { state = { data: null }; componentDidMount() { this.props.fetchData(); } render() { // … }} 你可能会想：“少来了Dan，我们都知道useEffect就像componentDidMount和componentDidUpdate的结合，你不能老是破坏这一条！”好吧，就算加了componentDidUpdate照样无用： 1234567891011121314151617class Child extends Component { state = { data: null }; componentDidMount() { this.props.fetchData(); } componentDidUpdate(prevProps) { // 🔴 This condition will never be true if (this.props.fetchData !== prevProps.fetchData) { this.props.fetchData(); } } render() { // … }} 当然如此，fetchData是一个class方法！（或者你也可以说是class属性 - 但这不能改变什么。）它不会因为状态的改变而不同，所以this.props.fetchData和 prevProps.fetchData始终相等，因此不会重新请求。那我们删掉条件判断怎么样？ 123componentDidUpdate(prevProps) { this.props.fetchData();} 等等，这样会在每次渲染后都去请求。(添加一个加载动画可能是一种有趣的发现这种情况的方式。)也许我们可以绑定一个特定的query? 123render() { return &lt;Child fetchData={this.fetchData.bind(this, this.state.query)} /&gt;;} 但这样一来，this.props.fetchData !== prevProps.fetchData表达式永远是true，即使query并未改变。这会导致我们总是去请求。 想要解决这个class组件中的难题，唯一现实可行的办法是硬着头皮把query本身传入Child组件。 Child虽然实际并没有直接使用这个query的值，但能在它改变的时候触发一次重新请求： 1234567891011121314151617181920212223242526272829class Parent extends Component { state = { query: ‘react’ }; fetchData = () =&gt; { const url = ‘https://hn.algolia.com/api/v1/search?query=‘ + this.state.query; // … Fetch data and do something … }; render() { return &lt;Child fetchData={this.fetchData} query={this.state.query} /&gt;; }}class Child extends Component { state = { data: null }; componentDidMount() { this.props.fetchData(); } componentDidUpdate(prevProps) { if (this.props.query !== prevProps.query) { this.props.fetchData(); } } render() { // … }} 在使用React的class组件这么多年后，我已经如此习惯于把不必要的props传递下去并且破坏父组件的封装以至于我在一周之前才意识到我为什么一定要这样做。 在class组件中，函数属性本身并不是数据流的一部分。组件的方法中包含了可变的this变量导致我们不能确定无疑地认为它是不变的。因此，即使我们只需要一个函数，我们也必须把一堆数据传递下去仅仅是为了做“diff”。我们无法知道传入的this.props.fetchData是否依赖状态，并且不知道它依赖的状态是否改变了。 使用useCallback，函数完全可以参与到数据流中。我们可以说如果一个函数的输入改变了，这个函数就改变了。如果没有，函数也不会改变。感谢周到的useCallback，属性比如props.fetchData的改变也会自动传递下去。 类似的，useMemo可以让我们对复杂对象做类似的事情。 1234567function ColorPicker() { // Doesn’t break Child’s shallow equality prop check // unless the color actually changes. const [color, setColor] = useState(‘pink’); const style = useMemo(() =&gt; ({ color }), [color]); return &lt;Child style={style} /&gt;;} 我想强调的是，到处使用useCallback是件挺笨拙的事。当我们需要将函数传递下去并且函数会在子组件的effect中被调用的时候，useCallback是很好的技巧且非常有用。或者你想试图减少对子组件的记忆负担，也不妨一试。但总的来说Hooks本身能更好地避免传递回调函数。 在上面的例子中，我更倾向于把fetchData放在我的effect里（它可以抽离成一个自定义Hook）或者是从顶层引入。我想让effects保持简单，而在里面调用回调会让事情变得复杂。（“如果某个props.onComplete回调改变了而请求还在进行中会怎么样？”）你可以模拟class的行为但那样并不能解决竞态的问题。 说说竞态下面是一个典型的在class组件里发请求的例子： 12345678910111213class Article extends Component { state = { article: null }; componentDidMount() { this.fetchData(this.props.id); } async fetchData(id) { const article = await API.fetchArticle(id); this.setState({ article }); } // …} 你很可能已经知道，上面的代码埋伏了一些问题。它并没有处理更新的情况。所以第二个你能够在网上找到的经典例子是下面这样的： 123456789101112131415161718class Article extends Component { state = { article: null }; componentDidMount() { this.fetchData(this.props.id); } componentDidUpdate(prevProps) { if (prevProps.id !== this.props.id) { this.fetchData(this.props.id); } } async fetchData(id) { const article = await API.fetchArticle(id); this.setState({ article }); } // …} 这显然好多了！但依旧有问题。有问题的原因是请求结果返回的顺序不能保证一致。比如我先请求 {id: 10}，然后更新到{id: 20}，但{id: 20}的请求更先返回。请求更早但返回更晚的情况会错误地覆盖状态值。 这被叫做竞态，这在混合了async / await（假设在等待结果返回）和自顶向下数据流的代码中非常典型（props和state可能会在async函数调用过程中发生改变）。 Effects并没有神奇地解决这个问题，尽管它会警告你如果你直接传了一个async函数给effect。（我们会改善这个警告来更好地解释你可能会遇到的这些问题。） 如果你使用的异步方式支持取消，那太棒了。你可以直接在清除函数中取消异步请求。 或者，最简单的权宜之计是用一个布尔值来跟踪它： 12345678910111213141516171819202122function Article({ id }) { const [article, setArticle] = useState(null); useEffect(() =&gt; { let didCancel = false; async function fetchData() { const article = await API.fetchArticle(id); if (!didCancel) { setArticle(article); } } fetchData(); return () =&gt; { didCancel = true; }; }, [id]); // …} 这篇文章讨论了更多关于如何处理错误和加载状态，以及抽离逻辑到自定义的Hook。我推荐你认真阅读一下如果你想学习更多关于如何在Hooks里请求数据的内容。 提高水准在class组件生命周期的思维模型中，副作用的行为和渲染输出是不同的。UI渲染是被props和state驱动的，并且能确保步调一致，但副作用并不是这样。这是一类常见问题的来源。 而在useEffect的思维模型中，默认都是同步的。副作用变成了React数据流的一部分。对于每一个useEffect调用，一旦你处理正确，你的组件能够更好地处理边缘情况。 然而，用好useEffect的前期学习成本更高。这可能让人气恼。用同步的代码去处理边缘情况天然就比触发一次不用和渲染结果步调一致的副作用更难。 这难免让人担忧如果useEffect是你现在使用最多的工具。不过，目前大抵还处理低水平使用阶段。因为Hooks太新了所以大家都还在低水平地使用它，尤其是在一些教程示例中。但在实践中，社区很可能即将开始高水平地使用Hooks，因为好的API会有更好的动量和冲劲。 我看到不同的应用在创造他们自己的Hooks，比如封装了应用鉴权逻辑的useFetch或者使用theme context的useTheme 。你一旦有了包含这些的工具箱，你就不会那么频繁地直接使用useEffect。但每一个基于它的Hook都能从它的适应能力中得到益处。 目前为止，useEffect主要用于数据请求。但是数据请求准确说并不是一个同步问题。因为我们的依赖经常是[]所以这一点尤其明显。那我们究竟在同步什么？ 长远来看， Suspense用于数据请求会允许第三方库通过第一等的途径告诉React暂停渲染直到某些异步事物（任何东西：代码，数据，图片）已经准备就绪。 当Suspense逐渐地覆盖到更多的数据请求使用场景，我预料useEffect会退居幕后作为一个强大的工具，用于同步props和state到某些副作用。不像数据请求，它可以很好地处理这些场景因为它就是为此而设计的。不过在那之前，自定义的Hooks比如这儿提到的是复用数据请求逻辑很好的方式。 结束语 原文作者：Dan Abramov原文链接：https://overreacted.io/a-complete-guide-to-useeffect/ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"前端","slug":"前端","permalink":"http://Lry0504.github.io/tags/前端/"}]},{"title":"React Hooks系列之useEffect（二）","date":"2019-12-25T05:36:10.603Z","path":"/posts/7/","text":"React Hooks系列之useEffect（二） 前言到目前为止，我们可以明确地喊出下面重要的事实：每一个组件内的函数（包括事件处理函数，effects，定时器或者API调用等等）会捕获某次渲染中定义的props和state。 所以下面的两个例子是相等的： 12345678function Example(props) { useEffect(() =&gt; { setTimeout(() =&gt; { console.log(props.counter); }, 1000); }); // ...} 123456789function Example(props) { const counter = props.counter; useEffect(() =&gt; { setTimeout(() =&gt; { console.log(counter); }, 1000); }); // ...} 在组件内什么时候去读取props或者state是无关紧要的。因为它们不会改变。在单次渲染的范围内，props和state始终保持不变。（解构赋值的props使得这一点更明显。） 当然，有时候你可能想在effect的回调函数里读取最新的值而不是捕获的值。最简单的实现方法是使用refs，这篇文章的最后一部分介绍了相关内容。 需要注意的是当你想要从过去渲染中的函数里读取未来的props和state，你是在逆潮而动。虽然它并没有错（有时候可能也需要这样做），但它因为打破了默认范式会使代码显得不够“干净”。这是我们有意为之的，因为它能帮助突出哪些代码是脆弱的，是需要依赖时间次序的。在class中，如果发生这种情况就没那么显而易见了。 下面这个计数器版本模拟了class中的行为： 12345678910111213function Example() { const [count, setCount] = useState(0); const latestCount = useRef(count); useEffect(() =&gt; { // Set the mutable latest value latestCount.current = count; setTimeout(() =&gt; { // Read the mutable latest value console.log(`You clicked ${latestCount.current} times`); }, 3000); }); // ... 在React中去直接修改值看上去有点怪异。然而，在class组件中React正是这样去修改this.state的。不像捕获的props和state，你没法保证在任意一个回调函数中读取的latestCount.current是不变的。根据定义，你可以随时修改它。这就是为什么它不是默认行为，而是需要你主动选择这样做。 正文Effect中的清理像文档中解释的, 有些effects可能需要有一个清理步骤。本质上，它的目的是消除副作用（effect)，比如取消订阅。 思考下面的代码: 123456useEffect(() =&gt; { ChatAPI.subscribeToFriendStatus(props.id, handleStatusChange); return () =&gt; { ChatAPI.unsubscribeFromFriendStatus(props.id, handleStatusChange); };}); 假设第一次渲染的时候props是{id: 10}，第二次渲染的时候是{id: 20}。你可能会认为发生了下面的这些事： React 清除了 {id: 10}的effect。 React 渲染{id: 20}的UI。 React 运行{id: 20}的effect。 (事实并不是这样。) 如果依赖这种心智模型，你可能会认为清除过程“看到”的是旧的props因为它是在重新渲染之前运行的，新的effect“看到”的是新的props因为它是在重新渲染之后运行的。这种心智模型直接来源于class组件的生命周期。不过它并不精确。让我们来一探究竟。 React只会在浏览器绘制后运行effects。这使得你的应用更流畅因为大多数effects并不会阻塞屏幕的更新。Effect的清除同样被延迟了。上一次的effect会在重新渲染后被清除： React 渲染{id: 20}的UI。 浏览器绘制。我们在屏幕上看到{id: 20}的UI。 React 清除{id: 10}的effect。 React 运行{id: 20}的effect。 你可能会好奇：如果清除上一次的effect发生在props变成{id: 20}之后，那它为什么还能“看到”旧的{id: 10}？ 引用上一章得到的结论: 组件内的每一个函数（包括事件处理函数，effects，定时器或者API调用等等）会捕获定义它们的那次渲染中的props和state。 现在答案显而易见。effect的清除并不会读取“最新”的props。它只能读取到定义它的那次渲染中的props值： 12345678910111213141516171819202122232425262728293031// First render, props are {id: 10}function Example() { // ... useEffect( // Effect from first render () =&gt; { ChatAPI.subscribeToFriendStatus(10, handleStatusChange); // Cleanup for effect from first render return () =&gt; { ChatAPI.unsubscribeFromFriendStatus(10, handleStatusChange); }; } ); // ...}// Next render, props are {id: 20}function Example() { // ... useEffect( // Effect from second render () =&gt; { ChatAPI.subscribeToFriendStatus(20, handleStatusChange); // Cleanup for effect from second render return () =&gt; { ChatAPI.unsubscribeFromFriendStatus(20, handleStatusChange); }; } ); // ...} 王国会崛起转而复归尘土，太阳会脱落外层变为白矮星，最后的文明也迟早会结束。但是第一次渲染中effect的清除函数只能看到{id: 10}这个props。 这正是为什么React能做到在绘制后立即处理effects — 并且默认情况下使你的应用运行更流畅。如果你的代码需要依然可以访问到老的props。 同步， 而非生命周期我最喜欢React的一点是它统一描述了初始渲染和之后的更新。这降低了你程序的熵。 比如我有个组件像下面这样： 1234567function Greeting({ name }) { return ( &lt;h1 className=\"Greeting\"&gt; Hello, {name} &lt;/h1&gt; );} 我先渲染&lt;Greeting name=\"Dan\" /&gt;然后渲染&lt;Greeting name=\"Yuzhi\" /&gt;，和我直接渲染&lt;Greeting name=\"Yuzhi\" /&gt;并没有什么区别。在这两种情况中，我最后看到的都是“Hello, Yuzhi”。 人们总是说：“重要的是旅行过程，而不是目的地”。在React世界中，恰好相反。重要的是目的，而不是过程。这就是JQuery代码中$.addClass或$.removeClass这样的调用（过程）和React代码中声明CSS类名应该是什么（目的）之间的区别。 React会根据我们当前的props和state同步到DOM。“mount”和“update”之于渲染并没有什么区别。 你应该以相同的方式去思考effects。useEffect使你能够根据props和state同步React tree之外的东西。 12345678910function Greeting({ name }) { useEffect(() =&gt; { document.title = 'Hello, ' + name; }); return ( &lt;h1 className=\"Greeting\"&gt; Hello, {name} &lt;/h1&gt; );} 这就是和大家熟知的mount/update/unmount心智模型之间细微的区别。理解和内化这种区别是非常重要的。如果你试图写一个effect会根据是否第一次渲染而表现不一致，你正在逆潮而动。如果我们的结果依赖于过程而不是目的，我们会在同步中犯错。 先渲染属性A，B再渲染C，和立即渲染C并没有什么区别。虽然他们可能短暂地会有点不同（比如请求数据时），但最终的结果是一样的。 不过话说回来，在每一次渲染后都去运行所有的effects可能并不高效。（并且在某些场景下，它可能会导致无限循环。） 所以我们该怎么解决这个问题？ 告诉React去比对你的Effects其实我们已经从React处理DOM的方式中学习到了解决办法。React只会更新DOM真正发生改变的部分，而不是每次渲染都大动干戈。 当你把 123&lt;h1 className=\"Greeting\"&gt; Hello, Dan&lt;/h1&gt; 更新到 123&lt;h1 className=\"Greeting\"&gt; Hello, Yuzhi&lt;/h1&gt; React 能够看到两个对象: 12const oldProps = {className: 'Greeting', children: 'Hello, Dan'};const newProps = {className: 'Greeting', children: 'Hello, Yuzhi'}; 它会检测每一个props，并且发现children发生改变需要更新DOM，但className并没有。所以它只需要这样做： 12domNode.innerText = 'Hello, Yuzhi';// No need to touch domNode.className 我们也可以用类似的方式处理effects吗？如果能够在不需要的时候避免调用effect就太好了。 举个例子，我们的组件可能因为状态变更而重新渲染： 12345678910111213141516function Greeting({ name }) { const [counter, setCounter] = useState(0); useEffect(() =&gt; { document.title = 'Hello, ' + name; }); return ( &lt;h1 className=\"Greeting\"&gt; Hello, {name} &lt;button onClick={() =&gt; setCounter(counter + 1)}&gt; Increment &lt;/button&gt; &lt;/h1&gt; );} 但是我们的effect并没有使用counter这个状态。我们的effect只会同步name属性给document.title，但name并没有变。在每一次counter改变后重新给document.title赋值并不是理想的做法。 好了，那React可以区分effects的不同吗？ 123let oldEffect = () =&gt; { document.title = 'Hello, Dan'; };let newEffect = () =&gt; { document.title = 'Hello, Dan'; };// Can React see these functions do the same thing? 并不能。React并不能猜测到函数做了什么如果不先调用的话。（源码中并没有包含特殊的值，它仅仅是引用了name属性。） 这是为什么你如果想要避免effects不必要的重复调用，你可以提供给useEffect一个依赖数组参数(deps)： 123useEffect(() =&gt; { document.title = 'Hello, ' + name;}, [name]); // Our deps 这好比你告诉React：“Hey，我知道你看不到这个函数里的东西，但我可以保证只使用了渲染中的name，别无其他。” 如果当前渲染中的这些依赖项和上一次运行这个effect的时候值一样，因为没有什么需要同步React会自动跳过这次effect： 12345678const oldEffect = () =&gt; { document.title = 'Hello, Dan'; };const oldDeps = ['Dan'];const newEffect = () =&gt; { document.title = 'Hello, Dan'; };const newDeps = ['Dan'];// React can't peek inside of functions, but it can compare deps.// Since all deps are the same, it doesn’t need to run the new effect. 即使依赖数组中只有一个值在两次渲染中不一样，我们也不能跳过effect的运行。要同步所有！ 关于依赖项不要对React撒谎关于依赖项对React撒谎会有不好的结果。直觉上，这很好理解，但我曾看到几乎所有依赖class心智模型使用useEffect的人都试图违反这个规则。（我刚开始也这么干了！） 1234567891011function SearchResults() { async function fetchData() { // ... } useEffect(() =&gt; { fetchData(); }, []); // Is this okay? Not always -- and there's a better way to write it. // ...} (官网的Hooks FAQ解释了应该怎么做。 我们在下面会重新回顾这个例子。) “但我只是想在挂载的时候运行它！”，你可能会说。现在只需要记住：如果你设置了依赖项，effect中用到的所有组件内的值都要包含在依赖中。这包括props，state，函数 — 组件内的任何东西。 有时候你是这样做了，但可能会引起一个问题。比如，你可能会遇到无限请求的问题，或者socket被频繁创建的问题。解决问题的方法不是移除依赖项。我们会很快了解具体的解决方案。 不过在我们深入解决方案之前，我们先尝试更好地理解问题。 如果设置了错误的依赖会怎么样呢？如果依赖项包含了所有effect中使用到的值，React就能知道何时需要运行它： 123useEffect(() =&gt; { document.title = 'Hello, ' + name;}, [name]); (依赖发生了变更，所以会重新运行effect。) 但是如果我们将[]设为effect的依赖，新的effect函数不会运行： 123useEffect(() =&gt; { document.title = 'Hello, ' + name;}, []); // Wrong: name is missing in deps (依赖没有变，所以不会再次运行effect。) 在这个例子中，问题看起来显而易见。但在某些情况下如果你脑子里“跳出”class组件的解决办法，你的直觉很可能会欺骗你。 举个例子，我们来写一个每秒递增的计数器。在Class组件中，我们的直觉是：“开启一次定时器，清除也是一次”。这里有一个例子说明怎么实现它。当我们理所当然地把它用useEffect的方式翻译，直觉上我们会设置依赖为[]。“我只想运行一次effect”，对吗？ 123456789101112function Counter() { const [count, setCount] = useState(0); useEffect(() =&gt; { const id = setInterval(() =&gt; { setCount(count + 1); }, 1000); return () =&gt; clearInterval(id); }, []); return &lt;h1&gt;{count}&lt;/h1&gt;;} 然而，这个例子只会递增一次。天了噜。 如果你的心智模型是“只有当我想重新触发effect的时候才需要去设置依赖”，这个例子可能会让你产生存在危机。你想要触发一次因为它是定时器 — 但为什么会有问题？ 如果你知道依赖是我们给React的暗示，告诉它effect所有需要使用的渲染中的值，你就不会吃惊了。effect中使用了count但我们撒谎说它没有依赖。如果我们这样做迟早会出幺蛾子。 在第一次渲染中，count是0。因此，setCount(count + 1)在第一次渲染中等价于setCount(0 + 1)。既然我们设置了[]依赖，effect不会再重新运行，它后面每一秒都会调用setCount(0 + 1) ： 1234567891011121314151617181920212223242526272829303132// First render, state is 0function Counter() { // ... useEffect( // Effect from first render () =&gt; { const id = setInterval(() =&gt; { setCount(0 + 1); // Always setCount(1) }, 1000); return () =&gt; clearInterval(id); }, [] // Never re-runs ); // ...}// Every next render, state is 1function Counter() { // ... useEffect( // This effect is always ignored because // we lied to React about empty deps. () =&gt; { const id = setInterval(() =&gt; { setCount(1 + 1); }, 1000); return () =&gt; clearInterval(id); }, [] ); // ...} 我们对React撒谎说我们的effect不依赖组件内的任何值，可实际上我们的effect有依赖！ 我们的effect依赖count - 它是组件内的值（不过在effect外面定义）： 12345678const count = // ...useEffect(() =&gt; { const id = setInterval(() =&gt; { setCount(count + 1); }, 1000); return () =&gt; clearInterval(id);}, []); 因此，设置[]为依赖会引入一个bug。React会对比依赖，并且跳过后面的effect： (依赖没有变，所以不会再次运行effect。) 类似于这样的问题是很难被想到的。因此，我鼓励你将诚实地告知effect依赖作为一条硬性规则，并且要列出所以依赖。（我们提供了一个lint规则如果你想在你的团队内做硬性规定。） 两种诚实告知依赖的方法有两种诚实告知依赖的策略。你应该从第一种开始，然后在需要的时候应用第二种。 第一种策略是在依赖中包含所有effect中用到的组件内的值。让我们在依赖中包含count： 123456useEffect(() =&gt; { const id = setInterval(() =&gt; { setCount(count + 1); }, 1000); return () =&gt; clearInterval(id);}, [count]); 现在依赖数组正确了。虽然它可能不是太理想但确实解决了上面的问题。现在，每次count修改都会重新运行effect，并且定时器中的setCount(count + 1)会正确引用某次渲染中的 count值： 12345678910111213141516171819202122232425262728293031// First render, state is 0function Counter() { // ... useEffect( // Effect from first render () =&gt; { const id = setInterval(() =&gt; { setCount(0 + 1); // setCount(count + 1) }, 1000); return () =&gt; clearInterval(id); }, [0] // [count] ); // ...}// Second render, state is 1function Counter() { // ... useEffect( // Effect from second render () =&gt; { const id = setInterval(() =&gt; { setCount(1 + 1); // setCount(count + 1) }, 1000); return () =&gt; clearInterval(id); }, [1] // [count] ); // ...} 这能解决问题但是我们的定时器会在每一次count改变后清除和重新设定。这应该不是我们想要的结果： (依赖发生了变更，所以会重新运行effect。) 第二种策略是修改effect内部的代码以确保它包含的值只会在需要的时候发生变更。我们不想告知错误的依赖 - 我们只是修改effect使得依赖更少。 让我们来看一些移除依赖的常用技巧。 让Effects自给自足我们想去掉effect的count依赖。 123456useEffect(() =&gt; { const id = setInterval(() =&gt; { setCount(count + 1); }, 1000); return () =&gt; clearInterval(id);}, [count]); 为了实现这个目的，我们需要问自己一个问题：我们为什么要用count？可以看到我们只在setCount调用中用到了count。在这个场景中，我们其实并不需要在effect中使用count。当我们想要根据前一个状态更新状态的时候，我们可以使用setState的函数形式： 123456useEffect(() =&gt; { const id = setInterval(() =&gt; { setCount(c =&gt; c + 1); }, 1000); return () =&gt; clearInterval(id);}, []); 我喜欢把类似这种情况称为“错误的依赖”。是的，因为我们在effect中写了setCount(count + 1)所以count是一个必需的依赖。但是，我们真正想要的是把count转换为count+1，然后返回给React。可是React其实已经知道当前的count。我们需要告知React的仅仅是去递增状态 - 不管它现在具体是什么值。 这正是setCount(c =&gt; c + 1)做的事情。你可以认为它是在给React“发送指令”告知如何更新状态。这种“更新形式”在其他情况下也有帮助，比如你需要批量更新。 注意我们做到了移除依赖，并且没有撒谎。我们的effect不再读取渲染中的count值。 (依赖没有变，所以不会再次运行effect。) 你可以自己试试。 尽管effect只运行了一次，第一次渲染中的定时器回调函数可以完美地在每次触发的时候给React发送c =&gt; c + 1更新指令。它不再需要知道当前的count值。因为React已经知道了。 结束语 原文作者：Dan Abramov原文链接：https://overreacted.io/a-complete-guide-to-useeffect/ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"前端","slug":"前端","permalink":"http://Lry0504.github.io/tags/前端/"}]},{"title":"React Hooks系列之useEffect（一）","date":"2019-12-17T11:47:08.984Z","path":"/posts/6/","text":"React Hooks系列之useEffect（一） 前言你用Hooks写了一些组件，甚或写了一个小型应用。你可能很满意，使用它的API很舒服并且在这个过程中获得了一些小技巧。你甚至可能写了一些custom Hooks去抽离重复的逻辑（精简掉了300行代码），并且得意地展示给你的同事看，“干得漂亮”，他们如是说。 但有时候当你使用useEffect你总觉得哪儿有点不对劲。你会嘀咕你可能遗漏了什么。它看起来像class的生命周期…但真的是这样吗？你发觉自己在问类似下面的这些问题： 🤔 如何用useEffect模拟componentDidMount生命周期？ 🤔 如何正确地在useEffect里请求数据？[]又是什么？ 🤔 我应该把函数当做effect的依赖吗？ 🤔 为什么有时候会出现无限重复请求的问题？ 🤔 为什么有时候在effect里拿到的是旧的state或prop？ 当我刚开始使用Hooks的时候，我也同样被上面这些问题所困扰。甚至当我写最初的文档时，我也并没有扎实地掌握某些细节。我经历了一些“啊哈”的开窍时刻，我想把这些分享给你。 在看答案之前，我们需要先往后退一步。这篇文章的目的不是给你一个要点清单，而是想帮你真正地领会useEffect。其实我们并没有太多需要学习的，事实上，我们会花很多时间试图忘记某些已经习得的概念（unlearning）。 当我不再透过熟悉的class生命周期方法去窥视useEffect这个Hook的时候，我才得以融会贯通。 “忘记你已经学到的。” — Yoda 如果你对于深入研究感觉不是很适应的话，你或许可以等下面这些解释出现在其他文章中再去了解也行。就像2013年React刚出世的时候，大家需要时间去理解消化一种不同的心智模型。知识也需要时间去普及。 摘要如果你不想阅读整篇文章，可以快速浏览这份摘要。要是某些部分不容易理解，你可以往下滚动寻找相关的内容去阅读。 🤔 Question: 如何用useEffect模拟componentDidMount生命周期？ 虽然可以使用useEffect(fn, [])，但它们并不完全相等。和componentDidMount不一样，useEffect会捕获props和state。所以即便在回调函数里，你拿到的还是初始的props和state。如果你想得到“最新”的值，你可以使用ref。不过，通常会有更简单的实现方式，所以你并不一定要用ref。记住，effects的心智模型和componentDidMount以及其他生命周期是不同的，试图找到它们之间完全一致的表达反而更容易使你混淆。想要更有效，你需要“think in effects”，它的心智模型更接近于实现状态同步，而不是响应生命周期事件。 🤔 Question: 如何正确地在useEffect里请求数据？[]又是什么？ 这篇文章是很好的入门，介绍了如何在useEffect里做数据请求。请务必读完它！它没有我的这篇这么长。[] 表示effect没有使用任何React数据流里的值，因此该effect仅被调用一次是安全的。[]同样也是一类常见问题的来源，也即你以为没使用数据流里的值但其实使用了。你需要学习一些策略（主要是useReducer 和 useCallback）来移除这些effect依赖，而不是错误地忽略它们。 🤔 Question: 我应该把函数当做effect的依赖吗？ 一般建议把不依赖props和state的函数提到你的组件外面，并且把那些仅被effect使用的函数放到effect里面。如果这样做了以后，你的effect还是需要用到组件内的函数（包括通过props传进来的函数），可以在定义它们的地方用useCallback包一层。为什么要这样做呢？因为这些函数可以访问到props和state，因此它们会参与到数据流中。我们官网的FAQ有更详细的答案。 🤔 Question: 为什么有时候会出现无限重复请求的问题？ 这个通常发生于你在effect里做数据请求并且没有设置effect依赖参数的情况。没有设置依赖，effect会在每次渲染后执行一次，然后在effect中更新了状态引起渲染并再次触发effect。无限循环的发生也可能是因为你设置的依赖总是会改变。你可以通过一个一个移除的方式排查出哪个依赖导致了问题。但是，移除你使用的依赖（或者盲目地使用[]）通常是一种错误的解决方式。你应该做的是解决问题的根源。举个例子，函数可能会导致这个问题，你可以把它们放到effect里，或者提到组件外面，或者用useCallback包一层。useMemo可以做类似的事情以避免重复生成对象。 🤔 Question: 为什么有时候在effect里拿到的是旧的state或prop呢？ Effect拿到的总是定义它的那次渲染中的props和state。这能够避免一些bugs，但在一些场景中又会有些讨人嫌。对于这些场景，你可以明确地使用可变的ref保存一些值（上面文章的末尾解释了这一点）。如果你觉得在渲染中拿到了一些旧的props和state，且不是你想要的，你很可能遗漏了一些依赖。可以尝试使用这个lint规则来训练你发现这些依赖。可能没过几天，这种能力会变得像是你的第二天性。同样可以看我们官网FAQ中的这个回答。 我希望这个摘要对你有所帮助！要不，我们开始正文。 正文每一次渲染都有它自己的Props and State在我们讨论effects之前，我们需要先讨论一下渲染（rendering）。 我们来看一个计数器组件Counter，注意&lt;p&gt;You clicked {count} times&lt;/p&gt;这一行： 123456789101112function Counter() { const [count, setCount] = useState(0); return ( &lt;div&gt; &lt;p&gt;You clicked {count} times&lt;/p&gt; &lt;button onClick={() =&gt; setCount(count + 1)}&gt; Click me &lt;/button&gt; &lt;/div&gt; );} 注意的代码究竟是什么意思呢？count 会“监听”状态的变化并自动更新吗？这么想可能是学习React的时候有用的第一直觉，但它并不是精确的心智模型。 上面例子中，count仅是一个数字而已。它不是神奇的“data binding”, “watcher”, “proxy”，或者其他任何东西。它就是一个普通的数字像下面这个一样： 1234const count = 42;// ...&lt;p&gt;You clicked {count} times&lt;/p&gt;// ... 我们的组件第一次渲染的时候，从useState()拿到count的初始值0。当我们调用setCount(1)，React会再次渲染组件，这一次count是1。如此等等： 1234567891011121314151617181920212223// During first renderfunction Counter() { const count = 0; // Returned by useState() // ... &lt;p&gt;You clicked {count} times&lt;/p&gt; // ...}// After a click, our function is called againfunction Counter() { const count = 1; // Returned by useState() // ... &lt;p&gt;You clicked {count} times&lt;/p&gt; // ...}// After another click, our function is called againfunction Counter() { const count = 2; // Returned by useState() // ... &lt;p&gt;You clicked {count} times&lt;/p&gt; // ...} 当我们更新状态的时候，React会重新渲染组件。每一次渲染都能拿到独立的count 状态，这个状态值是函数中的一个常量。 所以下面的这行代码没有做任何特殊的数据绑定： 1&lt;p&gt;You clicked {count} times&lt;/p&gt; 它仅仅只是在渲染输出中插入了count这个数字。这个数字由React提供。当setCount的时候，React会带着一个不同的count值再次调用组件。然后，React会更新DOM以保持和渲染输出一致。 这里关键的点在于任意一次渲染中的count常量都不会随着时间改变。渲染输出会变是因为我们的组件被一次次调用，而每一次调用引起的渲染中，它包含的count值独立于其他渲染。 （关于这个过程更深入的探讨可以查看我的另一篇文章React as a UI Runtime） 每一次渲染都有它自己的事件处理函数到目前为止一切都还好。那么事件处理函数呢？ 看下面的这个例子。它在三秒后会alert点击次数count： 123456789101112131415161718192021function Counter() { const [count, setCount] = useState(0); function handleAlertClick() { setTimeout(() =&gt; { alert('You clicked on: ' + count); }, 3000); } return ( &lt;div&gt; &lt;p&gt;You clicked {count} times&lt;/p&gt; &lt;button onClick={() =&gt; setCount(count + 1)}&gt; Click me &lt;/button&gt; &lt;button onClick={handleAlertClick}&gt; Show alert &lt;/button&gt; &lt;/div&gt; );} 如果我按照下面的步骤去操作： 点击增加count到3 点击一下 “Show alert” 点击增加count到5并且在定时器回调触发前完成 你猜alert会弹出什么呢？会是5吗？— 这个值是alert的时候count的实时状态。或者会是3吗？— 这个值是我点击时候的状态。 来自己试试吧！ 如果结果和你预料不一样，你可以想象一个更实际的例子：一个聊天应用在state中保存了当前接收者的ID，以及一个发送按钮。这篇文章深入探索了个中缘由。正确的答案就是3。 alert会“捕获”我点击按钮时候的状态。 （虽然有其他办法可以实现不同的行为，但现在我会专注于这个默认的场景。当我们在构建一种心智模型的时候，在可选的策略中分辨出“最小阻力路径”是非常重要的。） 但它究竟是如何工作的呢？ 我们发现count在每一次函数调用中都是一个常量值。值得强调的是 — 我们的组件函数每次渲染都会被调用，但是每一次调用中count值都是常量，并且它被赋予了当前渲染中的状态值。 这并不是React特有的，普通的函数也有类似的行为： 123456789101112131415function sayHi(person) { const name = person.name; setTimeout(() =&gt; { alert('Hello, ' + name); }, 3000);}let someone = {name: 'Dan'};sayHi(someone);someone = {name: 'Yuzhi'};sayHi(someone);someone = {name: 'Dominic'};sayHi(someone); 在这个例子中, 外层的someone会被赋值很多次（就像在React中，当前的组件状态会改变一样）。然后，在sayHi函数中，局部常量name会和某次调用中的person关联。因为这个常量是局部的，所以每一次调用都是相互独立的。结果就是，当定时器回调触发的时候，每一个alert都会弹出它拥有的name。 这就解释了我们的事件处理函数如何捕获了点击时候的count值。如果我们应用相同的替换原理，每一次渲染“看到”的是它自己的count： 1234567891011121314151617181920212223242526272829303132333435// During first renderfunction Counter() { const count = 0; // Returned by useState() // ... function handleAlertClick() { setTimeout(() =&gt; { alert('You clicked on: ' + count); }, 3000); } // ...}// After a click, our function is called againfunction Counter() { const count = 1; // Returned by useState() // ... function handleAlertClick() { setTimeout(() =&gt; { alert('You clicked on: ' + count); }, 3000); } // ...}// After another click, our function is called againfunction Counter() { const count = 2; // Returned by useState() // ... function handleAlertClick() { setTimeout(() =&gt; { alert('You clicked on: ' + count); }, 3000); } // ...} 所以实际上，每一次渲染都有一个“新版本”的handleAlertClick。每一个版本的handleAlertClick“记住” 了它自己的 count： 1234567891011121314151617181920212223242526272829303132333435363738// During first renderfunction Counter() { // ... function handleAlertClick() { setTimeout(() =&gt; { alert('You clicked on: ' + 0); }, 3000); } // ... &lt;button onClick={handleAlertClick} /&gt; // The one with 0 inside // ...}// After a click, our function is called againfunction Counter() { // ... function handleAlertClick() { setTimeout(() =&gt; { alert('You clicked on: ' + 1); }, 3000); } // ... &lt;button onClick={handleAlertClick} /&gt; // The one with 1 inside // ...}// After another click, our function is called againfunction Counter() { // ... function handleAlertClick() { setTimeout(() =&gt; { alert('You clicked on: ' + 2); }, 3000); } // ... &lt;button onClick={handleAlertClick} /&gt; // The one with 2 inside // ...} 这就是为什么在这个demo中，事件处理函数“属于”某一次特定的渲染，当你点击的时候，它会使用那次渲染中count的状态值。 在任意一次渲染中，props和state是始终保持不变的。如果props和state在不同的渲染中是相互独立的，那么使用到它们的任何值也是独立的（包括事件处理函数）。它们都“属于”一次特定的渲染。即便是事件处理中的异步函数调用“看到”的也是这次渲染中的count值。 备注：上面我将具体的count值直接内联到了handleAlertClick函数中。这种心智上的替换是安全的，因为count值在某次特定渲染中不可能被改变。它被声明成了一个常量并且是一个数字。这样去思考其他类型的值比如对象也同样是安全的，当然需要在我们都同意应该避免直接修改state这个前提下。通过调用setSomething(newObj)的方式去生成一个新的对象而不是直接修改它是更好的选择，因为这样能保证之前渲染中的state不会被污染。 每次渲染都有它自己的Effects这篇文章是关于effects的，但目前我们居然还没有讨论effects！ 言归正传，由上面的分析得出一个结果，effects其实并没有什么两样。 让我们回到官网文档中的这个例子： 12345678910111213141516function Counter() { const [count, setCount] = useState(0); useEffect(() =&gt; { document.title = `You clicked ${count} times`; }); return ( &lt;div&gt; &lt;p&gt;You clicked {count} times&lt;/p&gt; &lt;button onClick={() =&gt; setCount(count + 1)}&gt; Click me &lt;/button&gt; &lt;/div&gt; );} 抛一个问题给你：effect是如何读取到最新的count 状态值的呢？ 也许，是某种“data binding”或“watching”机制使得count能够在effect函数内更新？也或许count是一个可变的值，React会在我们组件内部修改它以使我们的effect函数总能拿到最新的值？ 都不是。 我们已经知道count是某个特定渲染中的常量。事件处理函数“看到”的是属于它那次特定渲染中的count状态值。对于effects也同样如此： 并不是count的值在“不变”的effect中发生了改变，而是effect函数本身在每一次渲染中都不相同。 每一个effect版本“看到”的count值都来自于它属于的那次渲染： 1234567891011121314151617181920212223242526272829303132333435// During first renderfunction Counter() { // ... useEffect( // Effect function from first render () =&gt; { document.title = `You clicked ${0} times`; } ); // ...}// After a click, our function is called againfunction Counter() { // ... useEffect( // Effect function from second render () =&gt; { document.title = `You clicked ${1} times`; } ); // ...}// After another click, our function is called againfunction Counter() { // ... useEffect( // Effect function from third render () =&gt; { document.title = `You clicked ${2} times`; } ); // ..} React会记住你提供的effect函数，并且会在每次更改作用于DOM并让浏览器绘制屏幕后去调用它。 所以虽然我们说的是一个effect（这里指更新document的title），但其实每次渲染都是一个不同的函数 — 并且每个effect函数“看到”的props和state都来自于它属于的那次特定渲染。 概念上，你可以想象effects是渲染结果的一部分。 严格地说，它们并不是（为了允许Hook的组合并且不引入笨拙的语法或者运行时）。但是在我们构建的心智模型上，effect函数属于某个特定的渲染，就像事件处理函数一样。 为了确保我们已经有了扎实的理解，我们再回顾一下第一次的渲染过程： React: 给我状态为0时候的UI。 你的组件: 给你需要渲染的内容: &lt;p&gt;You clicked 0 times&lt;/p&gt;。 记得在渲染完了之后调用这个effect: () =&gt; { document.title = ‘You clicked 0 times’ }。 React: 没问题。开始更新UI，喂浏览器，我要给DOM添加一些东西。 浏览器: 酷，我已经把它绘制到屏幕上了。 React: 好的， 我现在开始运行给我的effect 运行 () =&gt; { document.title = ‘You clicked 0 times’ }。 现在我们回顾一下我们点击之后发生了什么： 你的组件: 喂 React, 把我的状态设置为1。 React: 给我状态为1时候的UI。 你的组件: 给你需要渲染的内容: &lt;p&gt;You clicked 1 times&lt;/p&gt;。 记得在渲染完了之后调用这个effect： () =&gt; { document.title = ‘You clicked 1 times’ }。 React: 没问题。开始更新UI，喂浏览器，我修改了DOM。 Browser: 酷，我已经将更改绘制到屏幕上了。 React: 好的， 我现在开始运行属于这次渲染的effect 运行 () =&gt; { document.title = ‘You clicked 1 times’ }。 每一次渲染都有它自己的…我们现在知道effects会在每次渲染后运行，并且概念上它是组件输出的一部分，可以“看到”属于某次特定渲染的props和state。 我们来做一个思想实验，思考下面的代码： 123456789101112131415161718function Counter() { const [count, setCount] = useState(0); useEffect(() =&gt; { setTimeout(() =&gt; { console.log(`You clicked ${count} times`); }, 3000); }); return ( &lt;div&gt; &lt;p&gt;You clicked {count} times&lt;/p&gt; &lt;button onClick={() =&gt; setCount(count + 1)}&gt; Click me &lt;/button&gt; &lt;/div&gt; );} 如果我点击了很多次并且在effect里设置了延时，打印出来的结果会是什么呢？ 你可能会认为这是一个很绕的题并且结果是反直觉的。完全错了！我们看到的就是顺序的打印输出 — 每一个都属于某次特定的渲染，因此有它该有的count值。你可以自己试一试： 你可能会想：“它当然应该是这样的。否则还会怎么样呢？” 不过，class中的this.state并不是这样运作的。你可能会想当然以为下面的class实现和上面是相等的： 12345componentDidUpdate() { setTimeout(() =&gt; { console.log(`You clicked ${this.state.count} times`); }, 3000);} 然而，this.state.count总是指向最新的count值，而不是属于某次特定渲染的值。所以你会看到每次打印输出都是5： 我觉得Hooks这么依赖Javascript闭包是挺讽刺的一件事。有时候组件的class实现方式会受闭包相关的苦（the canonical wrong-value-in-a-timeout confusion），但其实这个例子中真正的混乱来源是可变数据（React修改了class中的this.state使其指向最新状态），并不是闭包本身的错。 当封闭的值始终不会变的情况下闭包是非常棒的。这使它们非常容易思考因为你本质上在引用常量。正如我们所讨论的，props和state在某个特定渲染中是不会改变的。顺便说一下，我们可以使用闭包修复上面的class版本… 结束语 原文作者：Dan Abramov原文链接：https://overreacted.io/a-complete-guide-to-useeffect/ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"前端","slug":"前端","permalink":"http://Lry0504.github.io/tags/前端/"}]},{"title":"React Hooks初探","date":"2019-12-06T02:24:43.194Z","path":"/posts/5/","text":"React Hooks初探 前言Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 正文背景介绍如果你使用过React一段时间，你会发现在React组件之间复用逻辑状态很难，虽然可以通过render props 和HOC高阶组件这类方案解决，但是很容易让代码变得难以理解。 Hook给予了函数式组件类似于类组件生命周期的概念，扩大了函数式组件的应用范围。Hooks 的出现使得函数组件也有了自己的状态与业务逻辑，简单逻辑在自己内部处理即可，不再需要通过 Props 的传递，使简单逻辑组件抽离更加方便，也使使用者无需关心组件内部的逻辑，只关心 Hooks 组件返回的结果即可 Hook初探我们通过官网计数器的例子，来看看 class 组件与 hooks 的区别。 采用class组件写法: 采用hooks后代码: 通过上诉两种方法比较可以看出：使用Hooks，相关的状态逻辑可以放在单个方法中管理，而且不需要写成React.Component组件形式，而是作为一个逻辑状态管理的方法，方便后期复用。 基础Hooks※ useStateuseState是一个基础的状态管理Hooks，它将分散的初始状态、获取状态和修改状态统一在一个方法中，这样有利于将单个状态的相关内容统一维护，复用更加简便。具体使用如下: 1const [count, setCount] = useState(initialState); initialState是初始化状态，上述代码有两个返回值count和setCount()。一个用来获取最新的状态值，一个用来修改状态，后面所有与该状态相关的代码都在同一个方法中。如果你需要多个状态，你可以使用多个useState管理相对应的状态。如果我们想要获取上一轮该state的值，只需要在setCount使用时，传入上一轮的state值，即setCount(count =&gt; count + 1) ※ useEffectuseEffect其实就是一个Effect Hook，它给函数组件增加了操作副作用（在React组件中有过数据获取、订阅或手动修改DOM）的能力。它与class组件中的componentDidMount、componentDidUpdate、componentWillUnMount具有相同的用途，只不过被合并成了一个API。具体使用如下: 123456useEffect(() =&gt; { //这里操作副作用 return () =&gt; { //清除effect，组件卸载时执行 }}, Drip) 上述代码中return返回的函数，其实是effect可选的清除机制。每个effect都可以返回一个清除函数，React会在组件卸载时执行它们。Drip是effect的第二个参数（可选），它可以用来控制effect是否每次更新渲染都需要执行。effect在每次渲染的时候都会执行。这就是为什么React会在执行当前effect之前对上一个effect进行清除。同state一样，effect也可以使用多次，但需要注意React会按照effect声明的顺序依次调用组件中的effect ※ useContext在React中，为了避免参数深层次的传递，一般会在父组件上创建一个Context，在子孙组件都可以获取到这个Context，这样就避免了参数需要一层层传递下去。具体使用如下: 1const context = useContext(Context) useContext接收一个Context对象(React.createContext的返回值)，返回该context的当前值。context的当前值由上层组件中距离当前组件最近的&lt;Context.Provider&gt;的value prop决定。 额外的Hooks※ useReduceruseReducer是useState的替代方案，它接收一个形如(state, action) =&gt; newState的reducer(与Redux类似)，并返回当前的state值以及配套的dispatch方法。具体使用如下： 1const [state, dispatch] = useReducer(reducer, initialState) 在某些应用场景下，useReducer比useState更适用。例如state逻辑复杂并且包含多个子值，或者下一个state依赖之前的state。React会确保dispatch函数的标识是稳定的，并且不会在组件重新渲染时改变。这就是为什么可以安全地从useEffect或useCallback的依赖列表中省略dispatch ※ useMemo在某些情况下，我们在渲染时计算一个值需要进行高开销的计算，而这个值会受一些参数的影响。当参数没有变化时，这个值不会发生变化；当参数变化时，需要重新计算。为了提升效率，就可以使用useMemo这个Hooks。useMemo接收两个参数，一个是计算值的方法，一个是依赖项数组(里面是影响值的参数)。具体使用如下: 1const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]) 上述代码中，计算得到的memoizedValue会受依赖项数组中的参数a, b影响。当参数不变时，不会重新计算memoizedValue的值；当任一参数变化时，都会触发重新执行computeExpensiveValue方法计算新的memoizedValue。如果没有提供依赖项数组，useMemo在每次渲染时都会执行计算新的值 ※ useCallbackuseCallback方法与useMemo方法类似，也是避免重复计算，区别在于useCallback返回的是一个memoized回调函数。该回调函数只有在某个依赖项改变时才会更新。具体使用如下: 1const callbackFn = useCallback(() =&gt; doSomething(a, b), [a, b]) 直接调用callbackFn()方法，最终执行的是doSomething()的代码 ※ useRef在Hooks之前，我们经常会使用ref去找特定的DOM元素，如果你将ref以&lt;div ref={myRef}&gt;&lt;/div&gt;这种方式传入组件，则无论该节点如何改变，React都会将ref对象的.current属性设置为对应的DOM节点。useRef返回一个可变的ref对象，其.current属性初始化为传入的参数(initialValue),返回的ref对象在整个生命周期中保持不变。具体使用如下: 1const ref = useRef(initialValue) useRef会在每次渲染时返回同一个ref对象，变更.current属性不会引发组件重新渲染。如果想要在React绑定或解绑DOM节点的ref时运行某些代码，则需要使用回调ref来实现。 结束语 如有错误，欢迎指正 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"前端","slug":"前端","permalink":"http://Lry0504.github.io/tags/前端/"}]},{"title":"Js数组去重","date":"2019-10-15T02:08:22.198Z","path":"/posts/4/","text":"Js数组去重的几种实现方式 前言Js数组去重问题，是面试当中的经典问题，也是比较基础的问题了，下面总结几种比较常见的操作 正文双层循环 思路：利用双层循环嵌套，然后用splice去重。当循环数组的第一个值和第二个值相同的时候，用splice删除第二个值 12345678910111213var arr = [1,1,\"true\",true,\"false\",false,NaN,null,NaN,\"NaN\",null,undefined,15,undefined,15,{},0,\"a\",{},0,\"a\"];function unique(arr) { for(var i = 0; i &lt; arr.length; i++) { for(var j = i + 1; j &lt; arr.length; j++) { if(arr[i] === arr[j]) { arr.splice(j, 1); j--; } } } return arr;}console.log(unique(arr)); //[1, \"true\", true, \"false\", false, NaN, null, NaN, \"NaN\", undefined, 15, {…}, 0, \"a\", {…}] 从打印结果可以看出，双层循环不能去重 NaN 和 {} indexOf循环 思路：利用indexOf循环数组，判断结果数组res中是否存在当前元素，如果存在，则跳过，否则把当前元素添加到结果数组res中 1234567891011var arr = [1,1,\"true\",true,\"false\",false,NaN,null,NaN,\"NaN\",null,undefined,15,undefined,15,{},0,\"a\",{},0,\"a\"];function unique(arr) { var res = []; for(var i = 0; i &lt; arr.length; i++) { if(res.indexOf(arr[i]) === -1) { res.push(arr[i]); } } return res;}console.log(unique(arr)); //[1, \"true\", true, \"false\", false, NaN, null, NaN, \"NaN\", undefined, 15, {…}, 0, \"a\", {…}] 从打印结果中可以看出，使用indexOf循环数组，也不能去重 NaN 和 {} 排序后去重 思路：将数组使用sort排序后，相同的值便会排在一起，这样我们只需要判断当前的元素与上一个元素是否相同，如果相同，就说明重复，否则push进res 123456789101112var arr = [1,1,\"true\",true,\"false\",false,NaN,null,NaN,\"NaN\",null,undefined,15,undefined,15,{},0,\"a\",{},0,\"a\"];function unique(arr) { arr = arr.sort(); var res = [arr[0]]; for(var i = 1; i &lt; arr.length; i++) { if(arr[i] !== arr[i-1]) { res.push(arr[i]); } } return res;}console.log(unique(arr)); //[0, 1, 15, NaN, NaN, \"NaN\", {…}, {…}, \"a\", \"false\", false, null, \"true\", true, undefined] 从打印结果来看，使用sort排序后去重，也不能去重 NaN 和 {} 利用includes 思路：includes主要用来测试数组中是否含有某个值 1234567891011var arr = [1,1,\"true\",true,\"false\",false,NaN,null,NaN,\"NaN\",null,undefined,15,undefined,15,{},0,\"a\",{},0,\"a\"];function unique(arr) { var res = []; for(var i = 0; i &lt; arr.length; i++) { if(!res.includes(arr[i])) { res.push(arr[i]); } } return res;}console.log(unique(arr)); //[1, \"true\", true, \"false\", false, NaN, null, \"NaN\", undefined, 15, {…}, 0, \"a\", {…}] 从打印结果可以看出，利用includes去重，不能去重 {} 利用filter 思路：f判断数组中，当前元素在数组中的第一个索引是否是filter中当前索引值 1234567var arr = [1,1,\"true\",true,\"false\",false,NaN,null,NaN,\"NaN\",null,undefined,15,undefined,15,{},0,\"a\",{},0,\"a\"];function unique(arr) { return arr.filter(function(item, index, arr) { return arr.indexOf(item) === index; })}console.log(unique(arr)); //[1, \"true\", true, \"false\", false, null, \"NaN\", undefined, 15, {…}, 0, \"a\", {…}] 从打印结果可以看出，利用filter去重，把 NaN 去掉了，并且不能去重 {} 利用reduce+includes1234567var arr = [1,1,\"true\",true,\"false\",false,NaN,null,NaN,\"NaN\",null,undefined,15,undefined,15,{},0,\"a\",{},0,\"a\"];function unique(arr) { return arr.reduce((acc, cur) =&gt; acc.includes(cur) ? acc : [...acc, cur], [] )}console.log(unique(arr)); //[1, \"true\", true, \"false\", false, NaN, null, \"NaN\", undefined, 15, {…}, 0, \"a\", {…}] 从打印结果可以看出，利用reduce+includes去重，不能去重 {} 利用Set 思路：Set对象是值的集合，你可以按照插入的顺序迭代它的元素。 Set中的元素只会出现一次，即 Set 中的元素是唯一的 12345var arr = [1,1,\"true\",true,\"false\",false,NaN,null,NaN,\"NaN\",null,undefined,15,undefined,15,{},0,\"a\",{},0,\"a\"];function unique(arr) { return Array.from(new Set(arr));}console.log(unique(arr)); // [1, \"true\", true, \"false\", false, NaN, null, \"NaN\", undefined, 15, {…}, 0, \"a\", {…}] 从打印结果可以看出，利用ES6新语法Set去重，不能去重 {}。上面代码中，Array.from(new Set(arr))可以简化为[... new Set(arr)] 利用hasOwnPropertyhasOwnProperty方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（是否有指定的键），此方法无法检查该对象的原型链中是否具有该属性，该属性必须是对象本身的一个成员。 思路：利用一个空对象obj，把数组的值存成obj对象的key值，如obj[arr[item1]] = true，判断另一个值obj[arr[item2]]是否存在，如果存在，则是相同的值 12345678var arr = [1,\"1\",2,2,1];function unique(arr) { var obj = {}; return arr.filter(function(item, index, arr) { return obj.hasOwnProperty(item) ? false : (obj[item] = true) })}console.log(unique(arr)); //[1,2] 从打印结果可以看出，这个方法是存在问题的。”1”和1是不同的，但是Object[1]和Object[“1”]却是同一个引用（对象key值只能是字符串）解决办法：使用typeof item + item拼成字符串作为key值 12345678var arr = [1,\"1\",2,2,1,{value: 1},{value: 1},{value: 2}];function unique(arr) { var obj = {}; return arr.filter(function(item, index, arr) { return obj.hasOwnProperty(typeof item + item) ? false : (obj[typeof item + item] = true) })}console.log(unique(arr)); //[1, \"1\", 2, {value: 1}] 从打印结果仍能看出，如果数组中存在对象时，如{value: 1}，typeof item + item的结果都是object[object Object]解决方法：使用JSON.stringify()将对象序列化来避免相同的键值 12345678var arr = [1,\"1\",2,2,1,{value: 1},{value: 1},{value: 2}];function unique(arr) { var obj = {}; return arr.filter(function(item, index, arr) { return obj.hasOwnProperty(typeof item + JSON.stringify(item)) ? false : (obj[typeof item + JSON.stringify(item)] = true) })}console.log(unique(arr)); //[1, \"1\", 2, {value: 1}, {value: 2}] 利用hasOwnProperty去重，可以去重所有情况 利用Map 思路：创建一个空的Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中。由于Map中不会出现相同的key值，所以最终得到的就是去重后的结果 123456789101112131415var arr = [1,1,\"true\",true,\"false\",false,NaN,null,NaN,\"NaN\",null,undefined,15,undefined,15,{},0,\"a\",{},0,\"a\"];function unique(arr) { let map = new Map(); let array = []; for(let i = 0; i &lt; arr.length; i++) { if(map.has(arr[i])) { //如果有该key值 map.set(arr[i], true); } else { map.set(arr[i], false); array.push(arr[i]); } } return array;}console.log(unique(arr)); //[1, \"true\", true, \"false\", false, NaN, null, \"NaN\", undefined, 15, {…}, 0, \"a\", {…}] 从打印结果可以看出，利用map数据结构 不能去重 {} 利用递归1234567891011121314151617var arr = [1,1,\"true\",true,\"false\",false,NaN,null,NaN,\"NaN\",null,undefined,15,undefined,15,{},0,\"a\",{},0,\"a\"];function unique(arr) { arr.sort(function(a, b) { return a- b; }) function loop(index) { if(index &gt;= 1) { if(arr[index] === arr[index - 1]) { arr.splice(index, 1); } loop(index - 1); //递归loop } } loop(arr.length - 1); return arr;}console.log(unique(arr)); //[1, \"true\", true, \"false\", false, NaN, null, NaN, \"NaN\", null, 15, {…}, 0, \"a\", {…}, 0, \"a\", undefined] 从打印结果可以看出，利用递归去重数组，不能去重 NaN null 0 “a” {} 结束语 如有错误，欢迎指正~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"前端","slug":"前端","permalink":"http://Lry0504.github.io/tags/前端/"}]},{"title":"Js数组扁平化","date":"2019-10-14T03:12:25.688Z","path":"/posts/3/","text":"Js数组扁平化的几种实现方式 前言数组扁平化，就是将一个存在多层嵌套的数组array，转化为只有一层的数组。假设存在一个函数flatten可以将数组扁平化，那么就可以得到如下效果： 12var array = [1, [2], [[3]]];console.log(flatten(array)); //[1,2,3] 正文递归调用 思路：循环遍历该数组，判断循环的元素是否仍是数组，如果是，则递归调用该方法 123456789101112var array = [[1,2,3],4,5,6,[[7]],[]];function flatten(arr, result = []) { for(let item of arr) { if(Array.isArray(item)) { flatten(item, result); } else { result.push(item); } } return result;}console.log(flatten(array)); //[1,2,3,4,5,6,7] reduce调用 思路：利用reduce搭配concat。reduce遍历数组中的每个元素，如果该元素仍然是数组，则重新调用该方法，否则将该元素concat到数组中 1234567var array = [[1,2,3],4,5,6,[[7]],[]];function flatten(arr) { return arr.reduce(function(acc, cur) { return acc.concat(Array.isArray(cur) ? flatten(cur) : cur); }, [])}console.log(flatten(array)); ES6扩展运算符ES6中的扩展运算符用来取出参数对象中的所有可遍历属性，拷贝到当前对象中 12var arr = [1,2,[3,[4]]];console.log([].concat(...arr)); //[1,2,3,[4]] [].concat(...arr)只能拉平一层数组，但是我们很容易据此想到，利用while循环判断数组中某个元素是否仍为数字，如果存在一个元素为数组，则继续拉平 12345678var array = [[1,2,3],4,5,6,[[7]],[]];function flatten(arr) { while(arr.some(item =&gt; Array.isArray(item))) { arr = [].concat(...arr); } return arr;}console.log(flatten(array)); //[1,2,3,4,5,6,7] flat调用arr.flat(index)可以拉平数组，其中index表示拉平多少层数组，如果要拉平无限层数组，则可以表示为arr.flat(Infinity) 12var arr = [1,[2,[3,4,[]]]];console.log(arr.flat(Infinity)); //[1,2,3,4] toString调用如果数组中的元素都是数字，我们就可以考虑toString方法 1[1,[2,[3,4]]].toString(); //\"1,2,3,4\" 思路：调用toString方法，返回一个用逗号分隔的扁平字符串。此时，我们使用split分隔逗号，得到一个string类型的数组，再遍历数组中的每个元素，将其转化成number类型 1234567var arr = [1,[2,[3,4]]];function flatten(arr) { return arr.toString().split(\",\").map(function(item) { return +item; })}console.log(flatten(arr)); //[1,2,3,4] 然而，上面的方法存在很大的局限性： 如果arr中存在空数组，则空数组将会被转换为空字符串 如果数组中存在非数字，比如[1,”1”]，则会产生错误的结果 结束语 如有错误，欢迎指正 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"前端","slug":"前端","permalink":"http://Lry0504.github.io/tags/前端/"}]},{"title":"函数防抖与节流","date":"2019-10-12T03:07:29.083Z","path":"/posts/2/","text":"防抖debounce与节流throttle的实现 前言在前端开发中，我们会遇到一些频繁的事件触发（滚动条滑动、鼠标事件、搜索框搜索…），如果不加以限制的话，可能会造成浏览器卡顿。为了解决这个问题，出现了两种解决方案： debounce防抖 throttle节流 正文防抖函数定义：触发事件后，在n秒后才会执行；如果在n秒内又重新触发了该事件，则以重新触发该事件的时间为准，n秒后再执行。总之就是：触发事件n秒内不再触发该事件才执行，如果n秒内再次触发该事件，则重新计算n秒后再执行（任性啊…） 初版防抖函数的实现 实现思路：通过定时器控制func是否实现1、每次触发防抖函数时，先清除上一次的定时器，再开启本次触发定时器2、绑定this指向：使用防抖函数后，func中的this会指向window，要让this指向func上下文，则需要绑定this指向 -&gt; func.apply(context)3、绑定event事件：事件处理函数中会提供事件对象event，但是在debounce函数中打印会是undefined，所以需要对event对象特殊处理 -&gt; func.apply(context, args) 1234567891011function debounce(func, wait) { var timeout; return function() { var context = this; var args = arguments; clearTimeout(timeout); timeout = setTimeout(function() { func.apply(context, args); },wait); }} 防抖函数的立即执行在初版函数的基础上，考虑个新的需求：我不希望要等到事件停止触发n秒后才执行，我希望它能够立即执行，然后停止触发n秒后才可以重新触发执行 12345678910111213141516171819202122function debounce(func, wait, immediate) { var timeout,result; return function() { var context = this; var args = arguments; if(timeout) clearTimeout(timeout); if(immediate) { //如果已经执行过，不再执行 var callNow = !timeout; //定时器结束并设置为null，则可以再次点击执行了 timeout = setTimeout(function() { timeout = null; }, wait); if(callNow) result = func.apply(context, args); } else { timeout = setTimeout(function() { func.apply(context, args); }, wait); } return result; }} 上面代码值得注意的是：func函数时可能有返回值的，所以debounce函数我们也需要添加返回结果result。当immediate为false时，因为setTimeout函数的存在，return出来的值一直都是undefined，所以我们只需要在immediate为true的时候才添加返回结果。 节流函数定义：在规定的时间内，只能触发一次事件；如果规定时间内再触发多次，则什么也不做。 使用时间戳 实现思路：设置时间戳previous开始值为0，当触发事件时，取出当前的时间戳now，减去之前的时间戳previous，如果得到的值大于设置的规定时间wait，则执行函数func，并更新时间戳previous为当前时间now；如果小于，则不执行。 12345678910111213function throttle(func, wait) { var context,args; var previous = 0; return function() { var now = +new Date(); context = this; args = arguments; if(now - previous &gt; wait) { func.apply(context, args); previous = now; } }} 使用定时器 实现思路：当触发事件的时候，设置一个定时器，再次触发该事件的时候，如果定时器存在，就不执行func，直到上一轮定时器执行完并且为null，才会执行func，并清除本次定时器。 12345678910111213function throttle(func, wait) { var timeout; return function() { var context = this; var args = arguments; if(!timeout) { timeout = setTimeout(function() { timeout = null; func.apply(context, args); }, wait); } }} 比较上面使用时间戳和使用定时器两个方法你会发现：1、使用时间戳：触发事件会立即执行一次，停止触发事件便不再执行2、使用定时器：触发事件不会立即执行，在n秒后才执行第一次；停止触发事件后仍会再执行一次由此，我们可以写出一个“双剑合璧”版的节流函数：触发事件能够立即执行，停止触发还能再执行一次 双剑合璧版节流1234567891011121314151617181920212223242526272829function throttle(func, wait) { var timeout, context, args; var previous = 0; var later = function() { previous = +new Date(); timeout = null; func.apply(context, args) }; var throttled = function() { var now = +new Date(); //下次触发 func 剩余的时间 var remaining = wait - (now - previous); context = this; args = arguments; if (remaining &lt;= 0) { if (timeout) { clearTimeout(timeout); timeout = null; } previous = now; func.apply(context, args); } else if (!timeout) { timeout = setTimeout(later, remaining); } }; return throttled;} 结束语 如有错误，欢迎指正~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"前端","slug":"前端","permalink":"http://Lry0504.github.io/tags/前端/"}]},{"title":"正则表达式学习笔记（一）","date":"2019-09-29T00:58:23.390Z","path":"/posts/1/","text":"正则表达式的学习之路… 前言在我的工作当中，正则表达式是使用非常频繁的，但是本人对于正则表达式的研究比较浅显，便只好把对正则的一些学习理解记录下来，方便以后翻阅。（感兴趣的朋友可自行搜索老姚的JavaScript正则表达式系列文章） 正文正则表达式是匹配模式，要么匹配字符，要么匹配位置 两种模糊匹配 横向模糊匹配：可匹配的字符串长度是不固定的。实现方式是使用量词eg1：{m, n}表示连续出现最少m次，最多n次eg2：/ab{2,3}c/表示第一个字符是“a”，后面是2到5个”b”，最后是”c” 纵向模糊匹配：匹配的字符串具体到某一位时，可以不是某个确定的字符。实现方式是使用字符组eg1：[abc]表示匹配”a”、”b”、”c”中的任一字符eg2：/a[123]b/可以匹配三种字符：”a1b”、”a2b”、”a3b” 字符组值得一提的是，虽然叫做字符组（字符类），但只是其中的一个字符。譬如[abc]匹配的是”a”、”b”、”c”其中之一 范围表示法如果一个字符组里面字符太多的话，可以用连字符“-”来省略和简写。譬如匹配字母，可以写为：[a-zA-Z] 如果需要匹配的字符带有特殊字符，则应该放在开头、结尾或者转义，避免引擎认为是特殊用法 排除字符组（取反）[^abc]表示一个除”a”、”b”、”c”之外的任意字符。字符组第一位放^（脱字符）表示取反 常见简写形式 字符组 具体含义 \\d [0-9]，表示一位数字 \\D [^0-9]，表示除数字外的任意字符 \\w [0-9a-zA-Z_]，表示数字、大小写字母、下划线 \\W [^0-9a-zA-Z]，表示非单词字符 \\s [\\t\\n\\v\\r\\f]，表示空白符，包括空格、水平垂直制表符、换行符、换页符、回车符 \\S [^\\t\\n\\v\\r\\f]，表示非空白符 . 通配符，表示几乎任意字符 量词 简写形式 量词 具体含义 {m,} 表示至少出现m次 {m} 表示出现m次 ? 等价于{0,1}，表示出现或者不出现 + 等价于{1,}，表示至少出现一次 * 等价于{0,}，表示有可能不出现，或出现任意次 贪婪匹配与惰性匹配贪婪匹配：在满足条件的情况下，尽可能多的匹配惰性匹配：在满足条件的情况下，尽可能少的匹配 12345var reg1 = /\\d{2,5}/g;var reg2 = /\\d{2,5}?/g;var str = \"123 1234 12345 123456\";console.log(str.match(reg1)); //[\"123\", \"1234\", \"12345\", \"12345\"]console.log(str.match(reg2)); //[\"12\", \"12\", \"34\" \"12\", \"34\", \"12\", \"34\", \"56\"] 上面代码单独运算时，呈现出了两种不同的结果；其中reg1运算是贪婪匹配，reg2是惰性匹配(通过在量词后面加”？“就能实现） 多选分支多选分支可以支持多个子模式任选其一。譬如(p1|p2|p3)，其中p1，p2，p3是子模式，用管道符（|）分隔表示其中任何之一。 123var reg = /good|nice/g;var str = \"good idea, nice boy.\";console.log(str.match(reg)); //[\"good\",\"nice\"] 值得注意的是，分支结构属于惰性匹配，就是当前面的匹配上了，后面的就不在尝试了 123var reg = /good|goodbye/g;var str = \"goodbye\";console.log(str.match(reg)); //[\"good\"] 经典案例分析匹配字符，其实就是字符串、量词、分支结构的组合使用(注意：案例代码使用了全局匹配g，需要单独验证，否则会出错) 匹配16进制颜色 分析：表示一个16进制字符，可以用字符组[0-9a-fA-F]其中字符可以出现3次或者6次，需要用量词和分支结构，使用分支结构时需要注意顺序 123var reg = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;var str = \"#FF6600 #fff #CCc\";console.log(str.match(reg)); //[\"#FF6600\",\"#fff\",\"#CCc\"] 匹配24小时制时间 分析：24小时制时间展示主要如：23：59、02：01共有4个数字，第一位数字可以是[0-2]当第一位数字是”2”时，第二位可以是[0-3]，否则第二位是[0-9]第三位可以是[0-5]，第四位可是是[0-9]如果要求匹配”2:2”这种时间格式，则前面的0是可以省略的 1234var reg = /^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/g;console.log(reg.test(\"23:59\")); //trueconsole.log(reg.test(\"02:03\")); //trueconsole.log(reg.test(\"2:2\")); //true 匹配日期（yyyy-mm-dd格式） 分析：年：四位数即可，可以表示为[0-9]{4}月：分为两种情况：”01”、”02”、…、”09”和”10”、”11”、”12”，可以表示为(0[1-9]|1[0-2])日：最大为31日，可以表示为(0[1-9]|[12][0-9]|3[01]) 12var reg = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/g;console.log(reg.test(\"2017-02-05\")); //true 结束语掌握字符组和量词的大致知识，基本上就算是正则入门了…后续再学习有关于正则表达式的位置匹配~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"正则","slug":"正则","permalink":"http://Lry0504.github.io/tags/正则/"}]},{"title":"Array知识清单","date":"2019-09-24T14:18:08.775Z","path":"/posts/0/","text":"Array知识清单 正文构造函数Array是JS的原生对象，同时也是一个构造函数，可以用它来生成新数组 123var array = new Array(3);arr.length; //3arr; //[empty x 3] 上面代码中，Array构造函数的参数3，表示生成一个三位成员的数组，每个位置都是空值。var arr = new Array(3)等同于var arr = Array(3) 静态方法 .isArrayArray.isArray()方法返回一个Boolean值，表示参数是否为数组 123var arr = [1,2,3];typeOf arr; //\"Object\"Array.isArray(arr); //true valueOf、toString数组的valueOf方法返回数组本身，而toString方法返回数组的字符串形式 123var arr = [1, 2, 3];arr.valueOf(); //[1, 2, 3]arr.toString(); //\"1, 2, 3\" pop、pushpush方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。该方法会改变原数组 12345var arr = [];arr.push(1); //1arr.push(\"a\"); //2arr.push(true,{}); //4arr; //[1,\"a\",true,{}] pop方法用于删除数组的最后一个元素，并返回该元素。该方法会改变原数组 123var arr = [1,2,3];arr.pop(); //3arr; //[1,2] 对空数组使用pop方法，不会报错，返回undefined [ ].pop(); //undefined shift、unshiftshift方法用于删除数组的第一个元素，并返回该元素。该方法会改变原数组 123var arr = [1,2,3];arr.shift(); //1arr; //[2,3] unshift方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。该方法会改变原数组 123var arr = [1,2,3];arr.unshift(4); //4arr; //[4,1,2,3] joinjoin()方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。 1234var a = [1, 2, 3, 4];a.join(' '); //\"1 2 3 4\"a.join(' | '); //\"1 | 2 | 3 | 4\"a.join(); //\"1,2,3,4\" 如果数组成员是undefined或null或空位，会被转成空字符串。 12[undefined, null].join(' '); //' '['a',, 'b'].join('-'); //'a--b' 通过call方法，这个方法也可以用于字符串或类似数组的对象。 123Array.prototype.join.call('hello', '-'); // \"h-e-l-l-o\"var obj = { 0: 'a', 1: 'b', length: 2 };Array.prototype.join.call(obj, '-'); // 'a-b' concatconcat方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变 1234['hello'].concat(['world']); //[\"hello\", \"world\"]['hello'].concat(['world'], ['!']); //[\"hello\", \"world\", \"!\"][].concat({a: 1}, {b: 2}); //[{ a: 1 }, { b: 2 }][2].concat({a: 1}); //[2, {a: 1}] 除了数组作为参数，concat也接受其他类型的值作为参数，添加到目标数组尾部。 1[1, 2, 3].concat(4, 5, 6); // [1, 2, 3, 4, 5, 6] 如果数组成员包括对象，concat方法返回当前数组的一个浅拷贝。所谓“浅拷贝”，指的是新数组拷贝的是对象的引用。 12345var obj = { a: 1 };var oldArray = [obj];var newArray = oldArray.concat();obj.a = 2;newArray[0].a; //2 上面代码中，原数组包含一个对象，concat方法生成的新数组包含这个对象的引用。所以，改变原对象以后，新数组跟着改变。 reversereverse方法用于颠倒排列数组元素，返回改变后的数组。该方法将改变原数组 123var a = ['a', 'b', 'c'];a.reverse(); //[\"c\", \"b\", \"a\"]a; //[\"c\", \"b\", \"a\"] sliceslice方法用于提取目标数组的一部分，返回一个新数组，原数组不变1.arr.slice(start, end)它的第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。 123456var a = ['a', 'b', 'c'];a.slice(0); //[\"a\", \"b\", \"c\"]a.slice(1); //[\"b\", \"c\"]a.slice(1, 2); //[\"b\"]a.slice(2, 6); //[\"c\"]a.slice(); //[\"a\", \"b\", \"c\"] 上面代码中，最后一个例子slice没有参数，实际上等于返回一个原数组的拷贝。 如果slice方法的参数是负数，则表示倒数计算的位置。 123var a = ['a', 'b', 'c'];a.slice(-2); //[\"b\", \"c\"]a.slice(-2, -1); //[\"b\"] 上面代码中，-2表示倒数计算的第二个位置，-1表示倒数计算的第一个位置。 如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组。 123var a = ['a', 'b', 'c'];a.slice(4); //[]a.slice(2, 1); //[] 2.Array.prototype.slice.call（this）slice方法的一个重要应用，是将类似数组的对象转为真正的数组 123Array.prototype.slice.call({ 0: 'a', 1: 'b', length: 2 }); //['a', 'b']Array.prototype.slice.call(document.querySelectorAll(\"div\"));Array.prototype.slice.call(arguments); 上面代码的参数都不是数组，但是通过call方法，在它们上面调用slice方法，就可以把它们转为真正的数组。 splicesplice方法用于删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素。该方法会改变原数组arr.splice(start, count, addElement1, addElement2, ...)splice的第一个参数是删除的起始位置（从0开始），第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。 123var a = ['a', 'b', 'c', 'd', 'e', 'f'];a.splice(4, 2); //[\"e\", \"f\"]a; //[\"a\", \"b\", \"c\", \"d\"] 上面代码从原数组4号位置，删除了两个数组成员。 123var a = ['a', 'b', 'c', 'd', 'e', 'f'];a.splice(4, 2, 1, 2); //[\"e\", \"f\"]a; //[\"a\", \"b\", \"c\", \"d\", 1, 2] 上面代码除了删除成员，还插入了两个新成员。 起始位置如果是负数，就表示从倒数位置开始删除。 12var a = ['a', 'b', 'c', 'd', 'e', 'f'];a.splice(-4, 2); //[\"c\", \"d\"] 上面代码表示，从倒数第四个位置c开始删除两个成员。 如果只是单纯地插入元素，splice方法的第二个参数可以设为0。 123var a = [1, 1, 1];a.splice(1, 0, 2); //[]a; //[1, 2, 1, 1] 如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组。 123var a = [1, 2, 3, 4];a.splice(2); //[3, 4]a; //[1, 2] sortsort方法对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变 1234['d', 'c', 'b', 'a'].sort(); //['a', 'b', 'c', 'd'][4, 3, 2, 1].sort(); //[1, 2, 3, 4][11, 101].sort(); //[101, 11][10111, 1101, 111].sort(); //[10111, 1101, 111] 上面代码的最后两个例子，需要特殊注意。sort方法不是按照大小排序，而是按照字典顺序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以101排在11的前面。 如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数。 123[10111, 1101, 111].sort(function (a, b) { return a - b;}); //[111, 1101, 10111] 上面代码中，sort的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于0，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面。 123456789101112[ { name: \"张三\", age: 30 }, { name: \"李四\", age: 24 }, { name: \"王五\", age: 28 }].sort(function (o1, o2) { return o1.age - o2.age;});//[//{ name: \"李四\", age: 24 },//{ name: \"王五\", age: 28 },//{ name: \"张三\", age: 30 }//] mapmap方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。 12345var numbers = [1, 2, 3];numbers.map(function (n) { return n + 1;}); //[2, 3, 4]numbers; //[1, 2, 3] 上面代码中，numbers数组的所有成员依次执行参数函数，运行结果组成一个新数组返回。原数组没有变化 map方法接受一个函数作为参数。该函数调用时，map方法向它传入三个参数：当前成员、当前位置和数组本身。 123[1, 2, 3].map(function(elem, index, arr) { return elem * index;}); //[0, 2, 6] 上面代码中，map方法的回调函数有三个参数，elem为当前成员的值，index为当前成员的位置，arr为原数组（[1, 2, 3]） map方法还可以接受第二个参数，用来绑定回调函数内部的this变量。 1234var arr = ['a', 'b', 'c'];[1, 2].map(function (e) { return this[e];}, arr); //['b', 'c'] 上面代码通过map方法的第二个参数，将回调函数内部的this对象，指向arr数组。 如果数组有空位，map方法的回调函数在这个位置不会执行，会跳过数组的空位。 1234var f = function (n) { return 'a' };[1, undefined, 2].map(f); //[\"a\", \"a\", \"a\"][1, null, 2].map(f); //[\"a\", \"a\", \"a\"][1, , 2].map(f); //[\"a\", , \"a\"] 上面代码中，map方法不会跳过undefined和null，但是会跳过空位 forEachforEach方法与map方法很相似，也是对数组的所有成员依次执行参数函数。但是，forEach方法不返回值，只用来操作数据。这就是说，如果数组遍历的目的是为了得到返回值，那么使用map方法，否则使用forEach方法。forEach的用法与map方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。 1234567function log(element, index, array) { console.log('[' + index + '] = ' + element);}[2, 5, 9].forEach(log);//[0] = 2//[1] = 5//[2] = 9 上面代码中，forEach遍历数组不是为了得到返回值，而是为了在屏幕输出内容，所以不必使用map方法。 forEach方法也可以接受第二个参数，绑定参数函数的this变量。 12345var out = [];[1, 2, 3].forEach(function(elem) { this.push(elem * elem);}, out);out; //[1, 4, 9] 上面代码中，空数组out是forEach方法的第二个参数，结果，回调函数内部的this关键字就指向out。 注意，forEach方法无法中断执行，总是会将所有成员遍历完。如果希望符合某种条件时，就中断遍历，要使用for循环。 12345var arr = [1, 2, 3];for (var i = 0; i &lt; arr.length; i++) { if (arr[i] === 2) break; console.log(arr[i]);} //1 上面代码中，执行到数组的第二个成员时，就会中断执行。forEach方法做不到这一点。 forEach方法也会跳过数组的空位。 1234567891011121314var log = function (n) { console.log(n + 1);};[1, undefined, 2].forEach(log);//2//NaN//3[1, null, 2].forEach(log);//2//1//3[1, , 2].forEach(log);//2//3 上面代码中，forEach方法不会跳过undefined和null，但会跳过空位。 filterfilter方法用于过滤数组成员，满足条件的成员组成一个新数组返回。它的参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组 1234[1, 2, 3, 4, 5].filter(function (elem) { return (elem &gt; 3);});//[4, 5] 上面代码将大于3的数组成员，作为一个新数组返回。 123var arr = [0, 1, 'a', false]; arr.filter(Boolean);//[1, \"a\"] 上面代码中，filter方法返回数组arr里面所有布尔值为true的成员。 filter方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。 1234[1, 2, 3, 4, 5].filter(function (elem, index, arr) { return index % 2 === 0;});//[1, 3, 5] 上面代码返回偶数位置的成员组成的新数组。 filter方法还可以接受第二个参数，用来绑定参数函数内部的this变量。 123456var obj = { MAX: 3 };var myFilter = function (item) { if (item &gt; this.MAX) return true;};var arr = [2, 8, 3, 4, 1, 3, 2, 9];arr.filter(myFilter, obj); //[8, 4, 9] 上面代码中，过滤器myFilter内部有this变量，它可以被filter方法的第二个参数obj绑定，返回大于3的成员。 some、every这两个方法类似“断言”（assert），返回一个布尔值，表示判断数组成员是否符合某种条件。它们接受一个函数作为参数，所有数组成员依次执行该函数。该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。some方法是只要一个成员的返回值是true，则整个some方法的返回值就是true，否则返回false。 12345var arr = [1, 2, 3, 4, 5];arr.some(function (elem, index, arr) { return elem &gt;= 3;});//true 上面代码中，如果数组arr有一个成员大于等于3，some方法就返回true。 every方法是所有成员的返回值都是true，整个every方法才返回true，否则返回false。 12345var arr = [1, 2, 3, 4, 5];arr.every(function (elem, index, arr) { return elem &gt;= 3;});//false 上面代码中，数组arr并非所有成员大于等于3，所以返回false。 注意，对于空数组，some方法返回false，every方法返回true，回调函数都不会执行。 123function isEven(x) { return x % 2 === 0 }[].some(isEven); //false[].every(isEven); //true some和every方法还可以接受第二个参数，用来绑定参数函数内部的this变量。 reduce、reduceRightreduce方法和reduceRight方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，reduce是从左到右处理（从第一个成员到最后一个成员），reduceRight则是从右到左（从最后一个成员到第一个成员），其他完全一样。 123456789[1, 2, 3, 4, 5].reduce(function (a, b) { console.log(a, b); return a + b;});//1 2//3 3//6 4//10 5//最后结果：15 上面代码中，reduce方法求出数组所有成员的和。第一次执行，a是数组的第一个成员1，b是数组的第二个成员2。第二次执行，a为上一轮的返回值3，b为第三个成员3。第三次执行，a为上一轮的返回值6，b为第四个成员4。第四次执行，a为上一轮返回值10，b为第五个成员5。至此所有成员遍历完成，整个方法的返回值就是最后一轮的返回值15。 reduce方法和reduceRight方法的第一个参数都是一个函数。该函数接受以下四个参数。累积变量：默认为数组的第一个成员；当前变量：默认为数组的第二个成员；当前位置（从0开始）；原数组这四个参数之中，只有前两个是必须的，后两个则是可选的。如果要对累积变量指定初值，可以把它放在reduce方法和reduceRight方法的第二个参数。 1234[1, 2, 3, 4, 5].reduce(function (a, b) { return a + b;}, 10);//25 上面代码指定参数a的初值为10，所以数组从10开始累加，最终结果为25。注意，这时b是从数组的第一个成员开始遍历。上面的第二个参数相当于设定了默认值，处理空数组时尤其有用。 1234567function add(prev, cur) { return prev + cur;}[].reduce(add);//TypeError: Reduce of empty array with no initial value[].reduce(add, 1);//1 上面代码中，由于空数组取不到初始值，reduce方法会报错。这时，加上第二个参数，就能保证总是会返回一个值。 下面是一个reduceRight方法的例子。 12345function subtract(prev, cur) { return prev - cur;}[3, 2, 1].reduce(subtract); //0[3, 2, 1].reduceRight(subtract); //-4 上面代码中，reduce方法相当于3减去2再减去1，reduceRight方法相当于1减去2再减去3。 由于这两个方法会遍历数组，所以实际上还可以用来做一些遍历相关的操作。比如，找出字符长度最长的数组成员。 123456function findLongest(entries) { return entries.reduce(function (longest, entry) { return entry.length &gt; longest.length ? entry : longest;}, '');}findLongest(['aaa', 'bb', 'c']); //\"aaa\" 上面代码中，reduce的参数函数会将字符长度较长的那个数组成员，作为累积值。这导致遍历所有成员之后，累积值就是字符长度最长的那个成员。 indexOf、lastIndexOfindexOf方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。 123var a = ['a', 'b', 'c'];a.indexOf('b'); //1a.indexOf('y'); //-1 indexOf方法还可以接受第二个参数，表示搜索的开始位置。 1['a', 'b', 'c'].indexOf('a', 1); //-1 上面代码从1号位置开始搜索字符a，结果为-1，表示没有搜索到。 lastIndexOf方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。 123var a = [2, 5, 9, 2];a.lastIndexOf(2); //3a.lastIndexOf(7); //-1 注意，这两个方法不能用来搜索NaN的位置，即它们无法确定数组成员是否包含NaN。 12[NaN].indexOf(NaN); //-1[NaN].lastIndexOf(NaN); //-1 这是因为这两个方法内部，使用严格相等运算符（===）进行比较，而NaN是唯一一个不等于自身的值。 结束语Array知识清单将不定时更新所包含的知识，如果有书写错误请指正~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"前端","slug":"前端","permalink":"http://Lry0504.github.io/tags/前端/"}]},{"title":"欢迎来到狗子赖的博客","date":"2019-08-22T07:14:46.311Z","path":"/posts/fbf759eb/","text":"欢迎来到狗子赖的博客 前言终于开通了自己的博客了~很久之前就萌生了写博客的想法，奈何一直没有实现。几周前在学习某个知识点的时候刚好看到一个博主的博客，觉得实在是太吸引我了(✪ω✪)，于是在网上参考了许多方式搭了这个博客 正文博客主题博客使用的是Simon Ma大佬的主题tomotoes，配色什么的感觉都美美哒~ 博客名字博客首页的名字是Dog Lai（狗子赖） emmmm…其实挺好听的，被朋友叫习惯了，感觉也挺好的名字是吧~ 博客内容 记录日常工作遇到的问题及解答思路 记录日常学习资料和转载优秀博文 记录看到的美文及感悟 记录生活的酸甜苦辣 …… 结束语 一起学习，共勉~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[]}]
[{"title":"正则表达式学习笔记（一）","date":"2019-09-29T00:58:23.390Z","path":"/posts/1/","text":"正则表达式的学习之路… 前言在我的工作当中，正则表达式是使用非常频繁的，但是本人对于正则表达式的研究比较浅显，便只好把对正则的一些学习理解记录下来，方便以后翻阅。（感兴趣的朋友可自行搜索老姚的JavaScript正则表达式系列文章） 正文正则表达式是匹配模式，要么匹配字符，要么匹配位置 两种模糊匹配 横向模糊匹配：可匹配的字符串长度是不固定的。实现方式是使用量词eg1：{m, n}表示连续出现最少m次，最多n次eg2：/ab{2,3}c/表示第一个字符是“a”，后面是2到5个”b”，最后是”c” 纵向模糊匹配：匹配的字符串具体到某一位时，可以不是某个确定的字符。实现方式是使用字符组eg1：[abc]表示匹配”a”、”b”、”c”中的任一字符eg2：/a[123]b/可以匹配三种字符：”a1b”、”a2b”、”a3b” 字符组值得一提的是，虽然叫做字符组（字符类），但只是其中的一个字符。譬如[abc]匹配的是”a”、”b”、”c”其中之一 范围表示法如果一个字符组里面字符太多的话，可以用连字符“-”来省略和简写。譬如匹配字母，可以写为：[a-zA-Z] 如果需要匹配的字符带有特殊字符，则应该放在开头、结尾或者转义，避免引擎认为是特殊用法 排除字符组（取反）[^abc]表示一个除”a”、”b”、”c”之外的任意字符。字符组第一位放^（脱字符）表示取反 常见简写形式 字符组 具体含义 \\d [0-9]，表示一位数字 \\D [^0-9]，表示除数字外的任意字符 \\w [0-9a-zA-Z_]，表示数字、大小写字母、下划线 \\W [^0-9a-zA-Z]，表示非单词字符 \\s [\\t\\n\\v\\r\\f]，表示空白符，包括空格、水平垂直制表符、换行符、换页符、回车符 \\S [^\\t\\n\\v\\r\\f]，表示非空白符 . 通配符，表示几乎任意字符 量词 简写形式 量词 具体含义 {m,} 表示至少出现m次 {m} 表示出现m次 ? 等价于{0,1}，表示出现或者不出现 + 等价于{1,}，表示至少出现一次 * 等价于{0,}，表示有可能不出现，或出现任意次 贪婪匹配与惰性匹配贪婪匹配：在满足条件的情况下，尽可能多的匹配惰性匹配：在满足条件的情况下，尽可能少的匹配 12345var reg1 = /\\d{2,5}/g;var reg2 = /\\d{2,5}?/g;var str = \"123 1234 12345 123456\";console.log(str.match(reg1)); //[\"123\", \"1234\", \"12345\", \"12345\"]console.log(str.match(reg2)); //[\"12\", \"12\", \"34\" \"12\", \"34\", \"12\", \"34\", \"56\"] 上面代码单独运算时，呈现出了两种不同的结果；其中reg1运算是贪婪匹配，reg2是惰性匹配(通过在量词后面加”？“就能实现） 多选分支多选分支可以支持多个子模式任选其一。譬如(p1|p2|p3)，其中p1，p2，p3是子模式，用管道符（|）分隔表示其中任何之一。 123var reg = /good|nice/g;var str = \"good idea, nice boy.\";console.log(str.match(reg)); //[\"good\",\"nice\"] 值得注意的是，分支结构属于惰性匹配，就是当前面的匹配上了，后面的就不在尝试了 123var reg = /good|goodbye/g;var str = \"goodbye\";console.log(str.match(reg)); //[\"good\"] 经典案例分析匹配字符，其实就是字符串、量词、分支结构的组合使用(注意：案例代码使用了全局匹配g，需要单独验证，否则会出错) 匹配16进制颜色 分析：表示一个16进制字符，可以用字符组[0-9a-fA-F]其中字符可以出现3次或者6次，需要用量词和分支结构，使用分支结构时需要注意顺序 123var reg = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;var str = \"#FF6600 #fff #CCc\";console.log(str.match(reg)); //[\"#FF6600\",\"#fff\",\"#CCc\"] 匹配24小时制时间 分析：24小时制时间展示主要如：23：59、02：01共有4个数字，第一位数字可以是[0-2]当第一位数字是”2”时，第二位可以是[0-3]，否则第二位是[0-9]第三位可以是[0-5]，第四位可是是[0-9]如果要求匹配”2:2”这种时间格式，则前面的0是可以省略的 1234var reg = /^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/g;console.log(reg.test(\"23:59\")); //trueconsole.log(reg.test(\"02:03\")); //trueconsole.log(reg.test(\"2:2\")); //true 匹配日期（yyyy-mm-dd格式） 分析：年：四位数即可，可以表示为[0-9]{4}月：分为两种情况：”01”、”02”、…、”09”和”10”、”11”、”12”，可以表示为(0[1-9]|1[0-2])日：最大为31日，可以表示为(0[1-9]|[12][0-9]|3[01]) 12var reg = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/g;console.log(reg.test(\"2017-02-05\")); //true 结束语掌握字符组和量词的大致知识，基本上就算是正则入门了…后续再学习有关于正则表达式的位置匹配~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"正则","slug":"正则","permalink":"http://Lry0504.github.io/tags/正则/"}]},{"title":"Array知识清单","date":"2019-09-24T14:18:08.775Z","path":"/posts/0/","text":"Array知识清单 正文构造函数Array是JS的原生对象，同时也是一个构造函数，可以用它来生成新数组 123var array = new Array(3);arr.length; //3arr; //[empty x 3] 上面代码中，Array构造函数的参数3，表示生成一个三位成员的数组，每个位置都是空值。var arr = new Array(3)等同于var arr = Array(3) 静态方法 .isArray()Array.isArray()方法返回一个Boolean值，表示参数是否为数组 123var arr = [1,2,3];typeOf arr; //\"Object\"Array.isArray(arr); //true valueOf()、toString()数组的valueOf方法返回数组本身，而toString方法返回数组的字符串形式 123var arr = [1, 2, 3];arr.valueOf(); //[1, 2, 3]arr.toString(); //\"1, 2, 3\" pop()、push()push方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。该方法会改变原数组 12345var arr = [];arr.push(1); //1arr.push(\"a\"); //2arr.push(true,{}); //4arr; //[1,\"a\",true,{}] pop方法用于删除数组的最后一个元素，并返回该元素。该方法会改变原数组 123var arr = [1,2,3];arr.pop(); //3arr; //[1,2] 对空数组使用pop方法，不会报错，返回undefined [ ].pop(); //undefined shift()、unshift()shift方法用于删除数组的第一个元素，并返回该元素。该方法会改变原数组 123var arr = [1,2,3];arr.shift(); //1arr; //[2,3] unshift方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。该方法会改变原数组 123var arr = [1,2,3];arr.unshift(4); //4arr; //[4,1,2,3] join()join()方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。 1234var a = [1, 2, 3, 4];a.join(' '); //\"1 2 3 4\"a.join(' | '); //\"1 | 2 | 3 | 4\"a.join(); //\"1,2,3,4\" 如果数组成员是undefined或null或空位，会被转成空字符串。 12[undefined, null].join(' '); //' '['a',, 'b'].join('-'); //'a--b' 通过call方法，这个方法也可以用于字符串或类似数组的对象。 123Array.prototype.join.call('hello', '-'); // \"h-e-l-l-o\"var obj = { 0: 'a', 1: 'b', length: 2 };Array.prototype.join.call(obj, '-'); // 'a-b' concat()concat方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变 1234['hello'].concat(['world']); //[\"hello\", \"world\"]['hello'].concat(['world'], ['!']); //[\"hello\", \"world\", \"!\"][].concat({a: 1}, {b: 2}); //[{ a: 1 }, { b: 2 }][2].concat({a: 1}); //[2, {a: 1}] 除了数组作为参数，concat也接受其他类型的值作为参数，添加到目标数组尾部。 1[1, 2, 3].concat(4, 5, 6); // [1, 2, 3, 4, 5, 6] 如果数组成员包括对象，concat方法返回当前数组的一个浅拷贝。所谓“浅拷贝”，指的是新数组拷贝的是对象的引用。 12345var obj = { a: 1 };var oldArray = [obj];var newArray = oldArray.concat();obj.a = 2;newArray[0].a; //2 上面代码中，原数组包含一个对象，concat方法生成的新数组包含这个对象的引用。所以，改变原对象以后，新数组跟着改变。 reverse()reverse方法用于颠倒排列数组元素，返回改变后的数组。该方法将改变原数组 123var a = ['a', 'b', 'c'];a.reverse(); //[\"c\", \"b\", \"a\"]a; //[\"c\", \"b\", \"a\"] slice()slice方法用于提取目标数组的一部分，返回一个新数组，原数组不变1.arr.slice(start, end)它的第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。 123456var a = ['a', 'b', 'c'];a.slice(0); //[\"a\", \"b\", \"c\"]a.slice(1); //[\"b\", \"c\"]a.slice(1, 2); //[\"b\"]a.slice(2, 6); //[\"c\"]a.slice(); //[\"a\", \"b\", \"c\"] 上面代码中，最后一个例子slice没有参数，实际上等于返回一个原数组的拷贝。 如果slice方法的参数是负数，则表示倒数计算的位置。 123var a = ['a', 'b', 'c'];a.slice(-2); //[\"b\", \"c\"]a.slice(-2, -1); //[\"b\"] 上面代码中，-2表示倒数计算的第二个位置，-1表示倒数计算的第一个位置。 如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组。 123var a = ['a', 'b', 'c'];a.slice(4); //[]a.slice(2, 1); //[] 2.Array.prototype.slice.call（this）slice方法的一个重要应用，是将类似数组的对象转为真正的数组 123Array.prototype.slice.call({ 0: 'a', 1: 'b', length: 2 }); //['a', 'b']Array.prototype.slice.call(document.querySelectorAll(\"div\"));Array.prototype.slice.call(arguments); 上面代码的参数都不是数组，但是通过call方法，在它们上面调用slice方法，就可以把它们转为真正的数组。 splice()splice方法用于删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素。该方法会改变原数组arr.splice(start, count, addElement1, addElement2, ...)splice的第一个参数是删除的起始位置（从0开始），第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。 123var a = ['a', 'b', 'c', 'd', 'e', 'f'];a.splice(4, 2); //[\"e\", \"f\"]a; //[\"a\", \"b\", \"c\", \"d\"] 上面代码从原数组4号位置，删除了两个数组成员。 123var a = ['a', 'b', 'c', 'd', 'e', 'f'];a.splice(4, 2, 1, 2); //[\"e\", \"f\"]a; //[\"a\", \"b\", \"c\", \"d\", 1, 2] 上面代码除了删除成员，还插入了两个新成员。 起始位置如果是负数，就表示从倒数位置开始删除。 12var a = ['a', 'b', 'c', 'd', 'e', 'f'];a.splice(-4, 2); //[\"c\", \"d\"] 上面代码表示，从倒数第四个位置c开始删除两个成员。 如果只是单纯地插入元素，splice方法的第二个参数可以设为0。 123var a = [1, 1, 1];a.splice(1, 0, 2); //[]a; //[1, 2, 1, 1] 如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组。 123var a = [1, 2, 3, 4];a.splice(2); //[3, 4]a; //[1, 2] sort()sort方法对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变 1234['d', 'c', 'b', 'a'].sort(); //['a', 'b', 'c', 'd'][4, 3, 2, 1].sort(); //[1, 2, 3, 4][11, 101].sort(); //[101, 11][10111, 1101, 111].sort(); //[10111, 1101, 111] 上面代码的最后两个例子，需要特殊注意。sort方法不是按照大小排序，而是按照字典顺序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以101排在11的前面。 如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数。 123[10111, 1101, 111].sort(function (a, b) { return a - b;}); //[111, 1101, 10111] 上面代码中，sort的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于0，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面。 123456789101112[ { name: \"张三\", age: 30 }, { name: \"李四\", age: 24 }, { name: \"王五\", age: 28 }].sort(function (o1, o2) { return o1.age - o2.age;});//[//{ name: \"李四\", age: 24 },//{ name: \"王五\", age: 28 },//{ name: \"张三\", age: 30 }//] map()map方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。 12345var numbers = [1, 2, 3];numbers.map(function (n) { return n + 1;}); //[2, 3, 4]numbers; //[1, 2, 3] 上面代码中，numbers数组的所有成员依次执行参数函数，运行结果组成一个新数组返回。原数组没有变化 map方法接受一个函数作为参数。该函数调用时，map方法向它传入三个参数：当前成员、当前位置和数组本身。 123[1, 2, 3].map(function(elem, index, arr) { return elem * index;}); //[0, 2, 6] 上面代码中，map方法的回调函数有三个参数，elem为当前成员的值，index为当前成员的位置，arr为原数组（[1, 2, 3]） map方法还可以接受第二个参数，用来绑定回调函数内部的this变量。 1234var arr = ['a', 'b', 'c'];[1, 2].map(function (e) { return this[e];}, arr); //['b', 'c'] 上面代码通过map方法的第二个参数，将回调函数内部的this对象，指向arr数组。 如果数组有空位，map方法的回调函数在这个位置不会执行，会跳过数组的空位。 1234var f = function (n) { return 'a' };[1, undefined, 2].map(f); //[\"a\", \"a\", \"a\"][1, null, 2].map(f); //[\"a\", \"a\", \"a\"][1, , 2].map(f); //[\"a\", , \"a\"] 上面代码中，map方法不会跳过undefined和null，但是会跳过空位 forEach()forEach方法与map方法很相似，也是对数组的所有成员依次执行参数函数。但是，forEach方法不返回值，只用来操作数据。这就是说，如果数组遍历的目的是为了得到返回值，那么使用map方法，否则使用forEach方法。forEach的用法与map方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。 1234567function log(element, index, array) { console.log('[' + index + '] = ' + element);}[2, 5, 9].forEach(log);//[0] = 2//[1] = 5//[2] = 9 上面代码中，forEach遍历数组不是为了得到返回值，而是为了在屏幕输出内容，所以不必使用map方法。 forEach方法也可以接受第二个参数，绑定参数函数的this变量。 12345var out = [];[1, 2, 3].forEach(function(elem) { this.push(elem * elem);}, out);out; //[1, 4, 9] 上面代码中，空数组out是forEach方法的第二个参数，结果，回调函数内部的this关键字就指向out。 注意，forEach方法无法中断执行，总是会将所有成员遍历完。如果希望符合某种条件时，就中断遍历，要使用for循环。 12345var arr = [1, 2, 3];for (var i = 0; i &lt; arr.length; i++) { if (arr[i] === 2) break; console.log(arr[i]);} //1 上面代码中，执行到数组的第二个成员时，就会中断执行。forEach方法做不到这一点。 forEach方法也会跳过数组的空位。 1234567891011121314var log = function (n) { console.log(n + 1);};[1, undefined, 2].forEach(log);//2//NaN//3[1, null, 2].forEach(log);//2//1//3[1, , 2].forEach(log);//2//3 上面代码中，forEach方法不会跳过undefined和null，但会跳过空位。 filter()filter方法用于过滤数组成员，满足条件的成员组成一个新数组返回。它的参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组 1234[1, 2, 3, 4, 5].filter(function (elem) { return (elem &gt; 3);});//[4, 5] 上面代码将大于3的数组成员，作为一个新数组返回。 123var arr = [0, 1, 'a', false]; arr.filter(Boolean);//[1, \"a\"] 上面代码中，filter方法返回数组arr里面所有布尔值为true的成员。 filter方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。 1234[1, 2, 3, 4, 5].filter(function (elem, index, arr) { return index % 2 === 0;});//[1, 3, 5] 上面代码返回偶数位置的成员组成的新数组。 filter方法还可以接受第二个参数，用来绑定参数函数内部的this变量。 123456var obj = { MAX: 3 };var myFilter = function (item) { if (item &gt; this.MAX) return true;};var arr = [2, 8, 3, 4, 1, 3, 2, 9];arr.filter(myFilter, obj); //[8, 4, 9] 上面代码中，过滤器myFilter内部有this变量，它可以被filter方法的第二个参数obj绑定，返回大于3的成员。 some()、every()这两个方法类似“断言”（assert），返回一个布尔值，表示判断数组成员是否符合某种条件。它们接受一个函数作为参数，所有数组成员依次执行该函数。该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。some方法是只要一个成员的返回值是true，则整个some方法的返回值就是true，否则返回false。 12345var arr = [1, 2, 3, 4, 5];arr.some(function (elem, index, arr) { return elem &gt;= 3;});//true 上面代码中，如果数组arr有一个成员大于等于3，some方法就返回true。 every方法是所有成员的返回值都是true，整个every方法才返回true，否则返回false。 12345var arr = [1, 2, 3, 4, 5];arr.every(function (elem, index, arr) { return elem &gt;= 3;});//false 上面代码中，数组arr并非所有成员大于等于3，所以返回false。 注意，对于空数组，some方法返回false，every方法返回true，回调函数都不会执行。 123function isEven(x) { return x % 2 === 0 }[].some(isEven); //false[].every(isEven); //true some和every方法还可以接受第二个参数，用来绑定参数函数内部的this变量。 reduce()、reduceRight()reduce方法和reduceRight方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，reduce是从左到右处理（从第一个成员到最后一个成员），reduceRight则是从右到左（从最后一个成员到第一个成员），其他完全一样。 123456789[1, 2, 3, 4, 5].reduce(function (a, b) { console.log(a, b); return a + b;});//1 2//3 3//6 4//10 5//最后结果：15 上面代码中，reduce方法求出数组所有成员的和。第一次执行，a是数组的第一个成员1，b是数组的第二个成员2。第二次执行，a为上一轮的返回值3，b为第三个成员3。第三次执行，a为上一轮的返回值6，b为第四个成员4。第四次执行，a为上一轮返回值10，b为第五个成员5。至此所有成员遍历完成，整个方法的返回值就是最后一轮的返回值15。 reduce方法和reduceRight方法的第一个参数都是一个函数。该函数接受以下四个参数。累积变量：默认为数组的第一个成员；当前变量：默认为数组的第二个成员；当前位置（从0开始）；原数组这四个参数之中，只有前两个是必须的，后两个则是可选的。如果要对累积变量指定初值，可以把它放在reduce方法和reduceRight方法的第二个参数。 1234[1, 2, 3, 4, 5].reduce(function (a, b) { return a + b;}, 10);//25 上面代码指定参数a的初值为10，所以数组从10开始累加，最终结果为25。注意，这时b是从数组的第一个成员开始遍历。上面的第二个参数相当于设定了默认值，处理空数组时尤其有用。 1234567function add(prev, cur) { return prev + cur;}[].reduce(add);//TypeError: Reduce of empty array with no initial value[].reduce(add, 1);//1 上面代码中，由于空数组取不到初始值，reduce方法会报错。这时，加上第二个参数，就能保证总是会返回一个值。 下面是一个reduceRight方法的例子。 12345function subtract(prev, cur) { return prev - cur;}[3, 2, 1].reduce(subtract); //0[3, 2, 1].reduceRight(subtract); //-4 上面代码中，reduce方法相当于3减去2再减去1，reduceRight方法相当于1减去2再减去3。 由于这两个方法会遍历数组，所以实际上还可以用来做一些遍历相关的操作。比如，找出字符长度最长的数组成员。 123456function findLongest(entries) { return entries.reduce(function (longest, entry) { return entry.length &gt; longest.length ? entry : longest;}, '');}findLongest(['aaa', 'bb', 'c']); //\"aaa\" 上面代码中，reduce的参数函数会将字符长度较长的那个数组成员，作为累积值。这导致遍历所有成员之后，累积值就是字符长度最长的那个成员。 indexOf()、lastIndexOf()indexOf方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。 123var a = ['a', 'b', 'c'];a.indexOf('b'); //1a.indexOf('y'); //-1 indexOf方法还可以接受第二个参数，表示搜索的开始位置。 1['a', 'b', 'c'].indexOf('a', 1); //-1 上面代码从1号位置开始搜索字符a，结果为-1，表示没有搜索到。 lastIndexOf方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。 123var a = [2, 5, 9, 2];a.lastIndexOf(2); //3a.lastIndexOf(7); //-1 注意，这两个方法不能用来搜索NaN的位置，即它们无法确定数组成员是否包含NaN。 12[NaN].indexOf(NaN); //-1[NaN].lastIndexOf(NaN); //-1 这是因为这两个方法内部，使用严格相等运算符（===）进行比较，而NaN是唯一一个不等于自身的值。 结束语Array知识清单将不定时更新所包含的知识，如果有书写错误请指正~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"前端","slug":"前端","permalink":"http://Lry0504.github.io/tags/前端/"}]},{"title":"欢迎来到狗子赖的博客","date":"2019-08-22T07:14:46.311Z","path":"/posts/fbf759eb/","text":"欢迎来到狗子赖的博客 前言终于开通了自己的博客了~很久之前就萌生了写博客的想法，奈何一直没有实现。几周前在学习某个知识点的时候刚好看到一个博主的博客，觉得实在是太吸引我了(✪ω✪)，于是在网上参考了许多方式搭了这个博客 正文博客主题博客使用的是Simon Ma大佬的主题tomotoes，配色什么的感觉都美美哒~ 博客名字博客首页的名字是Dog Lai（狗子赖） emmmm…其实挺好听的，被朋友叫习惯了，感觉也挺好的名字是吧~ 博客内容 记录日常工作遇到的问题及解答思路 记录日常学习资料和转载优秀博文 记录看到的美文及感悟 记录生活的酸甜苦辣 …… 结束语 一起学习，共勉~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[]}]
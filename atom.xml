<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>狗子赖的博客</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://Lry0504.github.io/"/>
  <updated>2019-10-12T08:42:57.351Z</updated>
  <id>http://Lry0504.github.io/</id>
  
  <author>
    <name>狗子赖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>函数防抖与节流</title>
    <link href="http://Lry0504.github.io//posts/2/"/>
    <id>http://Lry0504.github.io//posts/2/</id>
    <published>2019-10-12T03:07:29.083Z</published>
    <updated>2019-10-12T08:42:57.351Z</updated>
    
    <content type="html"><![CDATA[<p>防抖debounce与节流throttle的实现</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端开发中，我们会遇到一些频繁的事件触发（滚动条滑动、鼠标事件、搜索框搜索…），如果不加以限制的话，可能会造成浏览器卡顿。为了解决这个问题，出现了两种解决方案：</p><ol><li>debounce防抖</li><li>throttle节流</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/debounce_throttle.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h3><p>定义：触发事件后，在n秒后才会执行；如果在n秒内又重新触发了该事件，则以重新触发该事件的时间为准，n秒后再执行。总之就是：<em>触发事件n秒内不再触发该事件才执行，如果n秒内再次触发该事件，则重新计算n秒后再执行</em>（任性啊…）</p><h4 id="初版防抖函数的实现"><a href="#初版防抖函数的实现" class="headerlink" title="初版防抖函数的实现"></a>初版防抖函数的实现</h4><blockquote><p>实现思路：通过定时器控制func是否实现<br>1、每次触发防抖函数时，先清除上一次的定时器，再开启本次触发定时器<br>2、绑定this指向：使用防抖函数后，func中的this会指向window，要让this指向func上下文，则需要绑定this指向 -&gt; func.apply(context)<br>3、绑定event事件：事件处理函数中会提供事件对象event，但是在debounce函数中打印会是undefined，所以需要对event对象特殊处理 -&gt; func.apply(context, args)</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function debounce(func, wait) {</span><br><span class="line">  var timeout;</span><br><span class="line">  return function() {</span><br><span class="line">    var context = this;</span><br><span class="line">    var args = arguments;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(function() {</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">    },wait);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="防抖函数的立即执行"><a href="#防抖函数的立即执行" class="headerlink" title="防抖函数的立即执行"></a>防抖函数的立即执行</h4><p>在初版函数的基础上，考虑个新的需求：我不希望要等到事件停止触发n秒后才执行，我希望它能够立即执行，然后停止触发n秒后才可以重新触发执行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function debounce(func, wait, immediate) {</span><br><span class="line">  var timeout,result;</span><br><span class="line">  return function() {</span><br><span class="line">    var context = this;</span><br><span class="line">    var args = arguments;</span><br><span class="line">    if(timeout) clearTimeout(timeout);</span><br><span class="line">    if(immediate) {</span><br><span class="line">      //如果已经执行过，不再执行</span><br><span class="line">      var callNow = !timeout;</span><br><span class="line">      //定时器结束并设置为null，则可以再次点击执行了</span><br><span class="line">      timeout = setTimeout(function() {</span><br><span class="line">        timeout = null;</span><br><span class="line">      }, wait);</span><br><span class="line">      if(callNow) result = func.apply(context, args);</span><br><span class="line">    } else {</span><br><span class="line">      timeout = setTimeout(function() {</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">      }, wait);</span><br><span class="line">    }</span><br><span class="line">    return result;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面代码值得注意的是：func函数时可能有返回值的，所以debounce函数我们也需要添加返回结果result。当immediate为false时，因为setTimeout函数的存在，return出来的值一直都是undefined，所以我们只需要在immediate为true的时候才添加返回结果。</p><h3 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h3><p>定义：在规定的时间内，只能触发一次事件；如果规定时间内再触发多次，则什么也不做。</p><h4 id="使用时间戳"><a href="#使用时间戳" class="headerlink" title="使用时间戳"></a>使用时间戳</h4><blockquote><p>实现思路：<br>设置时间戳previous开始值为0，当触发事件时，取出当前的时间戳now，减去之前的时间戳previous，如果得到的值大于设置的规定时间wait，则执行函数func，并更新时间戳previous为当前时间now；如果小于，则不执行。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function throttle(func, wait) {</span><br><span class="line">  var context,args;</span><br><span class="line">  var previous = 0;</span><br><span class="line">  return function() {</span><br><span class="line">    var now = +new Date();</span><br><span class="line">    context = this;</span><br><span class="line">    args = arguments;</span><br><span class="line">    if(now - previous &gt; wait) {</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">      previous = now;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="使用定时器"><a href="#使用定时器" class="headerlink" title="使用定时器"></a>使用定时器</h4><blockquote><p>实现思路：<br>当触发事件的时候，设置一个定时器，再次触发该事件的时候，如果定时器存在，就不执行func，直到上一轮定时器执行完并且为null，才会执行func，并清除本次定时器。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function throttle(func, wait) {</span><br><span class="line">  var timeout;</span><br><span class="line">  return function() {</span><br><span class="line">    var context = this;</span><br><span class="line">    var args = arguments;</span><br><span class="line">    if(!timeout) {</span><br><span class="line">      timeout = setTimeout(function() {</span><br><span class="line">        timeout = null;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">      }, wait);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>比较上面<code>使用时间戳</code>和<code>使用定时器</code>两个方法你会发现：<br>1、使用时间戳：触发事件会立即执行一次，停止触发事件便不再执行<br>2、使用定时器：触发事件不会立即执行，在n秒后才执行第一次；停止触发事件后仍会再执行一次<br>由此，我们可以写出一个“双剑合璧”版的节流函数：触发事件能够立即执行，停止触发还能再执行一次</p><h4 id="双剑合璧版节流"><a href="#双剑合璧版节流" class="headerlink" title="双剑合璧版节流"></a>双剑合璧版节流</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function throttle(func, wait) {</span><br><span class="line">  var timeout, context, args;</span><br><span class="line">  var previous = 0;</span><br><span class="line"></span><br><span class="line">  var later = function() {</span><br><span class="line">    previous = +new Date();</span><br><span class="line">    timeout = null;</span><br><span class="line">    func.apply(context, args)</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  var throttled = function() {</span><br><span class="line">    var now = +new Date();</span><br><span class="line">    //下次触发 func 剩余的时间</span><br><span class="line">    var remaining = wait - (now - previous);</span><br><span class="line">    context = this;</span><br><span class="line">    args = arguments;</span><br><span class="line">    if (remaining &lt;= 0) {</span><br><span class="line">      if (timeout) {</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        timeout = null;</span><br><span class="line">      }</span><br><span class="line">      previous = now;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">    } else if (!timeout) {</span><br><span class="line">      timeout = setTimeout(later, remaining);</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">  return throttled;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>如有错误，欢迎指正~</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;防抖debounce与节流throttle的实现&lt;/p&gt;
    
    </summary>
    
      <category term="Js" scheme="http://Lry0504.github.io/categories/Js/"/>
    
    
      <category term="前端" scheme="http://Lry0504.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习笔记（一）</title>
    <link href="http://Lry0504.github.io//posts/1/"/>
    <id>http://Lry0504.github.io//posts/1/</id>
    <published>2019-09-29T00:58:23.390Z</published>
    <updated>2019-10-01T09:34:39.516Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式的学习之路…</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我的工作当中，正则表达式是使用非常频繁的，但是本人对于正则表达式的研究比较浅显，便只好把对正则的一些学习理解记录下来，方便以后翻阅。（感兴趣的朋友可自行搜索老姚的JavaScript正则表达式系列文章）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/regexp.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><em>正则表达式是匹配模式，要么匹配字符，要么匹配位置</em></p><h3 id="两种模糊匹配"><a href="#两种模糊匹配" class="headerlink" title="两种模糊匹配"></a>两种模糊匹配</h3><ol><li><p>横向模糊匹配：可匹配的字符串长度是不固定的。实现方式是使用<code>量词</code><br>eg1：{m, n}表示连续出现最少m次，最多n次<br>eg2：/ab{2,3}c/表示第一个字符是“a”，后面是2到5个”b”，最后是”c”</p></li><li><p>纵向模糊匹配：匹配的字符串具体到某一位时，可以不是某个确定的字符。实现方式是使用<code>字符组</code><br>eg1：[abc]表示匹配”a”、”b”、”c”中的任一字符<br>eg2：/a[123]b/可以匹配三种字符：”a1b”、”a2b”、”a3b”</p></li></ol><h3 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h3><p>值得一提的是，虽然叫做字符组（字符类），但只是其中的一个字符。譬如[abc]匹配的是”a”、”b”、”c”其中之一</p><ol><li><p>范围表示法<br>如果一个字符组里面字符太多的话，可以用连字符“-”来省略和简写。<br>譬如匹配字母，可以写为：[a-zA-Z]</p><blockquote><p>如果需要匹配的字符带有特殊字符，则应该放在开头、结尾或者转义，避免引擎认为是特殊用法</p></blockquote></li><li><p>排除字符组（取反）<br>[^abc]表示一个除”a”、”b”、”c”之外的任意字符。字符组第一位放^（脱字符）表示取反</p></li><li><p>常见简写形式</p><table><thead><tr><th align="center">字符组</th><th>具体含义</th></tr></thead><tbody><tr><td align="center">\d</td><td>[0-9]，表示一位数字</td></tr><tr><td align="center">\D</td><td>[^0-9]，表示除数字外的任意字符</td></tr><tr><td align="center">\w</td><td>[0-9a-zA-Z_]，表示数字、大小写字母、下划线</td></tr><tr><td align="center">\W</td><td>[^0-9a-zA-Z]，表示非单词字符</td></tr><tr><td align="center">\s</td><td>[\t\n\v\r\f]，表示空白符，包括空格、水平垂直制表符、换行符、换页符、回车符</td></tr><tr><td align="center">\S</td><td>[^\t\n\v\r\f]，表示非空白符</td></tr><tr><td align="center">.</td><td>通配符，表示几乎任意字符</td></tr></tbody></table></li></ol><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ol><li><p>简写形式</p><table><thead><tr><th align="center">量词</th><th>具体含义</th></tr></thead><tbody><tr><td align="center">{m,}</td><td>表示至少出现m次</td></tr><tr><td align="center">{m}</td><td>表示出现m次</td></tr><tr><td align="center">?</td><td>等价于{0,1}，表示出现或者不出现</td></tr><tr><td align="center">+</td><td>等价于{1,}，表示至少出现一次</td></tr><tr><td align="center">*</td><td>等价于{0,}，表示有可能不出现，或出现任意次</td></tr></tbody></table></li><li><p>贪婪匹配与惰性匹配<br>贪婪匹配：在满足条件的情况下，尽可能多的匹配<br>惰性匹配：在满足条件的情况下，尽可能少的匹配</p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var reg1 = /\d{2,5}/g;</span><br><span class="line">var reg2 = /\d{2,5}?/g;</span><br><span class="line">var str = "123 1234 12345 123456";</span><br><span class="line">console.log(str.match(reg1)); //["123", "1234", "12345", "12345"]</span><br><span class="line">console.log(str.match(reg2)); //["12", "12", "34" "12", "34", "12", "34", "56"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码单独运算时，呈现出了两种不同的结果；其中reg1运算是贪婪匹配，reg2是惰性匹配(通过在量词后面加”？“就能实现）</p><ol start="3"><li>多选分支<br>多选分支可以支持多个子模式任选其一。譬如(p1|p2|p3)，其中p1，p2，p3是子模式，用管道符（|）分隔表示其中任何之一。</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var reg = /good|nice/g;</span><br><span class="line">var str = "good idea, nice boy.";</span><br><span class="line">console.log(str.match(reg)); //["good","nice"]</span><br></pre></td></tr></tbody></table></figure><p>值得注意的是，<em>分支结构属于惰性匹配，就是当前面的匹配上了，后面的就不在尝试了</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var reg = /good|goodbye/g;</span><br><span class="line">var str = "goodbye";</span><br><span class="line">console.log(str.match(reg)); //["good"]</span><br></pre></td></tr></tbody></table></figure><h3 id="经典案例分析"><a href="#经典案例分析" class="headerlink" title="经典案例分析"></a>经典案例分析</h3><p>匹配字符，其实就是字符串、量词、分支结构的组合使用(注意：案例代码使用了全局匹配g，需要单独验证，否则会出错)</p><ol><li>匹配16进制颜色<blockquote><p>分析：<br>表示一个16进制字符，可以用字符组[0-9a-fA-F]<br>其中字符可以出现3次或者6次，需要用量词和分支结构，使用分支结构时需要注意顺序</p></blockquote></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var reg = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;</span><br><span class="line">var str = "#FF6600 #fff #CCc";</span><br><span class="line">console.log(str.match(reg)); //["#FF6600","#fff","#CCc"]</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>匹配24小时制时间<blockquote><p>分析：<br>24小时制时间展示主要如：23：59、02：01<br>共有4个数字，第一位数字可以是[0-2]<br>当第一位数字是”2”时，第二位可以是[0-3]，否则第二位是[0-9]<br>第三位可以是[0-5]，第四位可是是[0-9]<br>如果要求匹配”2:2”这种时间格式，则前面的0是可以省略的</p></blockquote></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/g;</span><br><span class="line">console.log(reg.test("23:59")); //true</span><br><span class="line">console.log(reg.test("02:03")); //true</span><br><span class="line">console.log(reg.test("2:2")); //true</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>匹配日期（yyyy-mm-dd格式）<blockquote><p>分析：<br>年：四位数即可，可以表示为[0-9]{4}<br>月：分为两种情况：”01”、”02”、…、”09”和”10”、”11”、”12”，可以表示为(0[1-9]|1[0-2])<br>日：最大为31日，可以表示为(0[1-9]|[12][0-9]|3[01])</p></blockquote></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/g;</span><br><span class="line">console.log(reg.test("2017-02-05")); //true</span><br></pre></td></tr></tbody></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>掌握字符组和量词的大致知识，基本上就算是正则入门了…后续再学习有关于正则表达式的位置匹配~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式的学习之路…&lt;/p&gt;
    
    </summary>
    
      <category term="RegExp" scheme="http://Lry0504.github.io/categories/RegExp/"/>
    
    
      <category term="正则" scheme="http://Lry0504.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Array知识清单</title>
    <link href="http://Lry0504.github.io//posts/0/"/>
    <id>http://Lry0504.github.io//posts/0/</id>
    <published>2019-09-24T14:18:08.775Z</published>
    <updated>2019-10-08T01:37:10.007Z</updated>
    
    <content type="html"><![CDATA[<p>Array知识清单</p><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/Array.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>Array是JS的原生对象，同时也是一个构造函数，可以用它来生成新数组</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var array = new Array(3);</span><br><span class="line">arr.length;  //3</span><br><span class="line">arr;  //[empty x 3]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，Array构造函数的参数3，表示生成一个三位成员的数组，每个位置都是空值。<code>var arr = new Array(3)</code>等同于<code>var arr = Array(3)</code></p><h3 id="静态方法-isArray"><a href="#静态方法-isArray" class="headerlink" title="静态方法 .isArray"></a>静态方法 .isArray</h3><p>Array.isArray()方法返回一个Boolean值，表示参数是否为数组</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">typeOf arr;  //"Object"</span><br><span class="line">Array.isArray(arr);  //true</span><br></pre></td></tr></tbody></table></figure><h3 id="valueOf、toString"><a href="#valueOf、toString" class="headerlink" title="valueOf、toString"></a>valueOf、toString</h3><p>数组的valueOf方法返回数组本身，而toString方法返回数组的字符串形式</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3];</span><br><span class="line">arr.valueOf(); //[1, 2, 3]</span><br><span class="line">arr.toString(); //"1, 2, 3"</span><br></pre></td></tr></tbody></table></figure><h3 id="pop、push"><a href="#pop、push" class="headerlink" title="pop、push"></a>pop、push</h3><p>push方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。<em>该方法会改变原数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">arr.push(1); //1</span><br><span class="line">arr.push("a"); //2</span><br><span class="line">arr.push(true,{}); //4</span><br><span class="line">arr; //[1,"a",true,{}]</span><br></pre></td></tr></tbody></table></figure><p>pop方法用于删除数组的最后一个元素，并返回该元素。<em>该方法会改变原数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">arr.pop(); //3</span><br><span class="line">arr; //[1,2]</span><br></pre></td></tr></tbody></table></figure><p>对空数组使用pop方法，不会报错，返回undefined</p><blockquote><p>[ ].pop(); //undefined</p></blockquote><h3 id="shift、unshift"><a href="#shift、unshift" class="headerlink" title="shift、unshift"></a>shift、unshift</h3><p>shift方法用于删除数组的第一个元素，并返回该元素。<em>该方法会改变原数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">arr.shift(); //1</span><br><span class="line">arr; //[2,3]</span><br></pre></td></tr></tbody></table></figure><p>unshift方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。<em>该方法会改变原数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">arr.unshift(4); //4</span><br><span class="line">arr; //[4,1,2,3]</span><br></pre></td></tr></tbody></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>join()方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = [1, 2, 3, 4];</span><br><span class="line">a.join(' '); //"1 2 3 4"</span><br><span class="line">a.join(' | '); //"1 | 2 | 3 | 4"</span><br><span class="line">a.join(); //"1,2,3,4"</span><br></pre></td></tr></tbody></table></figure><p>如果数组成员是undefined或null或空位，会被转成空字符串。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[undefined, null].join(' '); //' '</span><br><span class="line">['a',, 'b'].join('-'); //'a--b'</span><br></pre></td></tr></tbody></table></figure><p>通过call方法，这个方法也可以用于字符串或类似数组的对象。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.join.call('hello', '-'); // "h-e-l-l-o"</span><br><span class="line">var obj = { 0: 'a', 1: 'b', length: 2 };</span><br><span class="line">Array.prototype.join.call(obj, '-'); // 'a-b'</span><br></pre></td></tr></tbody></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>concat方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，<em>原数组不变</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">['hello'].concat(['world']); //["hello", "world"]</span><br><span class="line">['hello'].concat(['world'], ['!']); //["hello", "world", "!"]</span><br><span class="line">[].concat({a: 1}, {b: 2}); //[{ a: 1 }, { b: 2 }]</span><br><span class="line">[2].concat({a: 1}); //[2, {a: 1}]</span><br></pre></td></tr></tbody></table></figure><p>除了数组作为参数，concat也接受其他类型的值作为参数，添加到目标数组尾部。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].concat(4, 5, 6); // [1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></tbody></table></figure><p>如果数组成员包括对象，concat方法返回当前数组的一个浅拷贝。所谓“浅拷贝”，指的是新数组拷贝的是对象的引用。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj = { a: 1 };</span><br><span class="line">var oldArray = [obj];</span><br><span class="line">var newArray = oldArray.concat();</span><br><span class="line">obj.a = 2;</span><br><span class="line">newArray[0].a; //2</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，原数组包含一个对象，concat方法生成的新数组包含这个对象的引用。所以，改变原对象以后，新数组跟着改变。</p><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>reverse方法用于颠倒排列数组元素，返回改变后的数组。<em>该方法将改变原数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c'];</span><br><span class="line">a.reverse(); //["c", "b", "a"]</span><br><span class="line">a; //["c", "b", "a"]</span><br></pre></td></tr></tbody></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>slice方法用于提取目标数组的一部分，返回一个新数组，<em>原数组不变</em><br>1.<code>arr.slice(start, end)</code><br>它的第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c'];</span><br><span class="line">a.slice(0); //["a", "b", "c"]</span><br><span class="line">a.slice(1); //["b", "c"]</span><br><span class="line">a.slice(1, 2); //["b"]</span><br><span class="line">a.slice(2, 6); //["c"]</span><br><span class="line">a.slice(); //["a", "b", "c"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，最后一个例子slice没有参数，实际上等于返回一个原数组的拷贝。</p><p>如果slice方法的参数是负数，则表示倒数计算的位置。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c'];</span><br><span class="line">a.slice(-2); //["b", "c"]</span><br><span class="line">a.slice(-2, -1); //["b"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，-2表示倒数计算的第二个位置，-1表示倒数计算的第一个位置。</p><p>如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c'];</span><br><span class="line">a.slice(4); //[]</span><br><span class="line">a.slice(2, 1); //[]</span><br></pre></td></tr></tbody></table></figure><p>2.<code>Array.prototype.slice.call（this）</code><br>slice方法的一个重要应用，是<em>将类似数组的对象转为真正的数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.slice.call({ 0: 'a', 1: 'b', length: 2 }); //['a', 'b']</span><br><span class="line">Array.prototype.slice.call(document.querySelectorAll("div"));</span><br><span class="line">Array.prototype.slice.call(arguments);</span><br></pre></td></tr></tbody></table></figure><p>上面代码的参数都不是数组，但是通过call方法，在它们上面调用slice方法，就可以把它们转为真正的数组。</p><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>splice方法用于删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素。<em>该方法会改变原数组</em><br><code>arr.splice(start, count, addElement1, addElement2, ...)</code><br>splice的第一个参数是删除的起始位置（从0开始），第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c', 'd', 'e', 'f'];</span><br><span class="line">a.splice(4, 2); //["e", "f"]</span><br><span class="line">a; //["a", "b", "c", "d"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码从原数组4号位置，删除了两个数组成员。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c', 'd', 'e', 'f'];</span><br><span class="line">a.splice(4, 2, 1, 2); //["e", "f"]</span><br><span class="line">a; //["a", "b", "c", "d", 1, 2]</span><br></pre></td></tr></tbody></table></figure><p>上面代码除了删除成员，还插入了两个新成员。</p><p>起始位置如果是负数，就表示从倒数位置开始删除。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c', 'd', 'e', 'f'];</span><br><span class="line">a.splice(-4, 2); //["c", "d"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码表示，从倒数第四个位置c开始删除两个成员。</p><p>如果只是单纯地插入元素，splice方法的第二个参数可以设为0。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = [1, 1, 1];</span><br><span class="line">a.splice(1, 0, 2); //[]</span><br><span class="line">a; //[1, 2, 1, 1]</span><br></pre></td></tr></tbody></table></figure><p>如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = [1, 2, 3, 4];</span><br><span class="line">a.splice(2); //[3, 4]</span><br><span class="line">a; //[1, 2]</span><br></pre></td></tr></tbody></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>sort方法对数组成员进行排序，默认是按照字典顺序排序。<em>排序后，原数组将被改变</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">['d', 'c', 'b', 'a'].sort(); //['a', 'b', 'c', 'd']</span><br><span class="line">[4, 3, 2, 1].sort(); //[1, 2, 3, 4]</span><br><span class="line">[11, 101].sort(); //[101, 11]</span><br><span class="line">[10111, 1101, 111].sort(); //[10111, 1101, 111]</span><br></pre></td></tr></tbody></table></figure><p>上面代码的最后两个例子，需要特殊注意。sort方法不是按照大小排序，而是按照字典顺序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以101排在11的前面。</p><p>如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[10111, 1101, 111].sort(function (a, b) {</span><br><span class="line">return a - b;</span><br><span class="line">}); //[111, 1101, 10111]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，sort的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于0，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">{ name: "张三", age: 30 },</span><br><span class="line">{ name: "李四", age: 24 },</span><br><span class="line">{ name: "王五", age: 28 }</span><br><span class="line">].sort(function (o1, o2) {</span><br><span class="line">return o1.age - o2.age;</span><br><span class="line">});</span><br><span class="line">//[</span><br><span class="line">//{ name: "李四", age: 24 },</span><br><span class="line">//{ name: "王五", age: 28 },</span><br><span class="line">//{ name: "张三", age: 30 }</span><br><span class="line">//]</span><br></pre></td></tr></tbody></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var numbers = [1, 2, 3];</span><br><span class="line">numbers.map(function (n) {</span><br><span class="line">return n + 1;</span><br><span class="line">}); //[2, 3, 4]</span><br><span class="line">numbers; //[1, 2, 3]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，numbers数组的所有成员依次执行参数函数，运行结果组成一个新数组返回。<em>原数组没有变化</em></p><p>map方法接受一个函数作为参数。该函数调用时，map方法向它传入三个参数：当前成员、当前位置和数组本身。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].map(function(elem, index, arr) {</span><br><span class="line">  return elem * index;</span><br><span class="line">}); //[0, 2, 6]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，map方法的回调函数有三个参数，elem为当前成员的值，index为当前成员的位置，arr为原数组（[1, 2, 3]）</p><p>map方法还可以接受第二个参数，用来绑定回调函数内部的this变量。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = ['a', 'b', 'c'];</span><br><span class="line">[1, 2].map(function (e) {</span><br><span class="line">return this[e];</span><br><span class="line">}, arr); //['b', 'c']</span><br></pre></td></tr></tbody></table></figure><p>上面代码通过map方法的第二个参数，将回调函数内部的this对象，指向arr数组。</p><p>如果数组有空位，map方法的回调函数在这个位置不会执行，会跳过数组的空位。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var f = function (n) { return 'a' };</span><br><span class="line">[1, undefined, 2].map(f); //["a", "a", "a"]</span><br><span class="line">[1, null, 2].map(f); //["a", "a", "a"]</span><br><span class="line">[1, , 2].map(f); //["a", , "a"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，map方法不会跳过undefined和null，但是会跳过空位</p><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>forEach方法与map方法很相似，也是对数组的所有成员依次执行参数函数。但是，forEach方法不返回值，只用来操作数据。这就是说，如果数组遍历的目的是为了得到返回值，那么使用map方法，否则使用forEach方法。<br>forEach的用法与map方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function log(element, index, array) {</span><br><span class="line">console.log('[' + index + '] = ' + element);</span><br><span class="line">}</span><br><span class="line">[2, 5, 9].forEach(log);</span><br><span class="line">//[0] = 2</span><br><span class="line">//[1] = 5</span><br><span class="line">//[2] = 9</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，forEach遍历数组不是为了得到返回值，而是为了在屏幕输出内容，所以不必使用map方法。</p><p>forEach方法也可以接受第二个参数，绑定参数函数的this变量。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var out = [];</span><br><span class="line">[1, 2, 3].forEach(function(elem) {</span><br><span class="line">this.push(elem * elem);</span><br><span class="line">}, out);</span><br><span class="line">out; //[1, 4, 9]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，空数组out是forEach方法的第二个参数，结果，回调函数内部的this关键字就指向out。</p><p>注意，<em>forEach方法无法中断执行，总是会将所有成员遍历完</em>。如果希望符合某种条件时，就中断遍历，要使用for循环。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3];</span><br><span class="line">for (var i = 0; i &lt; arr.length; i++) {</span><br><span class="line">if (arr[i] === 2) break;</span><br><span class="line">console.log(arr[i]);</span><br><span class="line">} //1</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，执行到数组的第二个成员时，就会中断执行。forEach方法做不到这一点。</p><p>forEach方法也会跳过数组的空位。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var log = function (n) {</span><br><span class="line">console.log(n + 1);</span><br><span class="line">};</span><br><span class="line">[1, undefined, 2].forEach(log);</span><br><span class="line">//2</span><br><span class="line">//NaN</span><br><span class="line">//3</span><br><span class="line">[1, null, 2].forEach(log);</span><br><span class="line">//2</span><br><span class="line">//1</span><br><span class="line">//3</span><br><span class="line">[1, , 2].forEach(log);</span><br><span class="line">//2</span><br><span class="line">//3</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，forEach方法不会跳过undefined和null，但会跳过空位。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter方法用于过滤数组成员，满足条件的成员组成一个新数组返回。<br>它的参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。<em>该方法不会改变原数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5].filter(function (elem) {</span><br><span class="line">return (elem &gt; 3);</span><br><span class="line">});</span><br><span class="line">//[4, 5]</span><br></pre></td></tr></tbody></table></figure><p>上面代码将大于3的数组成员，作为一个新数组返回。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [0, 1, 'a', false];</span><br><span class="line">arr.filter(Boolean);</span><br><span class="line">//[1, "a"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，filter方法返回数组arr里面所有布尔值为true的成员。</p><p>filter方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5].filter(function (elem, index, arr) {</span><br><span class="line">return index % 2 === 0;</span><br><span class="line">});</span><br><span class="line">//[1, 3, 5]</span><br></pre></td></tr></tbody></table></figure><p>上面代码返回偶数位置的成员组成的新数组。</p><p>filter方法还可以接受第二个参数，用来绑定参数函数内部的this变量。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj = { MAX: 3 };</span><br><span class="line">var myFilter = function (item) {</span><br><span class="line">if (item &gt; this.MAX) return true;</span><br><span class="line">};</span><br><span class="line">var arr = [2, 8, 3, 4, 1, 3, 2, 9];</span><br><span class="line">arr.filter(myFilter, obj); //[8, 4, 9]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，过滤器myFilter内部有this变量，它可以被filter方法的第二个参数obj绑定，返回大于3的成员。</p><h3 id="some、every"><a href="#some、every" class="headerlink" title="some、every"></a>some、every</h3><p>这两个方法类似“断言”（assert），返回一个布尔值，表示判断数组成员是否符合某种条件。<br>它们接受一个函数作为参数，所有数组成员依次执行该函数。该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。<br>some方法是只要一个成员的返回值是true，则整个some方法的返回值就是true，否则返回false。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line">arr.some(function (elem, index, arr) {</span><br><span class="line">return elem &gt;= 3;</span><br><span class="line">});</span><br><span class="line">//true</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，如果数组arr有一个成员大于等于3，some方法就返回true。</p><p>every方法是所有成员的返回值都是true，整个every方法才返回true，否则返回false。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line">arr.every(function (elem, index, arr) {</span><br><span class="line">  return elem &gt;= 3;</span><br><span class="line">});</span><br><span class="line">//false</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，数组arr并非所有成员大于等于3，所以返回false。</p><p>注意，对于空数组，some方法返回false，every方法返回true，回调函数都不会执行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isEven(x) { return x % 2 === 0 }</span><br><span class="line">[].some(isEven); //false</span><br><span class="line">[].every(isEven); //true</span><br></pre></td></tr></tbody></table></figure><p>some和every方法还可以接受第二个参数，用来绑定参数函数内部的this变量。</p><h3 id="reduce、reduceRight"><a href="#reduce、reduceRight" class="headerlink" title="reduce、reduceRight"></a>reduce、reduceRight</h3><p>reduce方法和reduceRight方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，reduce是从左到右处理（从第一个成员到最后一个成员），reduceRight则是从右到左（从最后一个成员到第一个成员），其他完全一样。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5].reduce(function (a, b) {</span><br><span class="line">console.log(a, b);</span><br><span class="line">return a + b;</span><br><span class="line">});</span><br><span class="line">//1 2</span><br><span class="line">//3 3</span><br><span class="line">//6 4</span><br><span class="line">//10 5</span><br><span class="line">//最后结果：15</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，reduce方法求出数组所有成员的和。第一次执行，a是数组的第一个成员1，b是数组的第二个成员2。第二次执行，a为上一轮的返回值3，b为第三个成员3。第三次执行，a为上一轮的返回值6，b为第四个成员4。第四次执行，a为上一轮返回值10，b为第五个成员5。至此所有成员遍历完成，整个方法的返回值就是最后一轮的返回值15。</p><p>reduce方法和reduceRight方法的第一个参数都是一个函数。该函数接受以下四个参数。<br>累积变量：默认为数组的第一个成员；<br>当前变量：默认为数组的第二个成员；<br>当前位置（从0开始）；<br>原数组<br>这四个参数之中，只有前两个是必须的，后两个则是可选的。<br>如果要对累积变量指定初值，可以把它放在reduce方法和reduceRight方法的第二个参数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5].reduce(function (a, b) {</span><br><span class="line">return a + b;</span><br><span class="line">}, 10);</span><br><span class="line">//25</span><br></pre></td></tr></tbody></table></figure><p>上面代码指定参数a的初值为10，所以数组从10开始累加，最终结果为25。注意，这时b是从数组的第一个成员开始遍历。<br>上面的第二个参数相当于设定了默认值，处理空数组时尤其有用。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function add(prev, cur) {</span><br><span class="line">return prev + cur;</span><br><span class="line">}</span><br><span class="line">[].reduce(add);</span><br><span class="line">//TypeError: Reduce of empty array with no initial value</span><br><span class="line">[].reduce(add, 1);</span><br><span class="line">//1</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，由于空数组取不到初始值，reduce方法会报错。这时，加上第二个参数，就能保证总是会返回一个值。</p><p>下面是一个reduceRight方法的例子。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function subtract(prev, cur) {</span><br><span class="line">return prev - cur;</span><br><span class="line">}</span><br><span class="line">[3, 2, 1].reduce(subtract); //0</span><br><span class="line">[3, 2, 1].reduceRight(subtract); //-4</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，reduce方法相当于3减去2再减去1，reduceRight方法相当于1减去2再减去3。</p><p>由于这两个方法会遍历数组，所以实际上还可以用来做一些遍历相关的操作。比如，找出字符长度最长的数组成员。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function findLongest(entries) {</span><br><span class="line">return entries.reduce(function (longest, entry) {</span><br><span class="line">return entry.length &gt; longest.length ? entry : longest;</span><br><span class="line">}, '');</span><br><span class="line">}</span><br><span class="line">findLongest(['aaa', 'bb', 'c']); //"aaa"</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，reduce的参数函数会将字符长度较长的那个数组成员，作为累积值。这导致遍历所有成员之后，累积值就是字符长度最长的那个成员。</p><h3 id="indexOf、lastIndexOf"><a href="#indexOf、lastIndexOf" class="headerlink" title="indexOf、lastIndexOf"></a>indexOf、lastIndexOf</h3><p>indexOf方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c'];</span><br><span class="line">a.indexOf('b'); //1</span><br><span class="line">a.indexOf('y'); //-1</span><br></pre></td></tr></tbody></table></figure><p>indexOf方法还可以接受第二个参数，表示搜索的开始位置。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">['a', 'b', 'c'].indexOf('a', 1); //-1</span><br></pre></td></tr></tbody></table></figure><p>上面代码从1号位置开始搜索字符a，结果为-1，表示没有搜索到。</p><p>lastIndexOf方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = [2, 5, 9, 2];</span><br><span class="line">a.lastIndexOf(2); //3</span><br><span class="line">a.lastIndexOf(7); //-1</span><br></pre></td></tr></tbody></table></figure><p>注意，这两个方法不能用来搜索NaN的位置，即它们无法确定数组成员是否包含NaN。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[NaN].indexOf(NaN); //-1</span><br><span class="line">[NaN].lastIndexOf(NaN); //-1</span><br></pre></td></tr></tbody></table></figure><p>这是因为这两个方法内部，使用严格相等运算符（===）进行比较，而NaN是唯一一个不等于自身的值。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>Array知识清单将不定时更新所包含的知识，如果有书写错误请指正~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Array知识清单&lt;/p&gt;
    
    </summary>
    
      <category term="Js" scheme="http://Lry0504.github.io/categories/Js/"/>
    
    
      <category term="前端" scheme="http://Lry0504.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到狗子赖的博客</title>
    <link href="http://Lry0504.github.io//posts/fbf759eb/"/>
    <id>http://Lry0504.github.io//posts/fbf759eb/</id>
    <published>2019-08-22T07:14:46.311Z</published>
    <updated>2019-09-25T02:11:46.858Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到狗子赖的博客</p><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/welcome/blog_welcome.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>终于开通了自己的博客了~很久之前就萌生了写博客的想法，奈何一直没有实现。几周前在学习某个知识点的时候刚好看到一个博主的博客，觉得实在是太吸引我了(✪ω✪)，于是在网上参考了许多方式搭了这个博客</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h3><p>博客使用的是<a href="https://tomotoes.com/" target="_blank" rel="noopener">Simon Ma</a>大佬的主题<a href="https://github.com/Tomotoes/hexo-theme-tomotoes" target="_blank" rel="noopener">tomotoes</a>，配色什么的感觉都美美哒~</p><h3 id="博客名字"><a href="#博客名字" class="headerlink" title="博客名字"></a>博客名字</h3><p>博客首页的名字是Dog Lai（狗子赖） emmmm…其实挺好听的，被朋友叫习惯了，感觉也挺好的名字是吧~</p><h3 id="博客内容"><a href="#博客内容" class="headerlink" title="博客内容"></a>博客内容</h3><ol><li>记录日常工作遇到的问题及解答思路</li><li>记录日常学习资料和转载优秀博文</li><li>记录看到的美文及感悟</li><li>记录生活的酸甜苦辣</li><li>……</li></ol><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>一起学习，共勉<del>~</del></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到狗子赖的博客&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>

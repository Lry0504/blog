<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>狗子赖的博客</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://lry61.cn/blog/"/>
  <updated>2020-01-19T01:36:03.908Z</updated>
  <id>http://lry61.cn/blog/</id>
  
  <author>
    <name>狗子赖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Hooks系列之useReducer</title>
    <link href="http://lry61.cn/blog//posts/13/"/>
    <id>http://lry61.cn/blog//posts/13/</id>
    <published>2020-01-17T08:23:44.931Z</published>
    <updated>2020-01-19T01:36:03.908Z</updated>
    
    <content type="html"><![CDATA[<p>React Hooks系列之useReducer</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>useReducer是React提供的一个高级Hook，它与useState一样都是用来管理组件的state。但当state数据类型趋于复杂时，一般使用useReducer来代替useState管理组件state。在具体介绍useReducer之前，我们先回顾下reducer</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="什么是reducer"><a href="#什么是reducer" class="headerlink" title="什么是reducer"></a>什么是reducer</h3><p>简单来说，reducer就是形如(state, action) =&gt; newState的一个纯函数（接收相同的输入始终返回相同的输出），接收当前应用的state和触发的动作action，返回最新的state。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function countReducer(count, action) {</span><br><span class="line">  switch(action.type) {</span><br><span class="line">    case 'add':</span><br><span class="line">      return count + 1;</span><br><span class="line">    case 'del':</span><br><span class="line">      return count - 1;</span><br><span class="line">    default:</span><br><span class="line">     return count;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述代码是一个经典的计数器函数，reducer根据action的不同类型来操作state，最终返回一个新的state。</p><h3 id="reducer使用场景"><a href="#reducer使用场景" class="headerlink" title="reducer使用场景"></a>reducer使用场景</h3><p>我们总结一下使用reducer的场景</p><ul><li>如果你的state是一个数组或者对象</li><li>如果你的state变化很复杂，经常一个操作需要修改很多state</li><li>如果你希望构建自动化测试用例来保证程序的稳定性</li><li>如果你需要在深层子组件里面去修改一些状态</li><li>如果你用应用程序比较大，希望UI和业务能够分开维护</li></ul><h3 id="什么是useReducer"><a href="#什么是useReducer" class="headerlink" title="什么是useReducer"></a>什么是useReducer</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [state, dispatch] = useReducer(reducer, initState);</span><br></pre></td></tr></tbody></table></figure><p>第一个参数：reducer函数，就是我们上面介绍的。第二个参数：初始化的state。返回值为最新的state和dispatch函数（用来触发reducer函数，计算对应的state）。按照官方的说法：对于复杂的state操作逻辑，嵌套的state的对象，推荐使用useReducer<br>听起来比较抽象，我们先看一个简单的例子:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 第一个参数：state的reducer处理函数</span><br><span class="line">function reducer(state, action) {</span><br><span class="line">  switch (action.type) {</span><br><span class="line">    case 'increment':</span><br><span class="line">      return {count: state.count + 1};</span><br><span class="line">    case 'decrement':</span><br><span class="line">      return {count: state.count - 1};</span><br><span class="line">    default:</span><br><span class="line">      throw new Error();</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">// 第二个参数：</span><br><span class="line">const initialState = {count: 0};</span><br><span class="line">function Counter() {</span><br><span class="line">  // 返回值：最新的state和dispatch函数</span><br><span class="line">  const [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      // useReducer会根据dispatch的action，返回最终的state，并触发rerender</span><br><span class="line">      Count: {state.count}</span><br><span class="line">      // dispatch 用来接收一个 action参数「reducer中的action」，用来触发reducer函数，更新最新的状态</span><br><span class="line">      &lt;button onClick={() =&gt; dispatch({type: 'increment'})}&gt;+&lt;/button&gt;</span><br><span class="line">      &lt;button onClick={() =&gt; dispatch({type: 'decrement'})}&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="useState版login"><a href="#useState版login" class="headerlink" title="useState版login"></a>useState版login</h3><p>我们看看使用useState实现登录的实现方式:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function LoginPage() {</span><br><span class="line">  const [name, setName] = useState(''); // 用户名</span><br><span class="line">  const [pwd, setPwd] = useState(''); // 密码</span><br><span class="line">  const [isLoading, setIsLoading] = useState(false); // 是否展示loading，发送请求中</span><br><span class="line">  const [error, setError] = useState(''); // 错误信息</span><br><span class="line">  const [isLoggedIn, setIsLoggedIn] = useState(false); // 是否登录</span><br><span class="line">  const login = (event) =&gt; {</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    setError('');</span><br><span class="line">    setIsLoading(true);</span><br><span class="line">    login({ name, pwd }).then(() =&gt; {</span><br><span class="line">      setIsLoggedIn(true);</span><br><span class="line">      setIsLoading(false);</span><br><span class="line">    }).catch((error) =&gt; {</span><br><span class="line">      // 登录失败: 显示错误信息、清空输入框用户名、密码、清除loading标识</span><br><span class="line">      setError(error.message);</span><br><span class="line">      setName('');</span><br><span class="line">      setPwd('');</span><br><span class="line">      setIsLoading(false);</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">  return ( </span><br><span class="line">    //  返回页面JSX Element</span><br><span class="line">  )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的Demo中，我们定义了5个state来描述页面的状态，在login函数中，当登录成功、失败会进行一系列复杂的state设置。随着需求越来越复杂，更多的state将加入到页面，可以想象，维护这样的代码简直就是噩梦。</p><h3 id="useReducer改造版Login"><a href="#useReducer改造版Login" class="headerlink" title="useReducer改造版Login"></a>useReducer改造版Login</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">const initState = {</span><br><span class="line">  name: '',</span><br><span class="line">  pwd: '',</span><br><span class="line">  isLoading: false,</span><br><span class="line">  error: '',</span><br><span class="line">  isLoggedIn: false,</span><br><span class="line">}</span><br><span class="line">function loginReducer(state, action) {</span><br><span class="line">  switch(action.type) {</span><br><span class="line">    case 'login':</span><br><span class="line">      return {</span><br><span class="line">        ...state,</span><br><span class="line">        isLoading: true,</span><br><span class="line">        error: '',</span><br><span class="line">      }</span><br><span class="line">    case 'success':</span><br><span class="line">      return {</span><br><span class="line">        ...state,</span><br><span class="line">        isLoggedIn: true,</span><br><span class="line">        isLoading: false,</span><br><span class="line">      }</span><br><span class="line">    case 'error':</span><br><span class="line">      return {</span><br><span class="line">        ...state,</span><br><span class="line">        error: action.payload.error,</span><br><span class="line">        name: '',</span><br><span class="line">        pwd: '',</span><br><span class="line">        isLoading: false,</span><br><span class="line">      }</span><br><span class="line">    default: </span><br><span class="line">      return state;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">function LoginPage() {</span><br><span class="line">  const [state, dispatch] = useReducer(loginReducer, initState);</span><br><span class="line">  const { name, pwd, isLoading, error, isLoggedIn } = state;</span><br><span class="line">  const login = (event) =&gt; {</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    dispatch({ type: 'login' });</span><br><span class="line">    login({ name, pwd }).then(() =&gt; {</span><br><span class="line">      dispatch({ type: 'success' });</span><br><span class="line">    }).catch((error) =&gt; {</span><br><span class="line">      dispatch({</span><br><span class="line">        type: 'error'</span><br><span class="line">        payload: { error: error.message }</span><br><span class="line">      });</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">  return ( </span><br><span class="line">    //  返回页面JSX Element</span><br><span class="line">  )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>乍一看useReducer改造后的代码反而更长了，但很明显第二版有更好的可读性，我们也能更清晰的了解state的变化逻辑。</p><p>可以看到login函数现在更清晰的表达了用户的意图，开始登录login、登录success、登录error。LoginPage不需要关心如何处理这几种行为，那是loginReducer需要关心的，表现和业务分离。</p><p>另一个好处是所有的state处理都集中到了一起，使得我们对state的变化更有掌控力，同时也更容易复用state逻辑变化代码，比如在其他函数中也需要触发登录error状态，只需要dispatch({ type: ‘error’ })。</p><p>useReducer可以让我们将what和how分开。比如点击了登录按钮，我们要做的就是发起登陆操作dispatch({ type: ‘login’ })，点击退出按钮就发起退出操作dispatch({ type: ‘logout’ })，所有和how相关的代码都在reducer中维护，组件中只需要思考What，让我们的代码可以像用户的行为一样，更加清晰。</p><p>除此之外还有一个好处，我们在前文提过Reducer其实一个UI无关的纯函数，useReducer的方案是的我们更容易构建自动化测试用例。</p><p>我们介绍了使用useReducer，帮助我们集中式的处理复杂的state管理。但如果我们的页面很复杂，拆分成了多层多个组件，我们如果在子组件触发这些state变化呢，比如在LoginButton触发登录操作？ 我们将在下面介绍如何处理复杂组件树结构的reducer共享问题。</p><h3 id="搭配useContext"><a href="#搭配useContext" class="headerlink" title="搭配useContext"></a>搭配useContext</h3><p>useContext从名字上就可以看出，它是以Hook的方式使用React Context。不了解useContext概念的朋友，可以先<a href="http://lry61.cn/blog/posts/9/">看下我的这篇文章</a>。如何利用context去解决子孙类组件出发reducer状态变化？没错，就是将dispatch函数作为context的value，共享给页面的子组件。下面我们使用useReducer搭配useContext实现login登录：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">// 定义初始化值</span><br><span class="line">const initState = {</span><br><span class="line">  name: '',</span><br><span class="line">  pwd: '',</span><br><span class="line">  isLoading: false,</span><br><span class="line">  error: '',</span><br><span class="line">  isLoggedIn: false,</span><br><span class="line">}</span><br><span class="line">// 定义state[业务]处理逻辑 reducer函数</span><br><span class="line">function loginReducer(state, action) {</span><br><span class="line">  switch(action.type) {</span><br><span class="line">    case 'login':</span><br><span class="line">      return {</span><br><span class="line">        ...state,</span><br><span class="line">        isLoading: true,</span><br><span class="line">        error: '',</span><br><span class="line">      }</span><br><span class="line">    case 'success':</span><br><span class="line">      return {</span><br><span class="line">        ...state,</span><br><span class="line">        isLoggedIn: true,</span><br><span class="line">        isLoading: false,</span><br><span class="line">      }</span><br><span class="line">    case 'error':</span><br><span class="line">      return {</span><br><span class="line">        ...state,</span><br><span class="line">        error: action.payload.error,</span><br><span class="line">        name: '',</span><br><span class="line">        pwd: '',</span><br><span class="line">        isLoading: false,</span><br><span class="line">      }</span><br><span class="line">    default: </span><br><span class="line">      return state;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">// 定义 context函数</span><br><span class="line">const LoginContext = React.createContext();</span><br><span class="line">function LoginPage() {</span><br><span class="line">  const [state, dispatch] = useReducer(loginReducer, initState);</span><br><span class="line">  const { name, pwd, isLoading, error, isLoggedIn } = state;</span><br><span class="line">  const login = (event) =&gt; {</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    dispatch({ type: 'login' });</span><br><span class="line">    login({ name, pwd }).then(() =&gt; {</span><br><span class="line">        dispatch({ type: 'success' });</span><br><span class="line">    }).catch((error) =&gt; {</span><br><span class="line">      dispatch({</span><br><span class="line">        type: 'error'</span><br><span class="line">        payload: { error: error.message }</span><br><span class="line">      });</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">  // 利用 context 共享dispatch</span><br><span class="line">  return ( </span><br><span class="line">    &lt;LoginContext.Provider value={dispatch}&gt;</span><br><span class="line">      &lt;...&gt;</span><br><span class="line">      &lt;LoginButton /&gt;</span><br><span class="line">    &lt;/LoginContext.Provider&gt;</span><br><span class="line">  )</span><br><span class="line">}</span><br><span class="line">function LoginButton() {</span><br><span class="line">  // 子组件中直接通过context拿到dispatch，出发reducer操作state</span><br><span class="line">  const dispatch = useContext(LoginContext);</span><br><span class="line">  const click = () =&gt; {</span><br><span class="line">    if (error) {</span><br><span class="line">      // 子组件可以直接 dispatch action</span><br><span class="line">      dispatch({</span><br><span class="line">        type: 'error'</span><br><span class="line">        payload: { error: error.message }</span><br><span class="line">      });</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到在useReducer结合useContext，通过context把dispatch函数提供给组件树中的所有组件使用<br>，而不用通过props添加回调函数的方式一层层传递。<br>使用Context相比回调函数的优势：</p><ol><li>对比回调函数的自定义命名，Context的Api更加明确，我们可以更清晰的知道哪些组件使用了dispatch、应用中的数据流动和变化。这也是React一直以来单向数据流的优势。</li><li>更好的性能：如果使用回调函数作为参数传递的话，因为每次render函数都会变化，也会导致子组件rerender。当然我们可以使用useCallback解决这个问题，但相比useCallback,React官方更推荐使用useReducer，因为React会保证dispatch始终是不变的，不会引起consumer组件的rerender。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此useReducer系列介绍就结束了，我们简单回顾一下：</p><ul><li>如果你的页面state很简单，可以直接使用useState</li><li>如果你的页面state比较复杂（state是一个对象或者state非常多散落在各处）请使用userReducer</li><li>如果你的页面组件层级比较深，并且需要子组件触发state的变化，可以考虑useReducer + useContext</li></ul><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><blockquote><p>作者：人人贷大前端技术中心<br>链接：<a href="https://juejin.im/post/5d072b5e518825490d53dee6" target="_blank" rel="noopener">https://juejin.im/post/5d072b5e518825490d53dee6</a><br>来源：掘金</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Hooks系列之useReducer&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://lry61.cn/blog/categories/React/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks系列之useMemo与useCallback</title>
    <link href="http://lry61.cn/blog//posts/12/"/>
    <id>http://lry61.cn/blog//posts/12/</id>
    <published>2020-01-09T14:03:30.353Z</published>
    <updated>2020-01-09T14:15:28.960Z</updated>
    
    <content type="html"><![CDATA[<p>React Hooks系列之useMemo与useCallback</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面几章中，我们使用hooks实现了在函数组件中创建内部state。但是，使用function的形式，我们失去了基于class的形式创建组件的shouldComponentUpdate，我们无法再通过判断前后状态来决定是否更新。而且，在函数组件中，react也不再区分mount和update这两个状态，这意味着每一次调用函数组件，都会执行它内部的所有逻辑，会带来很大的性能损耗。<br>因此，解决性能问题的杀手锏——useMemo和useCallback诞生了！</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="简单的介绍"><a href="#简单的介绍" class="headerlink" title="简单的介绍"></a>简单的介绍</h3><h4 id="※-useMemo简介"><a href="#※-useMemo简介" class="headerlink" title="※ useMemo简介"></a>※ useMemo简介</h4><p>useMemo可以用来缓存计算结果。它接收两个参数：第一个参数为回调函数（计算过程，必须返回一个结果），第二个参数为依赖项数组，当依赖项中的某一项发生变化时，结果将会重新计算。<br>useMemo调用签名如下:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function useMemo&lt;T&gt;(factory: () =&gt; T, deps: DependencyList | undefined): T;</span><br></pre></td></tr></tbody></table></figure><h4 id="※-useCallback简介"><a href="#※-useCallback简介" class="headerlink" title="※ useCallback简介"></a>※ useCallback简介</h4><p>useCallback的使用与useMemo基本一致，只不过useCallback缓存的是一个函数体。当依赖项数组中的某一项发生变化时，函数体会重新创建。<br>useCallback调用签名如下:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function useCallback&lt;T extends (...args: any[]) =&gt; any&gt;(callback: T, deps: DepencyList | undefined): T;</span><br></pre></td></tr></tbody></table></figure><h4 id="对比useEffect"><a href="#对比useEffect" class="headerlink" title="对比useEffect"></a>对比useEffect</h4><p>useMemo与useCallback的参数与useEffect的参数一致，它们最大的区别就是useEffect会处理副作用。useMemo和useCallback都会在组件第一次渲染的时候执行，之后只在依赖项数组发生变化时再次执行。</p><h3 id="※-useMemo"><a href="#※-useMemo" class="headerlink" title="※ useMemo"></a>※ useMemo</h3><p>我们先看下这个例子</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function Example() {</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  const [val, setVal] = useState("");</span><br><span class="line">  const sum = () =&gt; {</span><br><span class="line">    console.log("重新计算一次");</span><br><span class="line">    let _sum = 0;</span><br><span class="line">    for (let i = 1; i &lt;= count; i++) {</span><br><span class="line">      _sum += i;</span><br><span class="line">    }</span><br><span class="line">    return _sum;</span><br><span class="line">  };</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value={val} onChange={e =&gt; setVal(e.target.value)} /&gt;</span><br><span class="line">      &lt;div&gt;count值为:{count}&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;_sum值为:{sum()}&lt;/div&gt;</span><br><span class="line">      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;count+&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useMemo1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><a href="https://codesandbox.io/s/usememo1-iix2n" target="_blank" rel="noopener">亲自试一试</a>上面的例子，我们可以看到:无论是修改count还是val，都会触发sum的重新执行。但是我们的sum计算函数只依赖count，在修改val的时候，是没有必要再次进行额外的计算的。在这种情况下，我们就可以使用useMemo来缓存计算函数sum，只在count变化时才执行。<a href="https://codesandbox.io/s/usememo2-9u34f" target="_blank" rel="noopener">亲自试一试</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function Example() {</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  const [val, setVal] = useState("");</span><br><span class="line">  const sum = useMemo(() =&gt; {//注意这里的变化</span><br><span class="line">    console.log("重新计算一次");</span><br><span class="line">    let _sum = 0;</span><br><span class="line">    for (let i = 1; i &lt;= count; i++) {</span><br><span class="line">      _sum += i;</span><br><span class="line">    }</span><br><span class="line">    return _sum;</span><br><span class="line">  }, [count]); //注意这里的变化</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value={val} onChange={e =&gt; setVal(e.target.value)} /&gt;</span><br><span class="line">      &lt;div&gt;count值为:{count}&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;_sum值为:{sum}&lt;/div&gt;{/* 注意这里的变化 */}</span><br><span class="line">      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;count+&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useMemo2.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="※-useCallback"><a href="#※-useCallback" class="headerlink" title="※ useCallback"></a>※ useCallback</h3><p>经常使用React的朋友，应该都有过这样的使用场景：存在一个父组件Parent，里面包含一个子组件Child，子组件Child接收一个函数callback作为props。如果父组件更新了，子组件也会更新（不管影响父组件更新的值子组件有没有用到）。其实，这样的更新是没有必要的。<a href="https://codesandbox.io/s/usecallback1-hlsf3" target="_blank" rel="noopener">亲自试一试</a>下面的例子</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function Parent() {</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  const [val, setVal] = useState("");</span><br><span class="line">  const callback = () =&gt; {</span><br><span class="line">    console.log("组件更新时渲染");</span><br><span class="line">    return count;</span><br><span class="line">  };</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value={val} onChange={e =&gt; setVal(e.target.value)} /&gt;</span><br><span class="line">      &lt;div&gt;count值为:{count}&lt;/div&gt;</span><br><span class="line">      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;count+&lt;/button&gt;</span><br><span class="line">      &lt;Child callback={callback} /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line">function Child({ callback }) {</span><br><span class="line">  const [val, setVal] = useState(() =&gt; callback());</span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    setVal(callback());</span><br><span class="line">  }, [callback]);</span><br><span class="line">  return &lt;div&gt;Child组件值为:{val}&lt;/div&gt;;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useCallback1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们可以借助useCallback来返回函数，然后把这个函数作为props传递给子组件，这样子组件就可以避免不必要的更新。<a href="https://codesandbox.io/s/usecallback2-yvl77" target="_blank" rel="noopener">亲自试一试</a>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function Parent() {</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  const [val, setVal] = useState("");</span><br><span class="line">  const callback = useCallback(() =&gt; {//注意这里的变化</span><br><span class="line">    console.log("组件更新时渲染");</span><br><span class="line">    return count;</span><br><span class="line">  }, [count]);//注意这里的变化</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value={val} onChange={e =&gt; setVal(e.target.value)} /&gt;</span><br><span class="line">      &lt;div&gt;count值为:{count}&lt;/div&gt;</span><br><span class="line">      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;count+&lt;/button&gt;</span><br><span class="line">      &lt;Child callback={callback} /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line">function Child({ callback }) {</span><br><span class="line">  const [val, setVal] = useState(() =&gt; callback());</span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    setVal(callback());</span><br><span class="line">  }, [callback]);</span><br><span class="line">  return &lt;div&gt;Child组件值为:{val}&lt;/div&gt;;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useCallback2.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>所以，我们依赖本地状态或props来创建的函数，需要用到缓存函数的地方，都可以用useCallback来解决。</p><h3 id="什么时候使用合适？"><a href="#什么时候使用合适？" class="headerlink" title="什么时候使用合适？"></a>什么时候使用合适？</h3><p>当我们使用useMemo和useCallback时，会新增许多的闭包函数，如果盲目的使用，可能会使你的组件反而变得更慢。<br>那么，我们应该什么时候使用它们呢？<br>通常情况下，当函数体或者结果计算过于复杂时，我们才会考虑使用useMemo和useCallback。<br>不过，如果依赖项数组变化太频繁，我们也需要考虑使用useMemo和useCallback是否划算。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>如有错误，欢迎指正~</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Hooks系列之useMemo与useCallback&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://lry61.cn/blog/categories/React/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝与浅拷贝</title>
    <link href="http://lry61.cn/blog//posts/11/"/>
    <id>http://lry61.cn/blog//posts/11/</id>
    <published>2020-01-06T09:11:21.363Z</published>
    <updated>2020-01-06T12:30:22.795Z</updated>
    
    <content type="html"><![CDATA[<p>深拷贝与浅拷贝</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>“深拷贝与浅拷贝”一直以来都是高频面试题，那么我们如何区分深拷贝与浅拷贝呢？简单来说，就是假设A复制了B，当修改B时，查看A是否会发生变化。如果A跟着变化，则说明是浅拷贝，否则就是深拷贝。其实，<strong>浅拷贝是拷贝一层，深层次的对象级别拷贝的是引用；深拷贝是拷贝多层，每一个级别的数据都会被拷贝出来</strong><br>在深入了解深拷贝与浅拷贝之前，我们先回顾下堆栈和JavaScript数据类型。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="JavaScript数据类型"><a href="#JavaScript数据类型" class="headerlink" title="JavaScript数据类型"></a>JavaScript数据类型</h3><p>JavaScript数据类型分为两大种：</p><ol><li>基本类型（number、string、boolean、undefined、null、symbol）<br>基本数据类型可以直接访问，它们是按值分配的，存放在栈（stack）内存中的简单数据段，数据大小确定，内存空间大小可以分配。<br>基本类型的复制，会在栈内存中开辟一个新的空间，单独修改变量互不影响。</li><li>引用类型（object）<br>存放在堆（heap）内存中的对象，变量实际保存的是一个指针，这个指针指向另一个位置。<br>引用类型的复制，也会为新变量自动分配一个栈内存空间，但是保存的只是引用类型的一个指针。当指针地址相同时，访问到的堆内存中的具体对象实际是同一个，当一个改变时，另一个也跟着改变。</li></ol><h3 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h3><p>在计算机领域中，堆栈是两种数据结构。</p><ul><li><p>栈(stack)</p><ol><li>自动分配内存空间，会自动释放。</li><li>存放基本数据类型的值、引用类型的地址（对象的引用），按值访问，先进后出。</li><li>动态分配的空间一般由程序员分配释放，若程序员不释放，程序结束时由OS回收</li><li>对象复制的时候，<strong>复制的是栈中的地址而不是堆中的对象</strong>，两个地址指向同一个对象。</li></ol></li><li><p>堆（heap）</p><ol><li>动态分配的内存，大小不定，不会自动释放。</li><li>存放引用数据类型的对象值、函数的参数值、局部变量的值等，队列优先，先进先出。</li><li>引用数据类型的值是保存在堆内存中的对象，JavaScript不允许直接访问堆内存中的位置。</li><li>不能直接操作对象的堆内存空间，操作对象时，实际操作的是对象的引用而不是对象本身。</li></ol></li></ul><p>我们以一个<a href="https://codesandbox.io/s/stack-and-heap-tgswo" target="_blank" rel="noopener">简单的赋值例子</a>来看下:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let a = 1;</span><br><span class="line">let b = a;</span><br><span class="line">a = 2;</span><br><span class="line">console.log(a); //2</span><br><span class="line">console.log(b); //1</span><br><span class="line"></span><br><span class="line">let c = {name: "lry"};</span><br><span class="line">let d = c;</span><br><span class="line">d.name = "LRY0504";</span><br><span class="line">console.log(c); //{name: "LRY0504"}</span><br><span class="line">console.log(d); //{name: "LRY0504"}</span><br></pre></td></tr></tbody></table></figure><p>上面的例子中，变量还未变化时，可以画出如下堆栈图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/deep-shallow%20copy/stack-heap.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>当对一个变量进行赋值时，都会在栈内存中开辟一个新的内存空间。但对于基础数据类型而言，新的内存空间存的是数据本身，不会相互影响；对于引用数据类型而言，内存空间存的只是一个地址指针（对象的引用），指向堆内存里的实际对象数据。<br>由此可见，<em>深浅拷贝是相对于引用类型的</em></p><h3 id="赋值与浅拷贝"><a href="#赋值与浅拷贝" class="headerlink" title="赋值与浅拷贝"></a>赋值与浅拷贝</h3><p>我们先看看下面的例子，比较赋值与浅拷贝会对原对象带来哪些改变。<br><a href="https://codesandbox.io/s/shallow1-x32xj" target="_blank" rel="noopener">对象赋值</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj1 = {</span><br><span class="line">name: "lry",</span><br><span class="line">age: 24,</span><br><span class="line">hobby: ["music", "game", "basketball"]</span><br><span class="line">};</span><br><span class="line">var obj2 = obj1;</span><br><span class="line">obj2.name = "LRY0504";</span><br><span class="line">obj2.hobby[0] = "book";</span><br><span class="line"></span><br><span class="line">console.log(obj1);</span><br><span class="line">console.log(obj2);</span><br></pre></td></tr></tbody></table></figure><p>运行上面的例子，产生下面的结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/deep-shallow%20copy/copy.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><a href="https://codesandbox.io/s/shallow2-y3lf4" target="_blank" rel="noopener">浅拷贝</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var obj1 = {</span><br><span class="line">name: "lry",</span><br><span class="line">age: 24,</span><br><span class="line">hobby: ["music", "game", "basketball"]</span><br><span class="line">};</span><br><span class="line">var obj2 = shallowCopy(obj1);</span><br><span class="line">obj2.name = "LRY0504";</span><br><span class="line">obj2.hobby[0] = "book";</span><br><span class="line">function shallowCopy(obj) {</span><br><span class="line">var res = {};</span><br><span class="line">for(var prop in obj) {</span><br><span class="line">  if(obj.hasOwnProperty(prop)) {</span><br><span class="line">    res[prop] = obj[prop];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">return res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">console.log(obj1);</span><br><span class="line">console.log(obj2);</span><br></pre></td></tr></tbody></table></figure><p>运行上面的例子，其中函数shallowCopy是一个简单的浅拷贝实现方式，产生下面的结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/deep-shallow%20copy/shallow_copy1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>由上面两个例子可以看出:</p><ul><li>所谓“赋值”，<strong>赋的其实是该对象在栈中的地址，而不是堆中的数据</strong>。即两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实改变的都是存储空间的内容，另一个对象也会跟着改变。</li><li>浅拷贝会创建一个新对象，这个对象有着原始对象属性的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址 。因此如果其中一个对象改变了这个地址，就会影响到另一个对象。</li></ul><h3 id="浅拷贝的实现"><a href="#浅拷贝的实现" class="headerlink" title="浅拷贝的实现"></a>浅拷贝的实现</h3><h4 id="※-Object-assign"><a href="#※-Object-assign" class="headerlink" title="※ Object.assign"></a>※ Object.assign</h4><p>Object.assign()方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var obj1 = {</span><br><span class="line">  name: "lry",</span><br><span class="line">  age: 24,</span><br><span class="line">  hobby: ["music", "basketball", "game"],</span><br><span class="line">  data: {</span><br><span class="line">    name: "试题信息",</span><br><span class="line">    quesList: [1, 2, [3, 4]]</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">var obj2 = Object.assign({}, obj1);</span><br><span class="line">obj2.name = "LRY0504";</span><br><span class="line">obj2.hobby[0] = "book";</span><br><span class="line">obj2.data.name = "试题列表";</span><br><span class="line">obj2.data.quesList[0] = 5;</span><br><span class="line">obj2.data.quesList[2][0] = 6;</span><br><span class="line">console.log(obj1);</span><br><span class="line">console.log(obj2);</span><br></pre></td></tr></tbody></table></figure><p>上面代码的运行结果如下图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/deep-shallow%20copy/shallow_copy2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从图中我们可以看出，使用Object.assign()拷贝过的对象，第一层数据并没有随着obj2的改变而改变，第二层及更深层的数据随着obj2的改变而改变。<a href="https://codesandbox.io/s/object-assign-ej451" target="_blank" rel="noopener">亲自试一试</a>因此我们可以得出以下结论:<br><em>Object.assign()第一层是深拷贝，第二及更深层是浅拷贝</em></p><h4 id="※-concat与slice"><a href="#※-concat与slice" class="headerlink" title="※ concat与slice"></a>※ concat与slice</h4><p>concat与slice是相对于数组Array层面的浅拷贝。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var obj1 = [</span><br><span class="line">  {</span><br><span class="line">    name: "lry",</span><br><span class="line">    age: 24,</span><br><span class="line">    hobby: ["music", "basketball", "game"],</span><br><span class="line">    data: {</span><br><span class="line">      name: "试题信息",</span><br><span class="line">      quesList: [1, 2, [3, 4]]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">];</span><br><span class="line">var obj2 = obj1.concat();</span><br><span class="line">// var obj2 = obj1.slice();</span><br><span class="line">obj2[0].name = "LRY0504";</span><br><span class="line">obj2[0].hobby[0] = "book";</span><br><span class="line">obj2[0].data.name = "试题列表";</span><br><span class="line">obj2[0].data.quesList[0] = 5;</span><br><span class="line">obj2[0].data.quesList[2][0] = 6;</span><br><span class="line">console.log(obj1);</span><br><span class="line">console.log(obj2);</span><br></pre></td></tr></tbody></table></figure><p>运行<a href="https://codesandbox.io/s/concat-slice-bd4ui" target="_blank" rel="noopener">上面的例子</a>，得出如下结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/deep-shallow%20copy/shallow_copy3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="深拷贝的实现"><a href="#深拷贝的实现" class="headerlink" title="深拷贝的实现"></a>深拷贝的实现</h3><blockquote><p>为了简化代码，下面所有例子都使用上面Object.assign()的obj1作为基础对象</p></blockquote><h4 id="序列化反序列化法"><a href="#序列化反序列化法" class="headerlink" title="序列化反序列化法"></a>序列化反序列化法</h4><p>使用JSON.parse和JSON.stringify方法可以实现深拷贝。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj2 = JSON.parse(JSON.stringify(obj1));</span><br><span class="line">obj2.name = "LRY0504";</span><br><span class="line">obj2.hobby[0] = "book";</span><br><span class="line">obj2.data.name = "试题列表";</span><br><span class="line">obj2.data.quesList[0] = 5;</span><br><span class="line">obj2.data.quesList[2][0] = 6;</span><br><span class="line">console.log(obj1);</span><br><span class="line">console.log(obj2);</span><br></pre></td></tr></tbody></table></figure><p>运行<a href="https://codesandbox.io/s/deep-copy1-5myif" target="_blank" rel="noopener">上面的例子</a>，结果如图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/deep-shallow%20copy/deep_copy.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>注意：这种方法只能实现对象或数据的深拷贝，不能处理函数function</p></blockquote><h4 id="迭代递归法"><a href="#迭代递归法" class="headerlink" title="迭代递归法"></a>迭代递归法</h4><p>迭代递归法实现深拷贝原理：遍历对象、数组，直到里边都是基本数据类型，然后再去复制，就是深度拷贝。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function isObject(o) {</span><br><span class="line">  return (typeof o === "object" || typeof o === "function") &amp;&amp; o !== null;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function deepClone(obj) {</span><br><span class="line">  if (!isObject(obj)) {</span><br><span class="line">    throw new Error("obj不是一个对象!");</span><br><span class="line">  }</span><br><span class="line">  let isArray = Array.isArray(obj);</span><br><span class="line">  let cloneObj = isArray ? [] : {};</span><br><span class="line">  for (let key in obj) {</span><br><span class="line">    cloneObj[key] = isObject(obj[key]) ? deepClone(obj[key]) : obj[key];</span><br><span class="line">  }</span><br><span class="line">  return cloneObj;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行上面的例子，发现结果与上面结果一致。<a href="https://codesandbox.io/s/deep-copy2-hcxm4" target="_blank" rel="noopener">亲自试一试</a></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>如有错误，欢迎指正~</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深拷贝与浅拷贝&lt;/p&gt;
    
    </summary>
    
      <category term="Js" scheme="http://lry61.cn/blog/categories/Js/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks系列之useRef</title>
    <link href="http://lry61.cn/blog//posts/10/"/>
    <id>http://lry61.cn/blog//posts/10/</id>
    <published>2019-12-29T14:59:50.490Z</published>
    <updated>2019-12-29T15:04:11.555Z</updated>
    
    <content type="html"><![CDATA[<p>React Hooks系列之useRef</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="https://lry0504.github.io/blog/posts/5/#%E2%80%BB-useRef" target="_blank" rel="noopener">React Hooks初探</a>中我们提到：如果你将ref以<code>&lt;div ref={myRef}&gt;&lt;/div&gt;</code>这种方式传入组件，则无论该节点如何改变，React都会将ref对象的<code>.current</code>属性设置为对应的DOM节点。</p><blockquote><p>注意，当ref对象内容发生变化时，useRef并不会通知你。变更.current属性不会引发组件重新渲染。如果想要在React绑定或解绑DOM节点的ref时运行某些代码，则需要使用回调ref来实现。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useRef0.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="只在更新时运行effect"><a href="#只在更新时运行effect" class="headerlink" title="只在更新时运行effect"></a>只在更新时运行effect</h3><p>这是个比较罕见的场景。如果你需要实现的话，你可以<strong>使用一个可变的ref</strong>手动存储一个布尔值来表示是首次渲染还是后续渲染，然后在你的effect里检查这个标识。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useRef1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果我们按照下面操作：</p><ol><li>打开控制台，查看控制台信息</li><li>点击按钮，查看控制台信息</li><li>再次点击按钮，查看控制台信息<br>我们会发现，此时的effect只在重新渲染的时候才会执行。<a href="https://codesandbox.io/s/useref-koj06" target="_blank" rel="noopener">自己试一试</a></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useRef1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>你也可以将它抽取成自定义Hook：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useRef2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>重复上面的操作，会产生下面的结果。<a href="https://codesandbox.io/s/useref-6utd6" target="_blank" rel="noopener">自己试一试</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useRef2.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="渲染周期间共享数据的存储"><a href="#渲染周期间共享数据的存储" class="headerlink" title="渲染周期间共享数据的存储"></a>渲染周期间共享数据的存储</h3><p>假设我们有个需求：需要创建一个定时器，每隔一秒让count加1；当count大于等于5时，清除这个定时器。<br>我们很容易写出这样的代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useRef3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><a href="https://codesandbox.io/s/useref3-yoiup" target="_blank" rel="noopener">运行上面的代码</a>，当count等于5的时候并没有停止，这是为什么呢？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useRef3.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>因为在第二个effect的clearInterval中，timer并不是setInterval赋值的那个了，每次渲染，组件都会重置它。这时候我们就可以使用useRef来解决这个问题。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useRef4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>使用useRef创建一个timer，将setInterval返回的结果赋值给timer的current属性。便能得到我们想要的结果了。<a href="https://codesandbox.io/s/useref4-zmgz3" target="_blank" rel="noopener">自己试一试</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useRef4.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>如有错误，欢迎指正~</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Hooks系列之useRef&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://lry61.cn/blog/categories/React/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks系列之useContext</title>
    <link href="http://lry61.cn/blog//posts/9/"/>
    <id>http://lry61.cn/blog//posts/9/</id>
    <published>2019-12-26T08:15:16.147Z</published>
    <updated>2019-12-26T08:31:02.005Z</updated>
    
    <content type="html"><![CDATA[<p>React Hooks系列之useContext</p><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/useContext.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在了解useContext之前，我们先回顾下<a href="https://zh-hans.reactjs.org/docs/context.html" target="_blank" rel="noopener">React中的Context</a>。</p><blockquote><p>Context提供了一个无需为每层组件手动添加props，就能在组件树间进行数据传递的方法。</p></blockquote><p>在一个典型的React应用中，数据是通过props属性自上而下（由父到子）层层传递的，但这种做法在多层组件嵌套中显得极其繁琐。Context提供了一种在组件间共享此类值的方式，而不必显式地通过组件树逐层传递props。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="React-createContext"><a href="#React-createContext" class="headerlink" title="React.createContext"></a>React.createContext</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const myContext = React.createContext(defaultValue);</span><br></pre></td></tr></tbody></table></figure><p>创建一个Context对象（返回Provider和Consumer对象）。当React渲染订阅这个Context对象的组件时，组件会从组件树中找到离自身最近的Provider，读取当前的context值。如果组件树中没有匹配到Provider，则会使用默认值defalutValue。</p><h3 id="Context-Provider"><a href="#Context-Provider" class="headerlink" title="Context.Provider"></a>Context.Provider</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyContext.Provider value={...}&gt;</span><br></pre></td></tr></tbody></table></figure><p>Provider接收一个value属性，传递给Consumer组件，当value值发生变化时，它内部的所有Consumer组件都会重新渲染。</p><blockquote><p>注意：如果接受的value属性为一个对象，则应把value状态提升到state，否则每次渲染value属性都会被赋值为一个新的对象，导致子组件全部都会重新渲染</p></blockquote><h3 id="Context-Consumer"><a href="#Context-Consumer" class="headerlink" title="Context.Consumer"></a>Context.Consumer</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyContext.Consumer&gt;</span><br><span class="line">{value =&gt; /* 基于context值进行渲染*/}</span><br><span class="line">&lt;/MyContext.Consumer&gt;</span><br></pre></td></tr></tbody></table></figure><p>函数组件也可以订阅Context对象，但需要函数作为子元素。这个函数接收当前的context值，返回一个React节点。传递给函数的value值等同于往上组件树离这个context最近的Provider提供的value值。如果没有对应的Provider，value参数等同于传递给createContext()的defaultValue。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const MyContext = React.createContext();</span><br><span class="line">function App() {</span><br><span class="line">  return (</span><br><span class="line">    &lt;MyContext.Provider value={"lry"}&gt;</span><br><span class="line">      &lt;Child /&gt;</span><br><span class="line">    &lt;/MyContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function Child() {</span><br><span class="line">  const value = useContext(MyContext);</span><br><span class="line">  return &lt;div&gt;My name is {value}&lt;/div&gt;;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://codesandbox.io/s/context-l9ohh" target="_blank" rel="noopener">一起试一试</a></p><h3 id="使用useContext"><a href="#使用useContext" class="headerlink" title="使用useContext"></a>使用useContext</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const value = useContext(MyContext);</span><br></pre></td></tr></tbody></table></figure><p>接收一个Context对象（React.createContext的返回值）并返回该context的当前值。当前的context值由上层组件中距离当前组件最近的<code>&lt;MyContext.Provider&gt;</code>的value prop决定。<br>当组件上层最近的<code>&lt;MyContext.Provider&gt;</code>更新时，该Hook会触发重渲染，并使用最新传递给MyContext provider的context value值。<br><a href="https://codesandbox.io/s/usecontext-cqvxr" target="_blank" rel="noopener">使用useContext改写上面的例子</a>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const MyContext = React.createContext();</span><br><span class="line">function App() {</span><br><span class="line">  return (</span><br><span class="line">    &lt;MyContext.Provider value={"lry"}&gt;</span><br><span class="line">      &lt;Child /&gt;</span><br><span class="line">    &lt;/MyContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function Child() {</span><br><span class="line">  const value = useContext(MyContext);</span><br><span class="line">  return &lt;div&gt;My name is {value}&lt;/div&gt;;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>如有错误，欢迎指正~</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Hooks系列之useContext&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://lry61.cn/blog/categories/React/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks系列之useEffect（三）</title>
    <link href="http://lry61.cn/blog//posts/8/"/>
    <id>http://lry61.cn/blog//posts/8/</id>
    <published>2019-12-25T09:02:55.752Z</published>
    <updated>2019-12-25T12:13:38.768Z</updated>
    
    <content type="html"><![CDATA[<p>React Hooks系列之useEffect（三）</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>还记得我们说过同步才是理解effects的心智模型吗？同步的一个有趣地方在于你通常想要把同步的“信息”和状态解耦。举个例子，当你在Google Docs编辑文档的时候，Google并不会把整篇文章发送给服务器。那样做会非常低效。相反的，它只是把你的修改以一种形式发送给服务端。</p><p>虽然我们effect的情况不尽相同，但可以应用类似的思想。只在effects中传递最小的信息会很有帮助。类似于setCount(c =&gt; c + 1)这样的更新形式比setCount(count + 1)传递了更少的信息，因为它不再被当前的count值“污染”。它只是表达了一种行为（“递增”）。“Thinking in React”也讨论了<a href="https://reactjs.org/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state" target="_blank" rel="noopener">如何找到最小状态</a>。原则是类似的，只不过现在关注的是如何更新。</p><p>表达意图（而不是结果）和Google Docs<a href="https://medium.com/@srijancse/how-real-time-collaborative-editing-work-operational-transformation-ac4902d75682" target="_blank" rel="noopener">如何处理</a>共同编辑异曲同工。虽然这个类比略微延伸了一点，函数式更新在React中扮演了类似的角色。它们确保能以批量地和可预测的方式来处理各种源头（事件处理函数，effect中的订阅，等等）的状态更新。</p><p>然而，即使是setCount(c =&gt; c + 1)也并不完美。它看起来有点怪，并且非常受限于它能做的事。举个例子，如果我们有两个互相依赖的状态，或者我们想基于一个prop来计算下一次的state，它并不能做到。幸运的是， setCount(c =&gt; c + 1)有一个更强大的姐妹模式，它的名字叫useReducer。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="解耦来自Actions的更新"><a href="#解耦来自Actions的更新" class="headerlink" title="解耦来自Actions的更新"></a>解耦来自Actions的更新</h3><p>我们来修改上面的例子让它包含两个状态：count 和 step。我们的定时器会每次在count上增加一个step值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function Counter() {</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  const [step, setStep] = useState(1);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    const id = setInterval(() =&gt; {</span><br><span class="line">      setCount(c =&gt; c + step);</span><br><span class="line">    }, 1000);</span><br><span class="line">    return () =&gt; clearInterval(id);</span><br><span class="line">  }, [step]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;{count}&lt;/h1&gt;</span><br><span class="line">      &lt;input value={step} onChange={e =&gt; setStep(Number(e.target.value))} /&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>(这里是<a href="https://codesandbox.io/s/zxn70rnkx" target="_blank" rel="noopener">demo</a>)</p><p>注意我们没有撒谎。既然我们在effect里使用了step，我们就把它加到依赖里。所以这也是为什么代码能运行正确。</p><p>这个例子目前的行为是修改step会重启定时器 - 因为它是依赖项之一。在大多数场景下，这正是你所需要的。清除上一次的effect然后重新运行新的effect并没有任何错。除非我们有很好的理由，我们不应该改变这个默认行为。</p><p>不过，假如我们不想在step改变后重启定时器，我们该如何从effect中移除对step的依赖呢？</p><p>当你想更新一个状态，并且这个状态更新依赖于另一个状态的值时，你可能需要用useReducer去替换它们。</p><p>当你写类似setSomething(something =&gt; …)这种代码的时候，也许就是考虑使用reducer的契机。reducer可以让你把组件内发生了什么(actions)和状态如何响应并更新分开表述。</p><p>我们用一个dispatch依赖去替换effect的step依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">const { count, step } = state;</span><br><span class="line"></span><br><span class="line">useEffect(() =&gt; {</span><br><span class="line">  const id = setInterval(() =&gt; {</span><br><span class="line">    dispatch({ type: 'tick' }); // Instead of setCount(c =&gt; c + step);</span><br><span class="line">  }, 1000);</span><br><span class="line">  return () =&gt; clearInterval(id);</span><br><span class="line">}, [dispatch]);</span><br></pre></td></tr></tbody></table></figure><p>(查看<a href="https://codesandbox.io/s/xzr480k0np" target="_blank" rel="noopener">demo</a>)</p><p>你可能会问：“这怎么就更好了？”答案是<strong>React会保证dispatch在组件的声明周期内保持不变</strong>。所以上面例子中不再需要重新订阅定时器。</p><p>我们解决了问题!</p><p>（你可以从依赖中去除dispatch, setState, 和useRef包裹的值因为React会确保它们是静态的。不过你设置了它们作为依赖也没什么问题。）</p><p>相比于直接在effect里面读取状态，它dispatch了一个action来描述发生了什么。这使得我们的effect和step状态解耦。我们的effect不再关心怎么更新状态，它只负责告诉我们发生了什么。更新的逻辑全都交由reducer去统一处理:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const initialState = {</span><br><span class="line">  count: 0,</span><br><span class="line">  step: 1,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">function reducer(state, action) {</span><br><span class="line">  const { count, step } = state;</span><br><span class="line">  if (action.type === 'tick') {</span><br><span class="line">    return { count: count + step, step };</span><br><span class="line">  } else if (action.type === 'step') {</span><br><span class="line">    return { count, step: action.step };</span><br><span class="line">  } else {</span><br><span class="line">    throw new Error();</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>(这里是<a href="https://codesandbox.io/s/xzr480k0np" target="_blank" rel="noopener">demo</a>如果你之前错过了。)</p><h3 id="为什么useReducer是Hooks的作弊模式"><a href="#为什么useReducer是Hooks的作弊模式" class="headerlink" title="为什么useReducer是Hooks的作弊模式"></a>为什么useReducer是Hooks的作弊模式</h3><p>我们已经学习到如何移除effect的依赖，不管状态更新是依赖上一个状态还是依赖另一个状态。但假如我们需要依赖props去计算下一个状态呢？举个例子，也许我们的API是<code>&lt;Counter step={1} /&gt;</code>。确定的是，在这种情况下，我们没法避免依赖props.step 。是吗？</p><p>实际上， 我们可以避免！我们可以把reducer函数放到组件内去读取props：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function Counter({ step }) {</span><br><span class="line">  const [count, dispatch] = useReducer(reducer, 0);</span><br><span class="line"></span><br><span class="line">  function reducer(state, action) {</span><br><span class="line">    if (action.type === 'tick') {</span><br><span class="line">      return state + step;</span><br><span class="line">    } else {</span><br><span class="line">      throw new Error();</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    const id = setInterval(() =&gt; {</span><br><span class="line">      dispatch({ type: 'tick' });</span><br><span class="line">    }, 1000);</span><br><span class="line">    return () =&gt; clearInterval(id);</span><br><span class="line">  }, [dispatch]);</span><br><span class="line"></span><br><span class="line">  return &lt;h1&gt;{count}&lt;/h1&gt;;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这种模式会使一些优化失效，所以你应该避免滥用它，不过如果你需要你完全可以在reducer里面访问props。（这里是<a href="https://codesandbox.io/s/7ypm405o8q" target="_blank" rel="noopener">demo</a>）</p><p>即使是在这个例子中，React也保证dispatch在每次渲染中都是一样的。 所以你可以在依赖中去掉它。它不会引起effect不必要的重复执行。</p><p>你可能会疑惑：这怎么可能？在之前渲染中调用的reducer怎么“知道”新的props？答案是当你dispatch的时候，React只是记住了action - 它会在下一次渲染中再次调用reducer。在那个时候，新的props就可以被访问到，而且reducer调用也不是在effect里。</p><p>这就是为什么我倾向认为useReducer是Hooks的“作弊模式”。它可以把更新逻辑和描述发生了什么分开。结果是，这可以帮助我移除不必需的依赖，避免不必要的effect调用。</p><h3 id="把函数移到Effects里"><a href="#把函数移到Effects里" class="headerlink" title="把函数移到Effects里"></a>把函数移到Effects里</h3><p>一个典型的误解是认为函数不应该成为依赖。举个例子，下面的代码看上去可以运行正常：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function SearchResults() {</span><br><span class="line">  const [data, setData] = useState({ hits: [] });</span><br><span class="line"></span><br><span class="line">  async function fetchData() {</span><br><span class="line">    const result = await axios(</span><br><span class="line">      'https://hn.algolia.com/api/v1/search?query=react',</span><br><span class="line">    );</span><br><span class="line">    setData(result.data);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    fetchData();</span><br><span class="line">  }, []); // Is this okay?</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>(<a href="https://codesandbox.io/s/8j4ykjyv0" target="_blank" rel="noopener">这个例子</a>改编自Robin Wieruch这篇很棒的文章 — <a href="https://www.robinwieruch.de/react-hooks-fetch-data" target="_blank" rel="noopener">点击查看</a>！)</p><p>需要明确的是，上面的代码可以正常工作。但这样做在组件日渐复杂的迭代过程中我们很难确保它在各种情况下还能正常运行。</p><p>想象一下我们的代码做下面这样的分离，并且每一个函数的体量是现在的五倍：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function SearchResults() {</span><br><span class="line">  // Imagine this function is long</span><br><span class="line">  function getFetchUrl() {</span><br><span class="line">    return 'https://hn.algolia.com/api/v1/search?query=react';</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  // Imagine this function is also long</span><br><span class="line">  async function fetchData() {</span><br><span class="line">    const result = await axios(getFetchUrl());</span><br><span class="line">    setData(result.data);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    fetchData();</span><br><span class="line">  }, []);</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后我们在某些函数内使用了某些state或者prop：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function SearchResults() {</span><br><span class="line">  const [query, setQuery] = useState('react');</span><br><span class="line"></span><br><span class="line">  // Imagine this function is also long</span><br><span class="line">  function getFetchUrl() {</span><br><span class="line">    return 'https://hn.algolia.com/api/v1/search?query=' + query;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  // Imagine this function is also long</span><br><span class="line">  async function fetchData() {</span><br><span class="line">    const result = await axios(getFetchUrl());</span><br><span class="line">    setData(result.data);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    fetchData();</span><br><span class="line">  }, []);</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果我们忘记去更新使用这些函数（很可能通过其他函数调用）的effects的依赖，我们的effects就不会同步props和state带来的变更。这当然不是我们想要的。</p><p>幸运的是，对于这个问题有一个简单的解决方案。如果某些函数仅在effect中调用，你可以把它们的定义移到effect中：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function SearchResults() {</span><br><span class="line">  // ...</span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    // We moved these functions inside!</span><br><span class="line">    function getFetchUrl() {</span><br><span class="line">      return 'https://hn.algolia.com/api/v1/search?query=react';</span><br><span class="line">    }</span><br><span class="line">    async function fetchData() {</span><br><span class="line">      const result = await axios(getFetchUrl());</span><br><span class="line">      setData(result.data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line">  }, []); // ✅ Deps are OK</span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>(这里是<a href="https://codesandbox.io/s/04kp3jwwql" target="_blank" rel="noopener">demo</a>)</p><p>这么做有什么好处呢？我们不再需要去考虑这些“间接依赖”。我们的依赖数组也不再撒谎：在我们的effect中确实没有再使用组件范围内的任何东西。</p><p>如果我们后面修改 getFetchUrl去使用query状态，我们更可能会意识到我们正在effect里面编辑它 - 因此，我们需要把query添加到effect的依赖里：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function SearchResults() {</span><br><span class="line">  const [query, setQuery] = useState('react');</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    function getFetchUrl() {</span><br><span class="line">      return 'https://hn.algolia.com/api/v1/search?query=' + query;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    async function fetchData() {</span><br><span class="line">      const result = await axios(getFetchUrl());</span><br><span class="line">      setData(result.data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line">  }, [query]); // ✅ Deps are OK</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>(这里是<a href="https://codesandbox.io/s/pwm32zx7z7" target="_blank" rel="noopener">demo</a>)</p><p>添加这个依赖，我们不仅仅是在“取悦React”。在query改变后去重新请求数据是合理的。useEffect的设计意图就是要强迫你关注数据流的改变，然后决定我们的effects该如何和它同步 - 而不是忽视它直到我们的用户遇到了bug。</p><p>感谢eslint-plugin-react-hooks 插件的exhaustive-depslint规则，它会在你<a href="https://github.com/facebook/react/issues/14920" target="_blank" rel="noopener">编码的时候就分析effects</a>并且提供可能遗漏依赖的建议。换句话说，机器会告诉你组件中哪些数据流变更没有被正确地处理。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://overreacted.io/exhaustive-deps-04a90dcbacb01105d634964880ebed19.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>非常棒。</p><h3 id="但我不能把这个函数放到Effect里"><a href="#但我不能把这个函数放到Effect里" class="headerlink" title="但我不能把这个函数放到Effect里"></a>但我不能把这个函数放到Effect里</h3><p>有时候你可能不想把函数移入effect里。比如，组件内有几个effect使用了相同的函数，你不想在每个effect里复制黏贴一遍这个逻辑。也或许这个函数是一个prop。</p><p>在这种情况下你应该忽略对函数的依赖吗？我不这么认为。再次强调，efffects不应该对它的依赖撒谎。通常我们还有更好的解决办法。一个常见的误解是，“函数从来不会改变”。但是这篇文章你读到现在，你知道这显然不是事实。实际上，在组件内定义的函数每一次渲染都在变。</p><p>函数每次渲染都会改变这个事实本身就是个问题。 比如有两个effects会调用 getFetchUrl:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function SearchResults() {</span><br><span class="line">  function getFetchUrl(query) {</span><br><span class="line">    return 'https://hn.algolia.com/api/v1/search?query=' + query;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    const url = getFetchUrl('react');</span><br><span class="line">    // ... Fetch data and do something ...</span><br><span class="line">  }, []); // 🔴 Missing dep: getFetchUrl</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    const url = getFetchUrl('redux');</span><br><span class="line">    // ... Fetch data and do something ...</span><br><span class="line">  }, []); // 🔴 Missing dep: getFetchUrl</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，你可能不想把getFetchUrl 移到effects中，因为你想复用逻辑。</p><p>另一方面，如果你对依赖很“诚实”，你可能会掉到陷阱里。我们的两个effects都依赖getFetchUrl，而它每次渲染都不同，所以我们的依赖数组会变得无用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function SearchResults() {</span><br><span class="line">  // 🔴 Re-triggers all effects on every render</span><br><span class="line">  function getFetchUrl(query) {</span><br><span class="line">    return 'https://hn.algolia.com/api/v1/search?query=' + query;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    const url = getFetchUrl('react');</span><br><span class="line">    // ... Fetch data and do something ...</span><br><span class="line">  }, [getFetchUrl]); // 🚧 Deps are correct but they change too often</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    const url = getFetchUrl('redux');</span><br><span class="line">    // ... Fetch data and do something ...</span><br><span class="line">  }, [getFetchUrl]); // 🚧 Deps are correct but they change too often</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>一个可能的解决办法是把getFetchUrl从依赖中去掉。但是，我不认为这是好的解决方式。这会使我们后面对数据流的改变很难被发现从而忘记去处理。这会导致类似于上面“定时器不更新值”的问题。</p><p>相反的，我们有两个更简单的解决办法。</p><p>第一个， 如果一个函数没有使用组件内的任何值，你应该把它提到组件外面去定义，然后就可以自由地在effects中使用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// ✅ Not affected by the data flow</span><br><span class="line">function getFetchUrl(query) {</span><br><span class="line">  return 'https://hn.algolia.com/api/v1/search?query=' + query;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function SearchResults() {</span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    const url = getFetchUrl('react');</span><br><span class="line">    // ... Fetch data and do something ...</span><br><span class="line">  }, []); // ✅ Deps are OK</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    const url = getFetchUrl('redux');</span><br><span class="line">    // ... Fetch data and do something ...</span><br><span class="line">  }, []); // ✅ Deps are OK</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>你不再需要把它设为依赖，因为它们不在渲染范围内，因此不会被数据流影响。它不可能突然意外地依赖于props或state。</p><p>或者， 你也可以把它包装成<a href="https://reactjs.org/docs/hooks-reference.html#usecallback" target="_blank" rel="noopener">useCallback Hook</a>:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function SearchResults() {</span><br><span class="line">  // ✅ Preserves identity when its own deps are the same</span><br><span class="line">  const getFetchUrl = useCallback((query) =&gt; {</span><br><span class="line">    return 'https://hn.algolia.com/api/v1/search?query=' + query;</span><br><span class="line">  }, []);  // ✅ Callback deps are OK</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    const url = getFetchUrl(‘react’);</span><br><span class="line">    // … Fetch data and do something …</span><br><span class="line">  }, [getFetchUrl]); // ✅ Effect deps are OK</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    const url = getFetchUrl(‘redux’);</span><br><span class="line">    // … Fetch data and do something …</span><br><span class="line">  }, [getFetchUrl]); // ✅ Effect deps are OK</span><br><span class="line"></span><br><span class="line">  // …</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>useCallback本质上是添加了一层依赖检查。它以另一种方式解决了问题 - 我们使函数本身只在需要的时候才改变，而不是去掉对函数的依赖。</p><p>我们来看看为什么这种方式是有用的。之前，我们的例子中展示了两种搜索结果（查询条件分别为’react’和’redux’）。但如果我们想添加一个输入框允许你输入任意的查询条件(query)。不同于传递query参数的方式，现在getFetchUrl会从状态中读取。</p><p>我们很快发现它遗漏了query依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function SearchResults() {</span><br><span class="line">  const [query, setQuery] = useState(‘react’);</span><br><span class="line">  const getFetchUrl = useCallback(() =&gt; { // No query argument</span><br><span class="line">    return ‘https://hn.algolia.com/api/v1/search?query=‘ + query;</span><br><span class="line">  }, []); // 🔴 Missing dep: query</span><br><span class="line">  // …</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果我把query添加到useCallback的依赖中，任何调用了getFetchUrl的effect在query改变后都会重新运行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function SearchResults() {</span><br><span class="line">  const [query, setQuery] = useState(‘react’);</span><br><span class="line"></span><br><span class="line">  // ✅ Preserves identity until query changes</span><br><span class="line">  const getFetchUrl = useCallback(() =&gt; {</span><br><span class="line">    return ‘https://hn.algolia.com/api/v1/search?query=‘ + query;</span><br><span class="line">  }, [query]);  // ✅ Callback deps are OK</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    const url = getFetchUrl();</span><br><span class="line">    // … Fetch data and do something …</span><br><span class="line">  }, [getFetchUrl]); // ✅ Effect deps are OK</span><br><span class="line"></span><br><span class="line">  // …</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们要感谢useCallback，因为如果query保持不变，getFetchUrl也会保持不变，我们的effect也不会重新运行。但是如果query修改了，getFetchUrl也会随之改变，因此会重新请求数据。这就像你在Excel里修改了一个单元格的值，另一个使用它的单元格会自动重新计算一样。</p><p>这正是拥抱数据流和同步思维的结果。对于通过属性从父组件传入的函数这个方法也适用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function Parent() {</span><br><span class="line">  const [query, setQuery] = useState(‘react’);</span><br><span class="line"></span><br><span class="line">  // ✅ Preserves identity until query changes</span><br><span class="line">  const fetchData = useCallback(() =&gt; {</span><br><span class="line">    const url = ‘https://hn.algolia.com/api/v1/search?query=‘ + query;</span><br><span class="line">    // … Fetch data and return it …</span><br><span class="line">  }, [query]);  // ✅ Callback deps are OK</span><br><span class="line"></span><br><span class="line">  return &lt;Child fetchData={fetchData} /&gt;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function Child({ fetchData }) {</span><br><span class="line">  let [data, setData] = useState(null);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    fetchData().then(setData);</span><br><span class="line">  }, [fetchData]); // ✅ Effect deps are OK</span><br><span class="line"></span><br><span class="line">  // …</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>因为fetchData只有在Parent的query状态变更时才会改变，所以我们的Child只会在需要的时候才去重新请求数据。</p><h3 id="函数是数据流的一部分吗？"><a href="#函数是数据流的一部分吗？" class="headerlink" title="函数是数据流的一部分吗？"></a>函数是数据流的一部分吗？</h3><p>有趣的是，这种模式在class组件中行不通，并且这种行不通恰到好处地揭示了effect和生命周期范式之间的区别。考虑下面的转换：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Parent extends Component {</span><br><span class="line">  state = {</span><br><span class="line">    query: ‘react’</span><br><span class="line">  };</span><br><span class="line">  fetchData = () =&gt; {</span><br><span class="line">    const url = ‘https://hn.algolia.com/api/v1/search?query=‘ + this.state.query;</span><br><span class="line">    // … Fetch data and do something …</span><br><span class="line">  };</span><br><span class="line">  render() {</span><br><span class="line">    return &lt;Child fetchData={this.fetchData} /&gt;;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class Child extends Component {</span><br><span class="line">  state = {</span><br><span class="line">    data: null</span><br><span class="line">  };</span><br><span class="line">  componentDidMount() {</span><br><span class="line">    this.props.fetchData();</span><br><span class="line">  }</span><br><span class="line">  render() {</span><br><span class="line">    // …</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>你可能会想：“少来了Dan，我们都知道useEffect就像componentDidMount和componentDidUpdate的结合，你不能老是破坏这一条！”好吧，就算加了componentDidUpdate照样无用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Child extends Component {</span><br><span class="line">  state = {</span><br><span class="line">    data: null</span><br><span class="line">  };</span><br><span class="line">  componentDidMount() {</span><br><span class="line">    this.props.fetchData();</span><br><span class="line">  }</span><br><span class="line">  componentDidUpdate(prevProps) {</span><br><span class="line">    // 🔴 This condition will never be true</span><br><span class="line">    if (this.props.fetchData !== prevProps.fetchData) {</span><br><span class="line">      this.props.fetchData();</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  render() {</span><br><span class="line">    // …</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当然如此，fetchData是一个class方法！（或者你也可以说是class属性 - 但这不能改变什么。）它不会因为状态的改变而不同，所以this.props.fetchData和 prevProps.fetchData始终相等，因此不会重新请求。那我们删掉条件判断怎么样？</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps) {</span><br><span class="line">  this.props.fetchData();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>等等，这样会在每次渲染后都去请求。(添加一个加载动画可能是一种有趣的发现这种情况的方式。)也许我们可以绑定一个特定的query?</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render() {</span><br><span class="line">  return &lt;Child fetchData={this.fetchData.bind(this, this.state.query)} /&gt;;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但这样一来，this.props.fetchData !== prevProps.fetchData表达式永远是true，即使query并未改变。这会导致我们总是去请求。</p><p>想要解决这个class组件中的难题，唯一现实可行的办法是硬着头皮把query本身传入Child组件。 Child虽然实际并没有直接使用这个query的值，但能在它改变的时候触发一次重新请求：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Parent extends Component {</span><br><span class="line">  state = {</span><br><span class="line">    query: ‘react’</span><br><span class="line">  };</span><br><span class="line">  fetchData = () =&gt; {</span><br><span class="line">    const url = ‘https://hn.algolia.com/api/v1/search?query=‘ + this.state.query;</span><br><span class="line">    // … Fetch data and do something …</span><br><span class="line">  };</span><br><span class="line">  render() {</span><br><span class="line">    return &lt;Child fetchData={this.fetchData} query={this.state.query} /&gt;;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class Child extends Component {</span><br><span class="line">  state = {</span><br><span class="line">    data: null</span><br><span class="line">  };</span><br><span class="line">  componentDidMount() {</span><br><span class="line">    this.props.fetchData();</span><br><span class="line">  }</span><br><span class="line">  componentDidUpdate(prevProps) {</span><br><span class="line">    if (this.props.query !== prevProps.query) {</span><br><span class="line">      this.props.fetchData();</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  render() {</span><br><span class="line">    // …</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在使用React的class组件这么多年后，我已经如此习惯于把不必要的props传递下去并且破坏父组件的封装以至于我在一周之前才意识到我为什么一定要这样做。</p><p>在class组件中，函数属性本身并不是数据流的一部分。组件的方法中包含了可变的this变量导致我们不能确定无疑地认为它是不变的。因此，即使我们只需要一个函数，我们也必须把一堆数据传递下去仅仅是为了做“diff”。我们无法知道传入的this.props.fetchData是否依赖状态，并且不知道它依赖的状态是否改变了。</p><p>使用useCallback，函数完全可以参与到数据流中。我们可以说如果一个函数的输入改变了，这个函数就改变了。如果没有，函数也不会改变。感谢周到的useCallback，属性比如props.fetchData的改变也会自动传递下去。</p><p>类似的，<a href="https://reactjs.org/docs/hooks-reference.html#usememo" target="_blank" rel="noopener">useMemo</a>可以让我们对复杂对象做类似的事情。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function ColorPicker() {</span><br><span class="line">  // Doesn’t break Child’s shallow equality prop check</span><br><span class="line">  // unless the color actually changes.</span><br><span class="line">  const [color, setColor] = useState(‘pink’);</span><br><span class="line">  const style = useMemo(() =&gt; ({ color }), [color]);</span><br><span class="line">  return &lt;Child style={style} /&gt;;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我想强调的是，到处使用useCallback是件挺笨拙的事。当我们需要将函数传递下去并且函数会在子组件的effect中被调用的时候，useCallback是很好的技巧且非常有用。或者你想试图减少对子组件的记忆负担，也不妨一试。但总的来说Hooks本身能更好地<a href="https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down" target="_blank" rel="noopener">避免传递回调函数</a>。</p><p>在上面的例子中，我更倾向于把fetchData放在我的effect里（它可以抽离成一个自定义Hook）或者是从顶层引入。我想让effects保持简单，而在里面调用回调会让事情变得复杂。（“如果某个props.onComplete回调改变了而请求还在进行中会怎么样？”）你可以模拟class的行为但那样并不能解决竞态的问题。</p><h3 id="说说竞态"><a href="#说说竞态" class="headerlink" title="说说竞态"></a>说说竞态</h3><p>下面是一个典型的在class组件里发请求的例子：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Article extends Component {</span><br><span class="line">  state = {</span><br><span class="line">    article: null</span><br><span class="line">  };</span><br><span class="line">  componentDidMount() {</span><br><span class="line">    this.fetchData(this.props.id);</span><br><span class="line">  }</span><br><span class="line">  async fetchData(id) {</span><br><span class="line">    const article = await API.fetchArticle(id);</span><br><span class="line">    this.setState({ article });</span><br><span class="line">  }</span><br><span class="line">  // …</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>你很可能已经知道，上面的代码埋伏了一些问题。它并没有处理更新的情况。所以第二个你能够在网上找到的经典例子是下面这样的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Article extends Component {</span><br><span class="line">  state = {</span><br><span class="line">    article: null</span><br><span class="line">  };</span><br><span class="line">  componentDidMount() {</span><br><span class="line">    this.fetchData(this.props.id);</span><br><span class="line">  }</span><br><span class="line">  componentDidUpdate(prevProps) {</span><br><span class="line">    if (prevProps.id !== this.props.id) {</span><br><span class="line">      this.fetchData(this.props.id);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  async fetchData(id) {</span><br><span class="line">    const article = await API.fetchArticle(id);</span><br><span class="line">    this.setState({ article });</span><br><span class="line">  }</span><br><span class="line">  // …</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这显然好多了！但依旧有问题。有问题的原因是请求结果返回的顺序不能保证一致。比如我先请求 {id: 10}，然后更新到{id: 20}，但{id: 20}的请求更先返回。请求更早但返回更晚的情况会错误地覆盖状态值。</p><p>这被叫做竞态，这在混合了async / await（假设在等待结果返回）和自顶向下数据流的代码中非常典型（props和state可能会在async函数调用过程中发生改变）。</p><p>Effects并没有神奇地解决这个问题，尽管它会警告你如果你直接传了一个async函数给effect。（我们会改善这个警告来更好地解释你可能会遇到的这些问题。）</p><p>如果你使用的异步方式支持取消，那太棒了。你可以直接在清除函数中取消异步请求。</p><p>或者，最简单的权宜之计是用一个布尔值来跟踪它：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function Article({ id }) {</span><br><span class="line">  const [article, setArticle] = useState(null);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    let didCancel = false;</span><br><span class="line"></span><br><span class="line">    async function fetchData() {</span><br><span class="line">      const article = await API.fetchArticle(id);</span><br><span class="line">      if (!didCancel) {</span><br><span class="line">        setArticle(article);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line"></span><br><span class="line">    return () =&gt; {</span><br><span class="line">      didCancel = true;</span><br><span class="line">    };</span><br><span class="line">  }, [id]);</span><br><span class="line"></span><br><span class="line">  // …</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://www.robinwieruch.de/react-hooks-fetch-data" target="_blank" rel="noopener">这篇文章</a>讨论了更多关于如何处理错误和加载状态，以及抽离逻辑到自定义的Hook。我推荐你认真阅读一下如果你想学习更多关于如何在Hooks里请求数据的内容。</p><h3 id="提高水准"><a href="#提高水准" class="headerlink" title="提高水准"></a>提高水准</h3><p>在class组件生命周期的思维模型中，副作用的行为和渲染输出是不同的。UI渲染是被props和state驱动的，并且能确保步调一致，但副作用并不是这样。这是一类常见问题的来源。</p><p>而在useEffect的思维模型中，默认都是同步的。副作用变成了React数据流的一部分。对于每一个useEffect调用，一旦你处理正确，你的组件能够更好地处理边缘情况。</p><p>然而，用好useEffect的前期学习成本更高。这可能让人气恼。用同步的代码去处理边缘情况天然就比触发一次不用和渲染结果步调一致的副作用更难。</p><p>这难免让人担忧如果useEffect是你现在使用最多的工具。不过，目前大抵还处理低水平使用阶段。因为Hooks太新了所以大家都还在低水平地使用它，尤其是在一些教程示例中。但在实践中，社区很可能即将开始高水平地使用Hooks，因为好的API会有更好的动量和冲劲。</p><p>我看到不同的应用在创造他们自己的Hooks，比如封装了应用鉴权逻辑的useFetch或者使用theme context的useTheme 。你一旦有了包含这些的工具箱，你就不会那么频繁地直接使用useEffect。但每一个基于它的Hook都能从它的适应能力中得到益处。</p><p>目前为止，useEffect主要用于数据请求。但是数据请求准确说并不是一个同步问题。因为我们的依赖经常是[]所以这一点尤其明显。那我们究竟在同步什么？</p><p>长远来看， <a href="https://reactjs.org/blog/2018/11/27/react-16-roadmap.html#react-16x-mid-2019-the-one-with-suspense-for-data-fetching" target="_blank" rel="noopener">Suspense用于数据请求</a>会允许第三方库通过第一等的途径告诉React暂停渲染直到某些异步事物（任何东西：代码，数据，图片）已经准备就绪。</p><p>当Suspense逐渐地覆盖到更多的数据请求使用场景，我预料useEffect会退居幕后作为一个强大的工具，用于同步props和state到某些副作用。不像数据请求，它可以很好地处理这些场景因为它就是为此而设计的。不过在那之前，自定义的Hooks比如<a href="https://www.robinwieruch.de/react-hooks-fetch-data" target="_blank" rel="noopener">这儿提到的</a>是复用数据请求逻辑很好的方式。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>原文作者：Dan Abramov<br>原文链接：<a href="https://overreacted.io/a-complete-guide-to-useeffect/" target="_blank" rel="noopener">https://overreacted.io/a-complete-guide-to-useeffect/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Hooks系列之useEffect（三）&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://lry61.cn/blog/categories/React/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks系列之useEffect（二）</title>
    <link href="http://lry61.cn/blog//posts/7/"/>
    <id>http://lry61.cn/blog//posts/7/</id>
    <published>2019-12-25T05:36:10.603Z</published>
    <updated>2019-12-25T08:35:32.205Z</updated>
    
    <content type="html"><![CDATA[<p>React Hooks系列之useEffect（二）</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>到目前为止，我们可以明确地喊出下面重要的事实：每一个组件内的函数（包括事件处理函数，effects，定时器或者API调用等等）会捕获某次渲染中定义的props和state。</p><p>所以下面的两个例子是相等的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Example(props) {</span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    setTimeout(() =&gt; {</span><br><span class="line">      console.log(props.counter);</span><br><span class="line">    }, 1000);</span><br><span class="line">  });</span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Example(props) {</span><br><span class="line">  const counter = props.counter;</span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    setTimeout(() =&gt; {</span><br><span class="line">      console.log(counter);</span><br><span class="line">    }, 1000);</span><br><span class="line">  });</span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在组件内什么时候去读取props或者state是无关紧要的。因为它们不会改变。在单次渲染的范围内，props和state始终保持不变。（解构赋值的props使得这一点更明显。）</p><p>当然，有时候你可能想在effect的回调函数里读取最新的值而不是捕获的值。最简单的实现方法是使用refs，<a href="https://overreacted.io/how-are-function-components-different-from-classes/" target="_blank" rel="noopener">这篇文章</a>的最后一部分介绍了相关内容。</p><p>需要注意的是当你想要从过去渲染中的函数里读取未来的props和state，你是在逆潮而动。虽然它并没有错（有时候可能也需要这样做），但它因为打破了默认范式会使代码显得不够“干净”。这是我们有意为之的，因为它能帮助突出哪些代码是脆弱的，是需要依赖时间次序的。在class中，如果发生这种情况就没那么显而易见了。</p><p>下面这个<a href="https://codesandbox.io/s/rm7z22qnlp" target="_blank" rel="noopener">计数器版本</a>模拟了class中的行为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Example() {</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  const latestCount = useRef(count);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    // Set the mutable latest value</span><br><span class="line">    latestCount.current = count;</span><br><span class="line">    setTimeout(() =&gt; {</span><br><span class="line">      // Read the mutable latest value</span><br><span class="line">      console.log(`You clicked ${latestCount.current} times`);</span><br><span class="line">    }, 3000);</span><br><span class="line">  });</span><br><span class="line">  // ...</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://overreacted.io/timeout_counter_refs-78f7948263dd13b023498b23cb99f4fc.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在React中去直接修改值看上去有点怪异。然而，在class组件中React正是这样去修改this.state的。不像捕获的props和state，你没法保证在任意一个回调函数中读取的latestCount.current是不变的。根据定义，你可以随时修改它。这就是为什么它不是默认行为，而是需要你主动选择这样做。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Effect中的清理"><a href="#Effect中的清理" class="headerlink" title="Effect中的清理"></a>Effect中的清理</h3><p>像<a href="https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup" target="_blank" rel="noopener">文档中解释的</a>, 有些effects可能需要有一个清理步骤。本质上，它的目的是消除副作用（effect)，比如取消订阅。</p><p>思考下面的代码:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() =&gt; {</span><br><span class="line">  ChatAPI.subscribeToFriendStatus(props.id, handleStatusChange);</span><br><span class="line">  return () =&gt; {</span><br><span class="line">    ChatAPI.unsubscribeFromFriendStatus(props.id, handleStatusChange);</span><br><span class="line">  };</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>假设第一次渲染的时候props是{id: 10}，第二次渲染的时候是{id: 20}。你可能会认为发生了下面的这些事：</p><ul><li>React 清除了 {id: 10}的effect。</li><li>React 渲染{id: 20}的UI。</li><li>React 运行{id: 20}的effect。</li></ul><p>(事实并不是这样。)</p><p>如果依赖这种心智模型，你可能会认为清除过程“看到”的是旧的props因为它是在重新渲染之前运行的，新的effect“看到”的是新的props因为它是在重新渲染之后运行的。这种心智模型直接来源于class组件的生命周期。不过它并不精确。让我们来一探究竟。</p><p>React只会在<a href="https://medium.com/@dan_abramov/this-benchmark-is-indeed-flawed-c3d6b5b6f97f" target="_blank" rel="noopener">浏览器绘制</a>后运行effects。这使得你的应用更流畅因为大多数effects并不会阻塞屏幕的更新。Effect的清除同样被延迟了。<strong>上一次的effect会在重新渲染后被清除</strong>：</p><ul><li>React 渲染{id: 20}的UI。</li><li>浏览器绘制。我们在屏幕上看到{id: 20}的UI。</li><li>React 清除{id: 10}的effect。</li><li>React 运行{id: 20}的effect。</li></ul><p>你可能会好奇：如果清除上一次的effect发生在props变成{id: 20}之后，那它为什么还能“看到”旧的{id: 10}？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://overreacted.io/deja_vu-5fe238cf03a21dfa32af624124fcdcff.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>引用上一章得到的结论:</p><blockquote><p>组件内的每一个函数（包括事件处理函数，effects，定时器或者API调用等等）会捕获定义它们的那次渲染中的props和state。</p></blockquote><p>现在答案显而易见。effect的清除并不会读取“最新”的props。它只能读取到定义它的那次渲染中的props值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// First render, props are {id: 10}</span><br><span class="line">function Example() {</span><br><span class="line">  // ...</span><br><span class="line">  useEffect(</span><br><span class="line">    // Effect from first render</span><br><span class="line">    () =&gt; {</span><br><span class="line">      ChatAPI.subscribeToFriendStatus(10, handleStatusChange);</span><br><span class="line">      // Cleanup for effect from first render</span><br><span class="line">      return () =&gt; {</span><br><span class="line">        ChatAPI.unsubscribeFromFriendStatus(10, handleStatusChange);</span><br><span class="line">      };</span><br><span class="line">    }</span><br><span class="line">  );</span><br><span class="line">  // ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// Next render, props are {id: 20}</span><br><span class="line">function Example() {</span><br><span class="line">  // ...</span><br><span class="line">  useEffect(</span><br><span class="line">    // Effect from second render</span><br><span class="line">    () =&gt; {</span><br><span class="line">      ChatAPI.subscribeToFriendStatus(20, handleStatusChange);</span><br><span class="line">      // Cleanup for effect from second render</span><br><span class="line">      return () =&gt; {</span><br><span class="line">        ChatAPI.unsubscribeFromFriendStatus(20, handleStatusChange);</span><br><span class="line">      };</span><br><span class="line">    }</span><br><span class="line">  );</span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>王国会崛起转而复归尘土，太阳会脱落外层变为白矮星，最后的文明也迟早会结束。但是第一次渲染中effect的清除函数只能看到{id: 10}这个props。</p><p>这正是为什么React能做到在绘制后立即处理effects — 并且默认情况下使你的应用运行更流畅。如果你的代码需要依然可以访问到老的props。</p><h3 id="同步，-而非生命周期"><a href="#同步，-而非生命周期" class="headerlink" title="同步， 而非生命周期"></a>同步， 而非生命周期</h3><p>我最喜欢React的一点是它统一描述了初始渲染和之后的更新。这降低了你程序的<a href="https://overreacted.io/the-bug-o-notation/" target="_blank" rel="noopener">熵</a>。</p><p>比如我有个组件像下面这样：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Greeting({ name }) {</span><br><span class="line">  return (</span><br><span class="line">    &lt;h1 className="Greeting"&gt;</span><br><span class="line">      Hello, {name}</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我先渲染<code>&lt;Greeting name="Dan" /&gt;</code>然后渲染<code>&lt;Greeting name="Yuzhi" /&gt;</code>，和我直接渲染<code>&lt;Greeting name="Yuzhi" /&gt;</code>并没有什么区别。在这两种情况中，我最后看到的都是“Hello, Yuzhi”。</p><p>人们总是说：“重要的是旅行过程，而不是目的地”。在React世界中，恰好相反。重要的是目的，而不是过程。这就是JQuery代码中<code>$.addClass</code>或<code>$.removeClass</code>这样的调用（过程）和React代码中声明CSS类名应该是什么（目的）之间的区别。</p><p>React会根据我们当前的props和state同步到DOM。“mount”和“update”之于渲染并没有什么区别。</p><p>你应该以相同的方式去思考effects。useEffect使你能够根据props和state同步React tree之外的东西。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Greeting({ name }) {</span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    document.title = 'Hello, ' + name;</span><br><span class="line">  });</span><br><span class="line">  return (</span><br><span class="line">    &lt;h1 className="Greeting"&gt;</span><br><span class="line">      Hello, {name}</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这就是和大家熟知的mount/update/unmount心智模型之间细微的区别。理解和内化这种区别是非常重要的。如果你试图写一个effect会根据是否第一次渲染而表现不一致，你正在逆潮而动。如果我们的结果依赖于过程而不是目的，我们会在同步中犯错。</p><p>先渲染属性A，B再渲染C，和立即渲染C并没有什么区别。虽然他们可能短暂地会有点不同（比如请求数据时），但最终的结果是一样的。</p><p>不过话说回来，在每一次渲染后都去运行所有的effects可能并不高效。（并且在某些场景下，它可能会导致无限循环。）</p><p>所以我们该怎么解决这个问题？</p><h3 id="告诉React去比对你的Effects"><a href="#告诉React去比对你的Effects" class="headerlink" title="告诉React去比对你的Effects"></a>告诉React去比对你的Effects</h3><p>其实我们已经从React处理DOM的方式中学习到了解决办法。React只会更新DOM真正发生改变的部分，而不是每次渲染都大动干戈。</p><p>当你把</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 className="Greeting"&gt;</span><br><span class="line">  Hello, Dan</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></tbody></table></figure><p>更新到</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 className="Greeting"&gt;</span><br><span class="line">  Hello, Yuzhi</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></tbody></table></figure><p>React 能够看到两个对象:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const oldProps = {className: 'Greeting', children: 'Hello, Dan'};</span><br><span class="line">const newProps = {className: 'Greeting', children: 'Hello, Yuzhi'};</span><br></pre></td></tr></tbody></table></figure><p>它会检测每一个props，并且发现children发生改变需要更新DOM，但className并没有。所以它只需要这样做：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">domNode.innerText = 'Hello, Yuzhi';</span><br><span class="line">// No need to touch domNode.className</span><br></pre></td></tr></tbody></table></figure><p>我们也可以用类似的方式处理effects吗？如果能够在不需要的时候避免调用effect就太好了。</p><p>举个例子，我们的组件可能因为状态变更而重新渲染：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Greeting({ name }) {</span><br><span class="line">  const [counter, setCounter] = useState(0);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    document.title = 'Hello, ' + name;</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;h1 className="Greeting"&gt;</span><br><span class="line">      Hello, {name}</span><br><span class="line">      &lt;button onClick={() =&gt; setCounter(counter + 1)}&gt;</span><br><span class="line">        Increment</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但是我们的effect并没有使用counter这个状态。我们的effect只会同步name属性给document.title，但name并没有变。在每一次counter改变后重新给document.title赋值并不是理想的做法。</p><p>好了，那React可以区分effects的不同吗？</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let oldEffect = () =&gt; { document.title = 'Hello, Dan'; };</span><br><span class="line">let newEffect = () =&gt; { document.title = 'Hello, Dan'; };</span><br><span class="line">// Can React see these functions do the same thing?</span><br></pre></td></tr></tbody></table></figure><p>并不能。React并不能猜测到函数做了什么如果不先调用的话。（源码中并没有包含特殊的值，它仅仅是引用了name属性。）</p><p>这是为什么你如果想要避免effects不必要的重复调用，你可以提供给useEffect一个依赖数组参数(deps)：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() =&gt; {</span><br><span class="line">  document.title = 'Hello, ' + name;</span><br><span class="line">}, [name]); // Our deps</span><br></pre></td></tr></tbody></table></figure><p>这好比你告诉React：“Hey，我知道你看不到这个函数里的东西，但我可以保证只使用了渲染中的name，别无其他。”</p><p>如果当前渲染中的这些依赖项和上一次运行这个effect的时候值一样，因为没有什么需要同步React会自动跳过这次effect：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const oldEffect = () =&gt; { document.title = 'Hello, Dan'; };</span><br><span class="line">const oldDeps = ['Dan'];</span><br><span class="line"></span><br><span class="line">const newEffect = () =&gt; { document.title = 'Hello, Dan'; };</span><br><span class="line">const newDeps = ['Dan'];</span><br><span class="line"></span><br><span class="line">// React can't peek inside of functions, but it can compare deps.</span><br><span class="line">// Since all deps are the same, it doesn’t need to run the new effect.</span><br></pre></td></tr></tbody></table></figure><p>即使依赖数组中只有一个值在两次渲染中不一样，我们也不能跳过effect的运行。要同步所有！</p><h3 id="关于依赖项不要对React撒谎"><a href="#关于依赖项不要对React撒谎" class="headerlink" title="关于依赖项不要对React撒谎"></a>关于依赖项不要对React撒谎</h3><p>关于依赖项对React撒谎会有不好的结果。直觉上，这很好理解，但我曾看到几乎所有依赖class心智模型使用useEffect的人都试图违反这个规则。（我刚开始也这么干了！）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function SearchResults() {</span><br><span class="line">  async function fetchData() {</span><br><span class="line">    // ...</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    fetchData();</span><br><span class="line">  }, []); // Is this okay? Not always -- and there's a better way to write it.</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>(官网的<a href="https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies" target="_blank" rel="noopener">Hooks FAQ</a>解释了应该怎么做。 我们在下面会重新回顾这个例子。)</p><p>“但我只是想在挂载的时候运行它！”，你可能会说。现在只需要记住：如果你设置了依赖项，effect中用到的所有组件内的值都要包含在依赖中。这包括props，state，函数 — 组件内的任何东西。</p><p>有时候你是这样做了，但可能会引起一个问题。比如，你可能会遇到无限请求的问题，或者socket被频繁创建的问题。解决问题的方法不是移除依赖项。我们会很快了解具体的解决方案。</p><p>不过在我们深入解决方案之前，我们先尝试更好地理解问题。</p><h3 id="如果设置了错误的依赖会怎么样呢？"><a href="#如果设置了错误的依赖会怎么样呢？" class="headerlink" title="如果设置了错误的依赖会怎么样呢？"></a>如果设置了错误的依赖会怎么样呢？</h3><p>如果依赖项包含了所有effect中使用到的值，React就能知道何时需要运行它：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() =&gt; {</span><br><span class="line">  document.title = 'Hello, ' + name;</span><br><span class="line">}, [name]);</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://overreacted.io/deps-compare-correct-fae247cd068eedbd4b62ba50592d2b3d.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>(依赖发生了变更，所以会重新运行effect。)</p><p>但是如果我们将[]设为effect的依赖，新的effect函数不会运行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() =&gt; {</span><br><span class="line">  document.title = 'Hello, ' + name;</span><br><span class="line">}, []); // Wrong: name is missing in deps</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://overreacted.io/deps-compare-wrong-25f75db3f9f57ffe1426912093577445.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>(依赖没有变，所以不会再次运行effect。)</p><p>在这个例子中，问题看起来显而易见。但在某些情况下如果你脑子里“跳出”class组件的解决办法，你的直觉很可能会欺骗你。</p><p>举个例子，我们来写一个每秒递增的计数器。在Class组件中，我们的直觉是：“开启一次定时器，清除也是一次”。这里有一个<a href="https://codesandbox.io/s/n5mjzjy9kl" target="_blank" rel="noopener">例子</a>说明怎么实现它。当我们理所当然地把它用useEffect的方式翻译，直觉上我们会设置依赖为[]。“我只想运行一次effect”，对吗？</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Counter() {</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    const id = setInterval(() =&gt; {</span><br><span class="line">      setCount(count + 1);</span><br><span class="line">    }, 1000);</span><br><span class="line">    return () =&gt; clearInterval(id);</span><br><span class="line">  }, []);</span><br><span class="line"></span><br><span class="line">  return &lt;h1&gt;{count}&lt;/h1&gt;;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然而，这个例子<a href="https://codesandbox.io/s/91n5z8jo7r" target="_blank" rel="noopener">只会递增一次</a>。天了噜。</p><p>如果你的心智模型是“只有当我想重新触发effect的时候才需要去设置依赖”，这个例子可能会让你产生存在危机。你想要触发一次因为它是定时器 — 但为什么会有问题？</p><p>如果你知道依赖是我们给React的暗示，告诉它effect所有需要使用的渲染中的值，你就不会吃惊了。effect中使用了count但我们撒谎说它没有依赖。如果我们这样做迟早会出幺蛾子。</p><p>在第一次渲染中，count是0。因此，setCount(count + 1)在第一次渲染中等价于setCount(0 + 1)。既然我们设置了[]依赖，effect不会再重新运行，它后面每一秒都会调用setCount(0 + 1) ：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// First render, state is 0</span><br><span class="line">function Counter() {</span><br><span class="line">  // ...</span><br><span class="line">  useEffect(</span><br><span class="line">    // Effect from first render</span><br><span class="line">    () =&gt; {</span><br><span class="line">      const id = setInterval(() =&gt; {</span><br><span class="line">        setCount(0 + 1); // Always setCount(1)</span><br><span class="line">      }, 1000);</span><br><span class="line">      return () =&gt; clearInterval(id);</span><br><span class="line">    },</span><br><span class="line">    [] // Never re-runs</span><br><span class="line">  );</span><br><span class="line">  // ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// Every next render, state is 1</span><br><span class="line">function Counter() {</span><br><span class="line">  // ...</span><br><span class="line">  useEffect(</span><br><span class="line">    // This effect is always ignored because</span><br><span class="line">    // we lied to React about empty deps.</span><br><span class="line">    () =&gt; {</span><br><span class="line">      const id = setInterval(() =&gt; {</span><br><span class="line">        setCount(1 + 1);</span><br><span class="line">      }, 1000);</span><br><span class="line">      return () =&gt; clearInterval(id);</span><br><span class="line">    },</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们对React撒谎说我们的effect不依赖组件内的任何值，可实际上我们的effect有依赖！</p><p>我们的effect依赖count - 它是组件内的值（不过在effect外面定义）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const count = // ...</span><br><span class="line"></span><br><span class="line">useEffect(() =&gt; {</span><br><span class="line">  const id = setInterval(() =&gt; {</span><br><span class="line">    setCount(count + 1);</span><br><span class="line">  }, 1000);</span><br><span class="line">  return () =&gt; clearInterval(id);</span><br><span class="line">}, []);</span><br></pre></td></tr></tbody></table></figure><p>因此，设置[]为依赖会引入一个bug。React会对比依赖，并且跳过后面的effect：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://overreacted.io/interval-wrong-29e53bd0c9b7d2ac70d3cd924886b030.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>(依赖没有变，所以不会再次运行effect。)</p><p>类似于这样的问题是很难被想到的。因此，我鼓励你将诚实地告知effect依赖作为一条硬性规则，并且要列出所以依赖。（我们提供了一个<a href="https://github.com/facebook/react/issues/14920" target="_blank" rel="noopener">lint规则</a>如果你想在你的团队内做硬性规定。）</p><h3 id="两种诚实告知依赖的方法"><a href="#两种诚实告知依赖的方法" class="headerlink" title="两种诚实告知依赖的方法"></a>两种诚实告知依赖的方法</h3><p>有两种诚实告知依赖的策略。你应该从第一种开始，然后在需要的时候应用第二种。</p><p>第一种策略是在依赖中包含所有effect中用到的组件内的值。让我们在依赖中包含count：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() =&gt; {</span><br><span class="line">  const id = setInterval(() =&gt; {</span><br><span class="line">    setCount(count + 1);</span><br><span class="line">  }, 1000);</span><br><span class="line">  return () =&gt; clearInterval(id);</span><br><span class="line">}, [count]);</span><br></pre></td></tr></tbody></table></figure><p>现在依赖数组正确了。虽然它可能不是太理想但确实解决了上面的问题。现在，每次count修改都会重新运行effect，并且定时器中的setCount(count + 1)会正确引用某次渲染中的 count值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// First render, state is 0</span><br><span class="line">function Counter() {</span><br><span class="line">  // ...</span><br><span class="line">  useEffect(</span><br><span class="line">    // Effect from first render</span><br><span class="line">    () =&gt; {</span><br><span class="line">      const id = setInterval(() =&gt; {</span><br><span class="line">        setCount(0 + 1); // setCount(count + 1)</span><br><span class="line">      }, 1000);</span><br><span class="line">      return () =&gt; clearInterval(id);</span><br><span class="line">    },</span><br><span class="line">    [0] // [count]</span><br><span class="line">  );</span><br><span class="line">  // ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// Second render, state is 1</span><br><span class="line">function Counter() {</span><br><span class="line">  // ...</span><br><span class="line">  useEffect(</span><br><span class="line">    // Effect from second render</span><br><span class="line">    () =&gt; {</span><br><span class="line">      const id = setInterval(() =&gt; {</span><br><span class="line">        setCount(1 + 1); // setCount(count + 1)</span><br><span class="line">      }, 1000);</span><br><span class="line">      return () =&gt; clearInterval(id);</span><br><span class="line">    },</span><br><span class="line">    [1] // [count]</span><br><span class="line">  );</span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这能<a href="https://codesandbox.io/s/0x0mnlyq8l" target="_blank" rel="noopener">解决问题</a>但是我们的定时器会在每一次count改变后清除和重新设定。这应该不是我们想要的结果：</p><p><a href="https://overreacted.io/interval-rightish-5734271ddfa94d2d65ac6160515e0069.gif" target="_blank" rel="noopener"></a></p><p>(依赖发生了变更，所以会重新运行effect。)</p><p>第二种策略是修改effect内部的代码以确保它包含的值只会在需要的时候发生变更。我们不想告知错误的依赖 - 我们只是修改effect使得依赖更少。</p><p>让我们来看一些移除依赖的常用技巧。</p><h3 id="让Effects自给自足"><a href="#让Effects自给自足" class="headerlink" title="让Effects自给自足"></a>让Effects自给自足</h3><p>我们想去掉effect的count依赖。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() =&gt; {</span><br><span class="line">  const id = setInterval(() =&gt; {</span><br><span class="line">    setCount(count + 1);</span><br><span class="line">  }, 1000);</span><br><span class="line">  return () =&gt; clearInterval(id);</span><br><span class="line">}, [count]);</span><br></pre></td></tr></tbody></table></figure><p>为了实现这个目的，我们需要问自己一个问题：我们为什么要用count？可以看到我们只在setCount调用中用到了count。在这个场景中，我们其实并不需要在effect中使用count。当我们想要根据前一个状态更新状态的时候，我们可以使用setState的<a href="https://reactjs.org/docs/hooks-reference.html#functional-updates" target="_blank" rel="noopener">函数形式</a>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() =&gt; {</span><br><span class="line">  const id = setInterval(() =&gt; {</span><br><span class="line">    setCount(c =&gt; c + 1);</span><br><span class="line">  }, 1000);</span><br><span class="line">  return () =&gt; clearInterval(id);</span><br><span class="line">}, []);</span><br></pre></td></tr></tbody></table></figure><p>我喜欢把类似这种情况称为“错误的依赖”。是的，因为我们在effect中写了setCount(count + 1)所以count是一个必需的依赖。但是，我们真正想要的是把count转换为count+1，然后返回给React。可是React其实已经知道当前的count。我们需要告知React的仅仅是去递增状态 - 不管它现在具体是什么值。</p><p>这正是setCount(c =&gt; c + 1)做的事情。你可以认为它是在给React“发送指令”告知如何更新状态。这种“更新形式”在其他情况下也有帮助，比如你需要<a href="https://overreacted.io/react-as-a-ui-runtime/#batching" target="_blank" rel="noopener">批量更新</a>。</p><p>注意我们做到了移除依赖，并且没有撒谎。我们的effect不再读取渲染中的count值。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://overreacted.io/interval-right-f128ad20c28317ed27a3cb68197fc906.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>(依赖没有变，所以不会再次运行effect。)</p><p>你可以自己<a href="https://codesandbox.io/s/q3181xz1pj" target="_blank" rel="noopener">试试</a>。</p><p>尽管effect只运行了一次，第一次渲染中的定时器回调函数可以完美地在每次触发的时候给React发送c =&gt; c + 1更新指令。它不再需要知道当前的count值。因为React已经知道了。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>原文作者：Dan Abramov<br>原文链接：<a href="https://overreacted.io/a-complete-guide-to-useeffect/" target="_blank" rel="noopener">https://overreacted.io/a-complete-guide-to-useeffect/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Hooks系列之useEffect（二）&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://lry61.cn/blog/categories/React/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks系列之useEffect（一）</title>
    <link href="http://lry61.cn/blog//posts/6/"/>
    <id>http://lry61.cn/blog//posts/6/</id>
    <published>2019-12-17T11:47:08.984Z</published>
    <updated>2019-12-25T05:23:56.927Z</updated>
    
    <content type="html"><![CDATA[<p>React Hooks系列之useEffect（一）</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>你用Hooks写了一些组件，甚或写了一个小型应用。你可能很满意，使用它的API很舒服并且在这个过程中获得了一些小技巧。你甚至可能写了一些<a href="https://reactjs.org/docs/hooks-custom.html" target="_blank" rel="noopener">custom Hooks</a>去抽离重复的逻辑（精简掉了300行代码），并且得意地展示给你的同事看，“干得漂亮”，他们如是说。</p><p>但有时候当你使用useEffect你总觉得哪儿有点不对劲。你会嘀咕你可能遗漏了什么。它看起来像class的生命周期…但真的是这样吗？你发觉自己在问类似下面的这些问题：</p><ul><li>🤔 如何用useEffect模拟componentDidMount生命周期？</li><li>🤔 如何正确地在useEffect里请求数据？[]又是什么？</li><li>🤔 我应该把函数当做effect的依赖吗？</li><li>🤔 为什么有时候会出现无限重复请求的问题？</li><li>🤔 为什么有时候在effect里拿到的是旧的state或prop？</li></ul><p>当我刚开始使用Hooks的时候，我也同样被上面这些问题所困扰。甚至当我写最初的文档时，我也并没有扎实地掌握某些细节。我经历了一些“啊哈”的开窍时刻，我想把这些分享给你。</p><p>在看答案之前，我们需要先往后退一步。这篇文章的目的不是给你一个要点清单，而是想帮你真正地领会useEffect。其实我们并没有太多需要学习的，事实上，我们会花很多时间试图忘记某些已经习得的概念（unlearning）。</p><p>当我不再透过熟悉的class生命周期方法去窥视useEffect这个Hook的时候，我才得以融会贯通。</p><blockquote><p>“忘记你已经学到的。” — Yoda</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://overreacted.io/static/6203a1f1f2c771816a5ba0969baccd12/5645f/yoda.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果你对于深入研究感觉不是很适应的话，你或许可以等下面这些解释出现在其他文章中再去了解也行。就像2013年React刚出世的时候，大家需要时间去理解消化一种不同的心智模型。知识也需要时间去普及。</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>如果你不想阅读整篇文章，可以快速浏览这份摘要。要是某些部分不容易理解，你可以往下滚动寻找相关的内容去阅读。</p><p>🤔 <em>Question</em>: 如何用useEffect模拟componentDidMount生命周期？</p><p>虽然可以使用useEffect(fn, [])，但它们并不完全相等。和componentDidMount不一样，useEffect会捕获props和state。所以即便在回调函数里，你拿到的还是初始的props和state。如果你想得到“最新”的值，你可以使用ref。不过，通常会有更简单的实现方式，所以你并不一定要用ref。记住，effects的心智模型和componentDidMount以及其他生命周期是不同的，试图找到它们之间完全一致的表达反而更容易使你混淆。想要更有效，你需要“think in effects”，它的心智模型更接近于实现状态同步，而不是响应生命周期事件。</p><p>🤔 <em>Question</em>: 如何正确地在useEffect里请求数据？[]又是什么？</p><p><a href="https://www.robinwieruch.de/react-hooks-fetch-data/" target="_blank" rel="noopener">这篇文章</a>是很好的入门，介绍了如何在useEffect里做数据请求。请务必读完它！它没有我的这篇这么长。[] 表示effect没有使用任何React数据流里的值，因此该effect仅被调用一次是安全的。[]同样也是一类常见问题的来源，也即你以为没使用数据流里的值但其实使用了。你需要学习一些策略（主要是useReducer 和 useCallback）来移除这些effect依赖，而不是错误地忽略它们。</p><p>🤔 <em>Question</em>: 我应该把函数当做effect的依赖吗？</p><p>一般建议把不依赖props和state的函数提到你的组件外面，并且把那些仅被effect使用的函数放到effect里面。如果这样做了以后，你的effect还是需要用到组件内的函数（包括通过props传进来的函数），可以在定义它们的地方用useCallback包一层。为什么要这样做呢？因为这些函数可以访问到props和state，因此它们会参与到数据流中。我们官网的FAQ有<a href="https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies" target="_blank" rel="noopener">更详细的答案</a>。</p><p>🤔 <em>Question</em>: 为什么有时候会出现无限重复请求的问题？</p><p>这个通常发生于你在effect里做数据请求并且没有设置effect依赖参数的情况。没有设置依赖，effect会在每次渲染后执行一次，然后在effect中更新了状态引起渲染并再次触发effect。无限循环的发生也可能是因为你设置的依赖总是会改变。你可以通过一个一个移除的方式排查出哪个依赖导致了问题。但是，移除你使用的依赖（或者盲目地使用[]）通常是一种错误的解决方式。你应该做的是解决问题的根源。举个例子，函数可能会导致这个问题，你可以把它们放到effect里，或者提到组件外面，或者用useCallback包一层。useMemo可以做类似的事情以避免重复生成对象。</p><p>🤔 <em>Question</em>: 为什么有时候在effect里拿到的是旧的state或prop呢？</p><p><strong>Effect拿到的总是定义它的那次渲染中的props和state</strong>。这能够避免一些bugs，但在一些场景中又会有些讨人嫌。对于这些场景，你可以明确地使用可变的ref保存一些值（上面文章的末尾解释了这一点）。如果你觉得在渲染中拿到了一些旧的props和state，且不是你想要的，你很可能遗漏了一些依赖。可以尝试使用这个<a href="https://github.com/facebook/react/issues/14920" target="_blank" rel="noopener">lint规则</a>来训练你发现这些依赖。可能没过几天，这种能力会变得像是你的第二天性。同样可以看我们官网FAQ中的<a href="https://reactjs.org/docs/hooks-faq.html#why-am-i-seeing-stale-props-or-state-inside-my-function" target="_blank" rel="noopener">这个回答</a>。</p><p>我希望这个摘要对你有所帮助！要不，我们开始正文。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="每一次渲染都有它自己的Props-and-State"><a href="#每一次渲染都有它自己的Props-and-State" class="headerlink" title="每一次渲染都有它自己的Props and State"></a>每一次渲染都有它自己的Props and State</h3><p>在我们讨论effects之前，我们需要先讨论一下渲染（rendering）。</p><p>我们来看一个计数器组件Counter，注意<code>&lt;p&gt;You clicked {count} times&lt;/p&gt;</code>这一行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Counter() {</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked {count} times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意的代码究竟是什么意思呢？count 会“监听”状态的变化并自动更新吗？这么想可能是学习React的时候有用的第一直觉，但它并不是<a href="https://overreacted.io/react-as-a-ui-runtime/" target="_blank" rel="noopener">精确的心智模型</a>。</p><p>上面例子中，count仅是一个数字而已。它不是神奇的“data binding”, “watcher”, “proxy”，或者其他任何东西。它就是一个普通的数字像下面这个一样：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const count = 42;</span><br><span class="line">// ...</span><br><span class="line">&lt;p&gt;You clicked {count} times&lt;/p&gt;</span><br><span class="line">// ...</span><br></pre></td></tr></tbody></table></figure><p>我们的组件第一次渲染的时候，从useState()拿到count的初始值0。当我们调用setCount(1)，React会再次渲染组件，这一次count是1。如此等等：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// During first render</span><br><span class="line">function Counter() {</span><br><span class="line">  const count = 0; // Returned by useState()</span><br><span class="line">  // ...</span><br><span class="line">  &lt;p&gt;You clicked {count} times&lt;/p&gt;</span><br><span class="line">  // ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// After a click, our function is called again</span><br><span class="line">function Counter() {</span><br><span class="line">  const count = 1; // Returned by useState()</span><br><span class="line">  // ...</span><br><span class="line">  &lt;p&gt;You clicked {count} times&lt;/p&gt;</span><br><span class="line">  // ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// After another click, our function is called again</span><br><span class="line">function Counter() {</span><br><span class="line">  const count = 2; // Returned by useState()</span><br><span class="line">  // ...</span><br><span class="line">  &lt;p&gt;You clicked {count} times&lt;/p&gt;</span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>当我们更新状态的时候，React会重新渲染组件。每一次渲染都能拿到独立的count 状态，这个状态值是函数中的一个常量。</strong></p><p>所以下面的这行代码没有做任何特殊的数据绑定：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;You clicked {count} times&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>它仅仅只是在渲染输出中插入了count这个数字。这个数字由React提供。当setCount的时候，React会带着一个不同的count值再次调用组件。然后，React会更新DOM以保持和渲染输出一致。</p><p>这里关键的点在于任意一次渲染中的count常量都不会随着时间改变。渲染输出会变是因为我们的组件被一次次调用，而每一次调用引起的渲染中，它包含的count值独立于其他渲染。</p><p>（关于这个过程更深入的探讨可以查看我的另一篇文章<a href="https://overreacted.io/react-as-a-ui-runtime/" target="_blank" rel="noopener">React as a UI Runtime</a>）</p><h3 id="每一次渲染都有它自己的事件处理函数"><a href="#每一次渲染都有它自己的事件处理函数" class="headerlink" title="每一次渲染都有它自己的事件处理函数"></a>每一次渲染都有它自己的事件处理函数</h3><p>到目前为止一切都还好。那么事件处理函数呢？</p><p>看下面的这个例子。它在三秒后会alert点击次数count：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function Counter() {</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  function handleAlertClick() {</span><br><span class="line">    setTimeout(() =&gt; {</span><br><span class="line">      alert('You clicked on: ' + count);</span><br><span class="line">    }, 3000);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked {count} times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;button onClick={handleAlertClick}&gt;</span><br><span class="line">        Show alert</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果我按照下面的步骤去操作：</p><ul><li>点击增加count到3</li><li>点击一下 “Show alert”</li><li>点击增加count到5并且在定时器回调触发前完成<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://overreacted.io/counter-46c55d5f1f749462b7a173f1e748e41e.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>你猜alert会弹出什么呢？会是5吗？— 这个值是alert的时候count的实时状态。或者会是3吗？— 这个值是我点击时候的状态。</li></ul><p>来自己<a href="https://codesandbox.io/s/w2wxl3yo0l" target="_blank" rel="noopener">试试吧！</a></p><p>如果结果和你预料不一样，你可以想象一个更实际的例子：一个聊天应用在state中保存了当前接收者的ID，以及一个发送按钮。<a href="https://overreacted.io/how-are-function-components-different-from-classes/" target="_blank" rel="noopener">这篇文章</a>深入探索了个中缘由。正确的答案就是3。</p><p>alert会“捕获”我点击按钮时候的状态。</p><p>（虽然有其他办法可以实现不同的行为，但现在我会专注于这个默认的场景。当我们在构建一种心智模型的时候，在可选的策略中分辨出“最小阻力路径”是非常重要的。）</p><p>但它究竟是如何工作的呢？</p><p>我们发现count在每一次函数调用中都是一个常量值。值得强调的是 — <em>我们的组件函数每次渲染都会被调用，但是每一次调用中count值都是常量，并且它被赋予了当前渲染中的状态值。</em></p><p>这并不是React特有的，普通的函数也有类似的行为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function sayHi(person) {</span><br><span class="line">  const name = person.name;</span><br><span class="line">  setTimeout(() =&gt; {</span><br><span class="line">    alert('Hello, ' + name);</span><br><span class="line">  }, 3000);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">let someone = {name: 'Dan'};</span><br><span class="line">sayHi(someone);</span><br><span class="line"></span><br><span class="line">someone = {name: 'Yuzhi'};</span><br><span class="line">sayHi(someone);</span><br><span class="line"></span><br><span class="line">someone = {name: 'Dominic'};</span><br><span class="line">sayHi(someone);</span><br></pre></td></tr></tbody></table></figure><p>在<a href="https://codesandbox.io/s/mm6ww11lk8" target="_blank" rel="noopener">这个例子</a>中, 外层的someone会被赋值很多次（就像在React中，当前的组件状态会改变一样）。然后，在sayHi函数中，局部常量name会和某次调用中的person关联。因为这个常量是局部的，所以每一次调用都是相互独立的。结果就是，当定时器回调触发的时候，每一个alert都会弹出它拥有的name。</p><p>这就解释了我们的事件处理函数如何捕获了点击时候的count值。如果我们应用相同的替换原理，每一次渲染“看到”的是它自己的count：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// During first render</span><br><span class="line">function Counter() {</span><br><span class="line">  const count = 0; // Returned by useState()</span><br><span class="line">  // ...</span><br><span class="line">  function handleAlertClick() {</span><br><span class="line">    setTimeout(() =&gt; {</span><br><span class="line">      alert('You clicked on: ' + count);</span><br><span class="line">    }, 3000);</span><br><span class="line">  }</span><br><span class="line">  // ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// After a click, our function is called again</span><br><span class="line">function Counter() {</span><br><span class="line">  const count = 1; // Returned by useState()</span><br><span class="line">  // ...</span><br><span class="line">  function handleAlertClick() {</span><br><span class="line">    setTimeout(() =&gt; {</span><br><span class="line">      alert('You clicked on: ' + count);</span><br><span class="line">    }, 3000);</span><br><span class="line">  }</span><br><span class="line">  // ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// After another click, our function is called again</span><br><span class="line">function Counter() {</span><br><span class="line">  const count = 2; // Returned by useState()</span><br><span class="line">  // ...</span><br><span class="line">  function handleAlertClick() {</span><br><span class="line">    setTimeout(() =&gt; {</span><br><span class="line">      alert('You clicked on: ' + count);</span><br><span class="line">    }, 3000);</span><br><span class="line">  }</span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>所以实际上，每一次渲染都有一个“新版本”的handleAlertClick。每一个版本的handleAlertClick“记住” 了它自己的 count：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// During first render</span><br><span class="line">function Counter() {</span><br><span class="line">  // ...</span><br><span class="line">  function handleAlertClick() {</span><br><span class="line">    setTimeout(() =&gt; {</span><br><span class="line">      alert('You clicked on: ' + 0);</span><br><span class="line">    }, 3000);</span><br><span class="line">  }</span><br><span class="line">  // ...</span><br><span class="line">  &lt;button onClick={handleAlertClick} /&gt; // The one with 0 inside</span><br><span class="line">  // ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// After a click, our function is called again</span><br><span class="line">function Counter() {</span><br><span class="line">  // ...</span><br><span class="line">  function handleAlertClick() {</span><br><span class="line">    setTimeout(() =&gt; {</span><br><span class="line">      alert('You clicked on: ' + 1);</span><br><span class="line">    }, 3000);</span><br><span class="line">  }</span><br><span class="line">  // ...</span><br><span class="line">  &lt;button onClick={handleAlertClick} /&gt; // The one with 1 inside</span><br><span class="line">  // ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// After another click, our function is called again</span><br><span class="line">function Counter() {</span><br><span class="line">  // ...</span><br><span class="line">  function handleAlertClick() {</span><br><span class="line">    setTimeout(() =&gt; {</span><br><span class="line">      alert('You clicked on: ' + 2);</span><br><span class="line">    }, 3000);</span><br><span class="line">  }</span><br><span class="line">  // ...</span><br><span class="line">  &lt;button onClick={handleAlertClick} /&gt; // The one with 2 inside</span><br><span class="line">  // ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这就是为什么在<a href="https://codesandbox.io/s/w2wxl3yo0l" target="_blank" rel="noopener">这个demo中</a>，事件处理函数“属于”某一次特定的渲染，当你点击的时候，它会使用那次渲染中count的状态值。</p><p><strong>在任意一次渲染中，props和state是始终保持不变的。</strong>如果props和state在不同的渲染中是相互独立的，那么使用到它们的任何值也是独立的（包括事件处理函数）。它们都“属于”一次特定的渲染。即便是事件处理中的异步函数调用“看到”的也是这次渲染中的count值。</p><p>备注：上面我将具体的count值直接内联到了handleAlertClick函数中。这种心智上的替换是安全的，因为count值在某次特定渲染中不可能被改变。它被声明成了一个常量并且是一个数字。这样去思考其他类型的值比如对象也同样是安全的，当然需要在我们都同意应该避免直接修改state这个前提下。通过调用setSomething(newObj)的方式去生成一个新的对象而不是直接修改它是更好的选择，因为这样能保证之前渲染中的state不会被污染。</p><h3 id="每次渲染都有它自己的Effects"><a href="#每次渲染都有它自己的Effects" class="headerlink" title="每次渲染都有它自己的Effects"></a>每次渲染都有它自己的Effects</h3><p>这篇文章是关于effects的，但目前我们居然还没有讨论effects！ 言归正传，由上面的分析得出一个结果，effects其实并没有什么两样。</p><p>让我们回到<a href="https://reactjs.org/docs/hooks-effect.html" target="_blank" rel="noopener">官网文档</a>中的这个例子：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Counter() {</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    document.title = `You clicked ${count} times`;</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked {count} times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>抛一个问题给你：effect是如何读取到最新的count 状态值的呢？</p><p>也许，是某种“data binding”或“watching”机制使得count能够在effect函数内更新？也或许count是一个可变的值，React会在我们组件内部修改它以使我们的effect函数总能拿到最新的值？</p><p>都不是。</p><p>我们已经知道count是某个特定渲染中的常量。事件处理函数“看到”的是属于它那次特定渲染中的count状态值。对于effects也同样如此：</p><p>并不是count的值在“不变”的effect中发生了改变，而是effect函数本身在每一次渲染中都不相同。</p><p>每一个effect版本“看到”的count值都来自于它属于的那次渲染：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// During first render</span><br><span class="line">function Counter() {</span><br><span class="line">  // ...</span><br><span class="line">  useEffect(</span><br><span class="line">    // Effect function from first render</span><br><span class="line">    () =&gt; {</span><br><span class="line">      document.title = `You clicked ${0} times`;</span><br><span class="line">    }</span><br><span class="line">  );</span><br><span class="line">  // ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// After a click, our function is called again</span><br><span class="line">function Counter() {</span><br><span class="line">  // ...</span><br><span class="line">  useEffect(</span><br><span class="line">    // Effect function from second render</span><br><span class="line">    () =&gt; {</span><br><span class="line">      document.title = `You clicked ${1} times`;</span><br><span class="line">    }</span><br><span class="line">  );</span><br><span class="line">  // ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// After another click, our function is called again</span><br><span class="line">function Counter() {</span><br><span class="line">  // ...</span><br><span class="line">  useEffect(</span><br><span class="line">    // Effect function from third render</span><br><span class="line">    () =&gt; {</span><br><span class="line">      document.title = `You clicked ${2} times`;</span><br><span class="line">    }</span><br><span class="line">  );</span><br><span class="line">  // ..</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>React会记住你提供的effect函数，并且会在每次更改作用于DOM并让浏览器绘制屏幕后去调用它。</p><p>所以虽然我们说的是一个effect（这里指更新document的title），但其实每次渲染都是一个不同的函数 — 并且每个effect函数“看到”的props和state都来自于它属于的那次特定渲染。</p><p>概念上，你可以想象effects是渲染结果的一部分。</p><p>严格地说，它们并不是（为了<a href="https://overreacted.io/why-do-hooks-rely-on-call-order/" target="_blank" rel="noopener">允许Hook的组合</a>并且不引入笨拙的语法或者运行时）。但是在我们构建的心智模型上，effect函数属于某个特定的渲染，就像事件处理函数一样。</p><p>为了确保我们已经有了扎实的理解，我们再回顾一下第一次的渲染过程：</p><ul><li>React: 给我状态为0时候的UI。</li><li>你的组件:<ul><li>给你需要渲染的内容: <code>&lt;p&gt;You clicked 0 times&lt;/p&gt;</code>。</li><li>记得在渲染完了之后调用这个effect: () =&gt; { document.title = ‘You clicked 0 times’ }。</li></ul></li><li>React: 没问题。开始更新UI，喂浏览器，我要给DOM添加一些东西。</li><li>浏览器: 酷，我已经把它绘制到屏幕上了。</li><li>React: 好的， 我现在开始运行给我的effect<ul><li>运行 () =&gt; { document.title = ‘You clicked 0 times’ }。</li></ul></li></ul><p>现在我们回顾一下我们点击之后发生了什么：</p><ul><li>你的组件: 喂 React, 把我的状态设置为1。</li><li>React: 给我状态为1时候的UI。</li><li>你的组件:<ul><li>给你需要渲染的内容: <code>&lt;p&gt;You clicked 1 times&lt;/p&gt;</code>。</li><li>记得在渲染完了之后调用这个effect： () =&gt; { document.title = ‘You clicked 1 times’ }。</li></ul></li><li>React: 没问题。开始更新UI，喂浏览器，我修改了DOM。</li><li>Browser: 酷，我已经将更改绘制到屏幕上了。</li><li>React: 好的， 我现在开始运行属于这次渲染的effect<ul><li>运行 () =&gt; { document.title = ‘You clicked 1 times’ }。</li></ul></li></ul><h3 id="每一次渲染都有它自己的…"><a href="#每一次渲染都有它自己的…" class="headerlink" title="每一次渲染都有它自己的…"></a>每一次渲染都有它自己的…</h3><p>我们现在知道effects会在每次渲染后运行，并且概念上它是组件输出的一部分，可以“看到”属于某次特定渲染的props和state。</p><p>我们来做一个思想实验，思考下面的代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function Counter() {</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; {</span><br><span class="line">    setTimeout(() =&gt; {</span><br><span class="line">      console.log(`You clicked ${count} times`);</span><br><span class="line">    }, 3000);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked {count} times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果我点击了很多次并且在effect里设置了延时，打印出来的结果会是什么呢？</p><p>你可能会认为这是一个很绕的题并且结果是反直觉的。完全错了！我们看到的就是顺序的打印输出 — 每一个都属于某次特定的渲染，因此有它该有的count值。你可以<a href="https://codesandbox.io/s/lyx20m1ol" target="_blank" rel="noopener">自己试一试</a>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://overreacted.io/timeout_counter-a5727d333c270e05942f508707265378.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>你可能会想：“它当然应该是这样的。否则还会怎么样呢？”</p><p>不过，class中的this.state并不是这样运作的。你可能会想当然以为下面的<a href="https://codesandbox.io/s/kkymzwjqz3" target="_blank" rel="noopener">class实现</a>和上面是相等的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate() {</span><br><span class="line">  setTimeout(() =&gt; {</span><br><span class="line">    console.log(`You clicked ${this.state.count} times`);</span><br><span class="line">  }, 3000);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然而，<strong>this.state.count总是指向最新的count值，而不是属于某次特定渲染的值</strong>。所以你会看到每次打印输出都是5：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://overreacted.io/timeout_counter_class-264b329edc111a1973003bdf2bcacd65.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我觉得Hooks这么依赖Javascript闭包是挺讽刺的一件事。有时候组件的class实现方式会受闭包相关的苦（<a href="https://wsvincent.com/javascript-closure-settimeout-for-loop/" target="_blank" rel="noopener">the canonical wrong-value-in-a-timeout confusion</a>），但其实这个例子中真正的混乱来源是可变数据（React修改了class中的this.state使其指向最新状态），并不是闭包本身的错。</p><p>当封闭的值始终不会变的情况下闭包是非常棒的。这使它们非常容易思考因为你本质上在引用常量。正如我们所讨论的，props和state在某个特定渲染中是不会改变的。顺便说一下，我们可以<a href="https://codesandbox.io/s/w7vjo07055" target="_blank" rel="noopener">使用闭包</a>修复上面的class版本…</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>原文作者：Dan Abramov<br>原文链接：<a href="https://overreacted.io/a-complete-guide-to-useeffect/" target="_blank" rel="noopener">https://overreacted.io/a-complete-guide-to-useeffect/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Hooks系列之useEffect（一）&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://lry61.cn/blog/categories/React/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks初探</title>
    <link href="http://lry61.cn/blog//posts/5/"/>
    <id>http://lry61.cn/blog//posts/5/</id>
    <published>2019-12-06T02:24:43.194Z</published>
    <updated>2019-12-17T11:44:57.102Z</updated>
    
    <content type="html"><![CDATA[<p>React Hooks初探</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/hooks.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>如果你使用过React一段时间，你会发现在React组件之间复用逻辑状态很难，虽然可以通过render props 和HOC高阶组件这类方案解决，但是很容易让代码变得难以理解。</p><p>Hook给予了函数式组件类似于类组件<strong>生命周期</strong>的概念，扩大了函数式组件的应用范围。Hooks 的出现使得函数组件也有了自己的状态与业务逻辑，简单逻辑在自己内部处理即可，不再需要通过 Props 的传递，使简单逻辑组件抽离更加方便，也使使用者无需关心组件内部的逻辑，只关心 Hooks 组件返回的结果即可</p><h3 id="Hook初探"><a href="#Hook初探" class="headerlink" title="Hook初探"></a>Hook初探</h3><p>我们通过官网计数器的例子，来看看 class 组件与 hooks 的区别。</p><p>采用class组件写法:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>采用hooks后代码:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/react%20hook/1_1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>通过上诉两种方法比较可以看出：使用Hooks，相关的状态逻辑可以放在单个方法中管理，而且不需要写成React.Component组件形式，而是作为一个逻辑状态管理的方法，方便后期复用。</p><h3 id="基础Hooks"><a href="#基础Hooks" class="headerlink" title="基础Hooks"></a>基础Hooks</h3><h4 id="※-useState"><a href="#※-useState" class="headerlink" title="※ useState"></a>※ useState</h4><p><code>useState</code>是一个基础的状态管理Hooks，它将分散的初始状态、获取状态和修改状态统一在一个方法中，这样有利于将单个状态的相关内容统一维护，复用更加简便。具体使用如下:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [count, setCount] = useState(initialState);</span><br></pre></td></tr></tbody></table></figure><p><code>initialState</code>是初始化状态，上述代码有两个返回值<code>count</code>和<code>setCount()</code>。一个用来获取最新的状态值，一个用来修改状态，后面所有与该状态相关的代码都在同一个方法中。如果你需要多个状态，你可以使用多个useState管理相对应的状态。<br>如果我们想要获取上一轮该state的值，只需要在setCount使用时，传入上一轮的state值，即setCount(count =&gt; count + 1)</p><h4 id="※-useEffect"><a href="#※-useEffect" class="headerlink" title="※ useEffect"></a>※ useEffect</h4><p><code>useEffect</code>其实就是一个Effect Hook，它给函数组件增加了操作副作用（在React组件中有过数据获取、订阅或手动修改DOM）的能力。它与class组件中的componentDidMount、componentDidUpdate、componentWillUnMount具有相同的用途，只不过被合并成了一个API。具体使用如下:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() =&gt; {</span><br><span class="line">  //这里操作副作用</span><br><span class="line">  return () =&gt; {</span><br><span class="line">    //清除effect，组件卸载时执行</span><br><span class="line">  }</span><br><span class="line">}, Drip)</span><br></pre></td></tr></tbody></table></figure><p>上述代码中return返回的函数，其实是effect可选的<code>清除机制</code>。每个effect都可以返回一个清除函数，React会在组件卸载时执行它们。<code>Drip</code>是effect的第二个参数（可选），它可以用来控制effect是否每次更新渲染都需要执行。effect在每次渲染的时候都会执行。这就是为什么React会在执行当前effect之前对上一个effect进行清除。同state一样，effect也可以使用多次，但需要注意<em>React会按照effect声明的顺序依次调用组件中的effect</em></p><h4 id="※-useContext"><a href="#※-useContext" class="headerlink" title="※ useContext"></a>※ useContext</h4><p>在React中，为了避免参数深层次的传递，一般会在父组件上创建一个Context，在子孙组件都可以获取到这个Context，这样就避免了参数需要一层层传递下去。具体使用如下:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const context = useContext(Context)</span><br></pre></td></tr></tbody></table></figure><p>useContext接收一个<code>Context对象</code>(React.createContext的返回值)，返回该context的当前值。context的当前值由上层组件中距离当前组件最近的<code>&lt;Context.Provider&gt;</code>的<code>value</code> prop决定。</p><h3 id="额外的Hooks"><a href="#额外的Hooks" class="headerlink" title="额外的Hooks"></a>额外的Hooks</h3><h4 id="※-useReducer"><a href="#※-useReducer" class="headerlink" title="※ useReducer"></a>※ useReducer</h4><p><code>useReducer</code>是useState的替代方案，它接收一个形如<code>(state, action) =&gt; newState</code>的reducer(与Redux类似)，并返回当前的state值以及配套的dispatch方法。具体使用如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [state, dispatch] = useReducer(reducer, initialState)</span><br></pre></td></tr></tbody></table></figure><p>在某些应用场景下，useReducer比useState更适用。例如state逻辑复杂并且包含多个子值，或者下一个state依赖之前的state。<br>React会确保dispatch函数的标识是稳定的，并且不会在组件重新渲染时改变。这就是为什么可以安全地从useEffect或useCallback的依赖列表中省略dispatch</p><h4 id="※-useMemo"><a href="#※-useMemo" class="headerlink" title="※ useMemo"></a>※ useMemo</h4><p>在某些情况下，我们在渲染时计算一个值需要进行高开销的计算，而这个值会受一些参数的影响。当参数没有变化时，这个值不会发生变化；当参数变化时，需要重新计算。为了提升效率，就可以使用<code>useMemo</code>这个Hooks。useMemo接收两个参数，一个是计算值的方法，一个是依赖项数组(里面是影响值的参数)。具体使用如下:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b])</span><br></pre></td></tr></tbody></table></figure><p>上述代码中，计算得到的memoizedValue会受依赖项数组中的参数a, b影响。当参数不变时，不会重新计算memoizedValue的值；当任一参数变化时，都会触发重新执行computeExpensiveValue方法计算新的memoizedValue。<em>如果没有提供依赖项数组，useMemo在每次渲染时都会执行计算新的值</em></p><h4 id="※-useCallback"><a href="#※-useCallback" class="headerlink" title="※ useCallback"></a>※ useCallback</h4><p><code>useCallback</code>方法与useMemo方法类似，也是避免重复计算，区别在于useCallback返回的是一个memoized回调函数。该回调函数只有在某个依赖项改变时才会更新。具体使用如下:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const callbackFn = useCallback(() =&gt; doSomething(a, b), [a, b])</span><br></pre></td></tr></tbody></table></figure><p>直接调用callbackFn()方法，最终执行的是doSomething()的代码</p><h4 id="※-useRef"><a href="#※-useRef" class="headerlink" title="※ useRef"></a>※ useRef</h4><p>在Hooks之前，我们经常会使用ref去找特定的DOM元素，如果你将ref以<code>&lt;div ref={myRef}&gt;&lt;/div&gt;</code>这种方式传入组件，则无论该节点如何改变，React都会将ref对象的<code>.current</code>属性设置为对应的DOM节点。<code>useRef</code>返回一个可变的ref对象，其<code>.current</code>属性初始化为传入的参数(initialValue),返回的ref对象在整个生命周期中保持不变。具体使用如下:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const ref = useRef(initialValue)</span><br></pre></td></tr></tbody></table></figure><p>useRef会在每次渲染时返回同一个ref对象，变更<code>.current</code>属性不会引发组件重新渲染。如果想要在React绑定或解绑DOM节点的ref时运行某些代码，则需要使用回调ref来实现。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>如有错误，欢迎指正</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Hooks初探&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://lry61.cn/blog/categories/React/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Js数组去重</title>
    <link href="http://lry61.cn/blog//posts/4/"/>
    <id>http://lry61.cn/blog//posts/4/</id>
    <published>2019-10-15T02:08:22.198Z</published>
    <updated>2019-10-16T07:47:13.884Z</updated>
    
    <content type="html"><![CDATA[<p>Js数组去重的几种实现方式</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Js数组去重问题，是面试当中的经典问题，也是比较基础的问题了，下面总结几种比较常见的操作</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/unique.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="双层循环"><a href="#双层循环" class="headerlink" title="双层循环"></a>双层循环</h3><blockquote><p>思路：利用双层循环嵌套，然后用splice去重。当循环数组的第一个值和第二个值相同的时候，用splice删除第二个值</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,1,"true",true,"false",false,NaN,null,NaN,"NaN",null,undefined,15,undefined,15,{},0,"a",{},0,"a"];</span><br><span class="line">function unique(arr) {</span><br><span class="line">  for(var i = 0; i &lt; arr.length; i++) {</span><br><span class="line">    for(var j = i + 1; j &lt; arr.length; j++) {</span><br><span class="line">      if(arr[i] === arr[j]) {</span><br><span class="line">        arr.splice(j, 1);</span><br><span class="line">        j--;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  return arr;</span><br><span class="line">}</span><br><span class="line">console.log(unique(arr)); //[1, "true", true, "false", false, NaN, null, NaN, "NaN", undefined, 15, {…}, 0, "a", {…}]</span><br></pre></td></tr></tbody></table></figure><p>从打印结果可以看出，双层循环<em>不能去重 NaN 和 {}</em></p><h3 id="indexOf循环"><a href="#indexOf循环" class="headerlink" title="indexOf循环"></a>indexOf循环</h3><blockquote><p>思路：利用indexOf循环数组，判断结果数组res中是否存在当前元素，如果存在，则跳过，否则把当前元素添加到结果数组res中</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,1,"true",true,"false",false,NaN,null,NaN,"NaN",null,undefined,15,undefined,15,{},0,"a",{},0,"a"];</span><br><span class="line">function unique(arr) {</span><br><span class="line">  var res = [];</span><br><span class="line">  for(var i = 0; i &lt; arr.length; i++) {</span><br><span class="line">    if(res.indexOf(arr[i]) === -1) {</span><br><span class="line">      res.push(arr[i]);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  return res;</span><br><span class="line">}</span><br><span class="line">console.log(unique(arr)); //[1, "true", true, "false", false, NaN, null, NaN, "NaN", undefined, 15, {…}, 0, "a", {…}]</span><br></pre></td></tr></tbody></table></figure><p>从打印结果中可以看出，使用indexOf循环数组，也<em>不能去重 NaN 和 {}</em></p><h3 id="排序后去重"><a href="#排序后去重" class="headerlink" title="排序后去重"></a>排序后去重</h3><blockquote><p>思路：将数组使用sort排序后，相同的值便会排在一起，这样我们只需要判断当前的元素与上一个元素是否相同，如果相同，就说明重复，否则push进res</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,1,"true",true,"false",false,NaN,null,NaN,"NaN",null,undefined,15,undefined,15,{},0,"a",{},0,"a"];</span><br><span class="line">function unique(arr) {</span><br><span class="line">  arr = arr.sort();</span><br><span class="line">  var res = [arr[0]];</span><br><span class="line">  for(var i = 1; i &lt; arr.length; i++) {</span><br><span class="line">    if(arr[i] !== arr[i-1]) {</span><br><span class="line">      res.push(arr[i]);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  return res;</span><br><span class="line">}</span><br><span class="line">console.log(unique(arr)); //[0, 1, 15, NaN, NaN, "NaN", {…}, {…}, "a", "false", false, null, "true", true, undefined]</span><br></pre></td></tr></tbody></table></figure><p>从打印结果来看，使用sort排序后去重，也<em>不能去重 NaN 和 {}</em></p><h3 id="利用includes"><a href="#利用includes" class="headerlink" title="利用includes"></a>利用includes</h3><blockquote><p>思路：includes主要用来测试数组中是否含有某个值</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,1,"true",true,"false",false,NaN,null,NaN,"NaN",null,undefined,15,undefined,15,{},0,"a",{},0,"a"];</span><br><span class="line">function unique(arr) {</span><br><span class="line">  var res = [];</span><br><span class="line">  for(var i = 0; i &lt; arr.length; i++) {</span><br><span class="line">    if(!res.includes(arr[i])) {</span><br><span class="line">      res.push(arr[i]);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  return res;</span><br><span class="line">}</span><br><span class="line">console.log(unique(arr)); //[1, "true", true, "false", false, NaN, null, "NaN", undefined, 15, {…}, 0, "a", {…}]</span><br></pre></td></tr></tbody></table></figure><p>从打印结果可以看出，利用includes去重，<em>不能去重 {}</em></p><h3 id="利用filter"><a href="#利用filter" class="headerlink" title="利用filter"></a>利用filter</h3><blockquote><p>思路：f判断数组中，当前元素在数组中的第一个索引是否是filter中当前索引值</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,1,"true",true,"false",false,NaN,null,NaN,"NaN",null,undefined,15,undefined,15,{},0,"a",{},0,"a"];</span><br><span class="line">function unique(arr) {</span><br><span class="line">  return arr.filter(function(item, index, arr) {</span><br><span class="line">    return arr.indexOf(item) === index;</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line">console.log(unique(arr)); //[1, "true", true, "false", false, null, "NaN", undefined, 15, {…}, 0, "a", {…}]</span><br></pre></td></tr></tbody></table></figure><p>从打印结果可以看出，利用filter去重，<em>把 NaN 去掉了，并且不能去重 {}</em></p><h3 id="利用reduce-includes"><a href="#利用reduce-includes" class="headerlink" title="利用reduce+includes"></a>利用reduce+includes</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,1,"true",true,"false",false,NaN,null,NaN,"NaN",null,undefined,15,undefined,15,{},0,"a",{},0,"a"];</span><br><span class="line">function unique(arr) {</span><br><span class="line">  return arr.reduce((acc, cur) =&gt; </span><br><span class="line">    acc.includes(cur) ? acc : [...acc, cur], []</span><br><span class="line">  )</span><br><span class="line">}</span><br><span class="line">console.log(unique(arr)); //[1, "true", true, "false", false, NaN, null, "NaN", undefined, 15, {…}, 0, "a", {…}]</span><br></pre></td></tr></tbody></table></figure><p>从打印结果可以看出，利用reduce+includes去重，<em>不能去重 {}</em></p><h3 id="利用Set"><a href="#利用Set" class="headerlink" title="利用Set"></a>利用Set</h3><blockquote><p>思路：Set对象是值的集合，你可以按照插入的顺序迭代它的元素。 Set中的元素只会出现一次，即 Set 中的元素是唯一的</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,1,"true",true,"false",false,NaN,null,NaN,"NaN",null,undefined,15,undefined,15,{},0,"a",{},0,"a"];</span><br><span class="line">function unique(arr) {</span><br><span class="line">  return Array.from(new Set(arr));</span><br><span class="line">}</span><br><span class="line">console.log(unique(arr)); // [1, "true", true, "false", false, NaN, null, "NaN", undefined, 15, {…}, 0, "a", {…}]</span><br></pre></td></tr></tbody></table></figure><p>从打印结果可以看出，利用ES6新语法Set去重，<em>不能去重 {}</em>。上面代码中，<code>Array.from(new Set(arr))</code>可以简化为<code>[... new Set(arr)]</code></p><h3 id="利用hasOwnProperty"><a href="#利用hasOwnProperty" class="headerlink" title="利用hasOwnProperty"></a>利用hasOwnProperty</h3><p>hasOwnProperty方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（是否有指定的键），此方法无法检查该对象的原型链中是否具有该属性，该属性必须是对象本身的一个成员。</p><blockquote><p>思路：利用一个空对象obj，把数组的值存成obj对象的key值，如obj[arr[item1]] = true，判断另一个值obj[arr[item2]]是否存在，如果存在，则是相同的值</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,"1",2,2,1];</span><br><span class="line">function unique(arr) {</span><br><span class="line">  var obj = {};</span><br><span class="line">  return arr.filter(function(item, index, arr) {</span><br><span class="line">    return obj.hasOwnProperty(item) ? false : (obj[item] = true)</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line">console.log(unique(arr)); //[1,2]</span><br></pre></td></tr></tbody></table></figure><p>从打印结果可以看出，这个方法是存在问题的。”1”和1是不同的，但是<strong>Object[1]和Object[“1”]却是同一个引用（对象key值只能是字符串）</strong><br>解决办法：使用<code>typeof item + item</code>拼成字符串作为key值</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,"1",2,2,1,{value: 1},{value: 1},{value: 2}];</span><br><span class="line">function unique(arr) {</span><br><span class="line">  var obj = {};</span><br><span class="line">  return arr.filter(function(item, index, arr) {</span><br><span class="line">    return obj.hasOwnProperty(typeof item + item) ? false : (obj[typeof item + item] = true)</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line">console.log(unique(arr)); //[1, "1", 2, {value: 1}]</span><br></pre></td></tr></tbody></table></figure><p>从打印结果仍能看出，如果数组中存在对象时，如{value: 1}，typeof item + item的结果都是<code>object[object Object]</code><br>解决方法：使用JSON.stringify()将对象序列化来避免相同的键值</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,"1",2,2,1,{value: 1},{value: 1},{value: 2}];</span><br><span class="line">function unique(arr) {</span><br><span class="line">  var obj = {};</span><br><span class="line">  return arr.filter(function(item, index, arr) {</span><br><span class="line">    return obj.hasOwnProperty(typeof item + JSON.stringify(item)) ? false : (obj[typeof item + JSON.stringify(item)] = true)</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line">console.log(unique(arr)); //[1, "1", 2, {value: 1}, {value: 2}]</span><br></pre></td></tr></tbody></table></figure><p>利用hasOwnProperty去重，<em>可以去重所有情况</em></p><h3 id="利用Map"><a href="#利用Map" class="headerlink" title="利用Map"></a>利用Map</h3><blockquote><p>思路：创建一个空的Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中。由于Map中不会出现相同的key值，所以最终得到的就是去重后的结果</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,1,"true",true,"false",false,NaN,null,NaN,"NaN",null,undefined,15,undefined,15,{},0,"a",{},0,"a"];</span><br><span class="line">function unique(arr) {</span><br><span class="line">  let map = new Map();</span><br><span class="line">  let array = [];</span><br><span class="line">  for(let i = 0; i &lt; arr.length; i++) {</span><br><span class="line">    if(map.has(arr[i])) { //如果有该key值</span><br><span class="line">      map.set(arr[i], true);</span><br><span class="line">    } else {</span><br><span class="line">      map.set(arr[i], false);</span><br><span class="line">      array.push(arr[i]);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  return array;</span><br><span class="line">}</span><br><span class="line">console.log(unique(arr)); //[1, "true", true, "false", false, NaN, null, "NaN", undefined, 15, {…}, 0, "a", {…}]</span><br></pre></td></tr></tbody></table></figure><p>从打印结果可以看出，利用map数据结构 <em>不能去重 {}</em></p><h3 id="利用递归"><a href="#利用递归" class="headerlink" title="利用递归"></a>利用递归</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,1,"true",true,"false",false,NaN,null,NaN,"NaN",null,undefined,15,undefined,15,{},0,"a",{},0,"a"];</span><br><span class="line">function unique(arr) {</span><br><span class="line">  arr.sort(function(a, b) {</span><br><span class="line">    return a- b;</span><br><span class="line">  })</span><br><span class="line">  function loop(index) {</span><br><span class="line">    if(index &gt;= 1) {</span><br><span class="line">      if(arr[index] === arr[index - 1]) {</span><br><span class="line">        arr.splice(index, 1);</span><br><span class="line">      }</span><br><span class="line">      loop(index - 1); //递归loop</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  loop(arr.length - 1);</span><br><span class="line">  return arr;</span><br><span class="line">}</span><br><span class="line">console.log(unique(arr)); //[1, "true", true, "false", false, NaN, null, NaN, "NaN", null, 15, {…}, 0, "a", {…}, 0, "a", undefined]</span><br></pre></td></tr></tbody></table></figure><p>从打印结果可以看出，利用递归去重数组，<em>不能去重 NaN null 0 “a” {}</em></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>如有错误，欢迎指正~</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Js数组去重的几种实现方式&lt;/p&gt;
    
    </summary>
    
      <category term="Js" scheme="http://lry61.cn/blog/categories/Js/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Js数组扁平化</title>
    <link href="http://lry61.cn/blog//posts/3/"/>
    <id>http://lry61.cn/blog//posts/3/</id>
    <published>2019-10-14T03:12:25.688Z</published>
    <updated>2020-01-02T11:02:23.021Z</updated>
    
    <content type="html"><![CDATA[<p>Js数组扁平化的几种实现方式</p><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/flatten.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数组扁平化，就是将一个存在多层嵌套的数组array，转化为只有一层的数组。假设存在一个函数flatten可以将数组扁平化，那么就可以得到如下效果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var array = [1, [2], [[3]]];</span><br><span class="line">console.log(flatten(array)); //[1,2,3]</span><br></pre></td></tr></tbody></table></figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><blockquote><p>思路：循环遍历该数组，判断循环的元素是否仍是数组，如果是，则递归调用该方法</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var array = [[1,2,3],4,5,6,[[7]],[]];</span><br><span class="line">function flatten(arr, result = []) {</span><br><span class="line">  for(let item of arr) {</span><br><span class="line">    if(Array.isArray(item)) {</span><br><span class="line">      flatten(item, result);</span><br><span class="line">    } else {</span><br><span class="line">      result.push(item);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  return result;</span><br><span class="line">}</span><br><span class="line">console.log(flatten(array)); //[1,2,3,4,5,6,7]</span><br></pre></td></tr></tbody></table></figure><h3 id="reduce调用"><a href="#reduce调用" class="headerlink" title="reduce调用"></a>reduce调用</h3><blockquote><p>思路：利用reduce搭配concat。reduce遍历数组中的每个元素，如果该元素仍然是数组，则重新调用该方法，否则将该元素concat到数组中</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var array = [[1,2,3],4,5,6,[[7]],[]];</span><br><span class="line">function flatten(arr) {</span><br><span class="line">  return arr.reduce(function(acc, cur) {</span><br><span class="line">    return acc.concat(Array.isArray(cur) ? flatten(cur) : cur);</span><br><span class="line">  }, [])</span><br><span class="line">}</span><br><span class="line">console.log(flatten(array));</span><br></pre></td></tr></tbody></table></figure><h3 id="ES6扩展运算符"><a href="#ES6扩展运算符" class="headerlink" title="ES6扩展运算符"></a>ES6扩展运算符</h3><p>ES6中的扩展运算符用来取出参数对象中的所有可遍历属性，拷贝到当前对象中</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,[3,[4]]];</span><br><span class="line">console.log([].concat(...arr)); //[1,2,3,[4]]</span><br></pre></td></tr></tbody></table></figure><p><code>[].concat(...arr)</code>只能拉平一层数组，但是我们很容易据此想到，利用<code>while</code>循环判断数组中某个元素是否仍为数组，如果存在一个元素为数组，则继续拉平</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var array = [[1,2,3],4,5,6,[[7]],[]];</span><br><span class="line">function flatten(arr) {</span><br><span class="line">  while(arr.some(item =&gt; Array.isArray(item))) {</span><br><span class="line">    arr = [].concat(...arr);</span><br><span class="line">  }</span><br><span class="line">  return arr;</span><br><span class="line">}</span><br><span class="line">console.log(flatten(array)); //[1,2,3,4,5,6,7]</span><br></pre></td></tr></tbody></table></figure><h3 id="flat调用"><a href="#flat调用" class="headerlink" title="flat调用"></a>flat调用</h3><p>arr.flat(index)可以拉平数组，其中index表示拉平多少层数组，如果要拉平无限层数组，则可以表示为<code>arr.flat(Infinity)</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,[2,[3,4,[]]]];</span><br><span class="line">console.log(arr.flat(Infinity)); //[1,2,3,4]</span><br></pre></td></tr></tbody></table></figure><h3 id="toString调用"><a href="#toString调用" class="headerlink" title="toString调用"></a>toString调用</h3><p>如果数组中的元素都是数字，我们就可以考虑toString方法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,[2,[3,4]]].toString(); //"1,2,3,4"</span><br></pre></td></tr></tbody></table></figure><blockquote><p>思路：调用toString方法，返回一个用逗号分隔的扁平字符串。此时，我们使用split分隔逗号，得到一个string类型的数组，再遍历数组中的每个元素，将其转化成number类型</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,[2,[3,4]]];</span><br><span class="line">function flatten(arr) {</span><br><span class="line">  return arr.toString().split(",").map(function(item) {</span><br><span class="line">    return +item;</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line">console.log(flatten(arr)); //[1,2,3,4]</span><br></pre></td></tr></tbody></table></figure><p>然而，上面的方法存在很大的局限性：</p><ol><li>如果arr中存在空数组，则空数组将会被转换为空字符串</li><li>如果数组中存在非数字，比如[1,”1”]，则会产生错误的结果</li></ol><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>如有错误，欢迎指正</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Js数组扁平化的几种实现方式&lt;/p&gt;
    
    </summary>
    
      <category term="Js" scheme="http://lry61.cn/blog/categories/Js/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>函数防抖与节流</title>
    <link href="http://lry61.cn/blog//posts/2/"/>
    <id>http://lry61.cn/blog//posts/2/</id>
    <published>2019-10-12T03:07:29.083Z</published>
    <updated>2019-10-12T08:42:57.351Z</updated>
    
    <content type="html"><![CDATA[<p>防抖debounce与节流throttle的实现</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端开发中，我们会遇到一些频繁的事件触发（滚动条滑动、鼠标事件、搜索框搜索…），如果不加以限制的话，可能会造成浏览器卡顿。为了解决这个问题，出现了两种解决方案：</p><ol><li>debounce防抖</li><li>throttle节流</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/debounce_throttle.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h3><p>定义：触发事件后，在n秒后才会执行；如果在n秒内又重新触发了该事件，则以重新触发该事件的时间为准，n秒后再执行。总之就是：<em>触发事件n秒内不再触发该事件才执行，如果n秒内再次触发该事件，则重新计算n秒后再执行</em>（任性啊…）</p><h4 id="初版防抖函数的实现"><a href="#初版防抖函数的实现" class="headerlink" title="初版防抖函数的实现"></a>初版防抖函数的实现</h4><blockquote><p>实现思路：通过定时器控制func是否实现<br>1、每次触发防抖函数时，先清除上一次的定时器，再开启本次触发定时器<br>2、绑定this指向：使用防抖函数后，func中的this会指向window，要让this指向func上下文，则需要绑定this指向 -&gt; func.apply(context)<br>3、绑定event事件：事件处理函数中会提供事件对象event，但是在debounce函数中打印会是undefined，所以需要对event对象特殊处理 -&gt; func.apply(context, args)</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function debounce(func, wait) {</span><br><span class="line">  var timeout;</span><br><span class="line">  return function() {</span><br><span class="line">    var context = this;</span><br><span class="line">    var args = arguments;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(function() {</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">    },wait);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="防抖函数的立即执行"><a href="#防抖函数的立即执行" class="headerlink" title="防抖函数的立即执行"></a>防抖函数的立即执行</h4><p>在初版函数的基础上，考虑个新的需求：我不希望要等到事件停止触发n秒后才执行，我希望它能够立即执行，然后停止触发n秒后才可以重新触发执行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function debounce(func, wait, immediate) {</span><br><span class="line">  var timeout,result;</span><br><span class="line">  return function() {</span><br><span class="line">    var context = this;</span><br><span class="line">    var args = arguments;</span><br><span class="line">    if(timeout) clearTimeout(timeout);</span><br><span class="line">    if(immediate) {</span><br><span class="line">      //如果已经执行过，不再执行</span><br><span class="line">      var callNow = !timeout;</span><br><span class="line">      //定时器结束并设置为null，则可以再次点击执行了</span><br><span class="line">      timeout = setTimeout(function() {</span><br><span class="line">        timeout = null;</span><br><span class="line">      }, wait);</span><br><span class="line">      if(callNow) result = func.apply(context, args);</span><br><span class="line">    } else {</span><br><span class="line">      timeout = setTimeout(function() {</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">      }, wait);</span><br><span class="line">    }</span><br><span class="line">    return result;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面代码值得注意的是：func函数时可能有返回值的，所以debounce函数我们也需要添加返回结果result。当immediate为false时，因为setTimeout函数的存在，return出来的值一直都是undefined，所以我们只需要在immediate为true的时候才添加返回结果。</p><h3 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h3><p>定义：在规定的时间内，只能触发一次事件；如果规定时间内再触发多次，则什么也不做。</p><h4 id="使用时间戳"><a href="#使用时间戳" class="headerlink" title="使用时间戳"></a>使用时间戳</h4><blockquote><p>实现思路：<br>设置时间戳previous开始值为0，当触发事件时，取出当前的时间戳now，减去之前的时间戳previous，如果得到的值大于设置的规定时间wait，则执行函数func，并更新时间戳previous为当前时间now；如果小于，则不执行。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function throttle(func, wait) {</span><br><span class="line">  var context,args;</span><br><span class="line">  var previous = 0;</span><br><span class="line">  return function() {</span><br><span class="line">    var now = +new Date();</span><br><span class="line">    context = this;</span><br><span class="line">    args = arguments;</span><br><span class="line">    if(now - previous &gt; wait) {</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">      previous = now;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="使用定时器"><a href="#使用定时器" class="headerlink" title="使用定时器"></a>使用定时器</h4><blockquote><p>实现思路：<br>当触发事件的时候，设置一个定时器，再次触发该事件的时候，如果定时器存在，就不执行func，直到上一轮定时器执行完并且为null，才会执行func，并清除本次定时器。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function throttle(func, wait) {</span><br><span class="line">  var timeout;</span><br><span class="line">  return function() {</span><br><span class="line">    var context = this;</span><br><span class="line">    var args = arguments;</span><br><span class="line">    if(!timeout) {</span><br><span class="line">      timeout = setTimeout(function() {</span><br><span class="line">        timeout = null;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">      }, wait);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>比较上面<code>使用时间戳</code>和<code>使用定时器</code>两个方法你会发现：<br>1、使用时间戳：触发事件会立即执行一次，停止触发事件便不再执行<br>2、使用定时器：触发事件不会立即执行，在n秒后才执行第一次；停止触发事件后仍会再执行一次<br>由此，我们可以写出一个“双剑合璧”版的节流函数：触发事件能够立即执行，停止触发还能再执行一次</p><h4 id="双剑合璧版节流"><a href="#双剑合璧版节流" class="headerlink" title="双剑合璧版节流"></a>双剑合璧版节流</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function throttle(func, wait) {</span><br><span class="line">  var timeout, context, args;</span><br><span class="line">  var previous = 0;</span><br><span class="line"></span><br><span class="line">  var later = function() {</span><br><span class="line">    previous = +new Date();</span><br><span class="line">    timeout = null;</span><br><span class="line">    func.apply(context, args)</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  var throttled = function() {</span><br><span class="line">    var now = +new Date();</span><br><span class="line">    //下次触发 func 剩余的时间</span><br><span class="line">    var remaining = wait - (now - previous);</span><br><span class="line">    context = this;</span><br><span class="line">    args = arguments;</span><br><span class="line">    if (remaining &lt;= 0) {</span><br><span class="line">      if (timeout) {</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        timeout = null;</span><br><span class="line">      }</span><br><span class="line">      previous = now;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">    } else if (!timeout) {</span><br><span class="line">      timeout = setTimeout(later, remaining);</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">  return throttled;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>如有错误，欢迎指正~</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;防抖debounce与节流throttle的实现&lt;/p&gt;
    
    </summary>
    
      <category term="Js" scheme="http://lry61.cn/blog/categories/Js/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习笔记（一）</title>
    <link href="http://lry61.cn/blog//posts/1/"/>
    <id>http://lry61.cn/blog//posts/1/</id>
    <published>2019-09-29T00:58:23.390Z</published>
    <updated>2019-10-01T09:34:39.516Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式的学习之路…</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我的工作当中，正则表达式是使用非常频繁的，但是本人对于正则表达式的研究比较浅显，便只好把对正则的一些学习理解记录下来，方便以后翻阅。（感兴趣的朋友可自行搜索老姚的JavaScript正则表达式系列文章）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/regexp.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><em>正则表达式是匹配模式，要么匹配字符，要么匹配位置</em></p><h3 id="两种模糊匹配"><a href="#两种模糊匹配" class="headerlink" title="两种模糊匹配"></a>两种模糊匹配</h3><ol><li><p>横向模糊匹配：可匹配的字符串长度是不固定的。实现方式是使用<code>量词</code><br>eg1：{m, n}表示连续出现最少m次，最多n次<br>eg2：/ab{2,3}c/表示第一个字符是“a”，后面是2到5个”b”，最后是”c”</p></li><li><p>纵向模糊匹配：匹配的字符串具体到某一位时，可以不是某个确定的字符。实现方式是使用<code>字符组</code><br>eg1：[abc]表示匹配”a”、”b”、”c”中的任一字符<br>eg2：/a[123]b/可以匹配三种字符：”a1b”、”a2b”、”a3b”</p></li></ol><h3 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h3><p>值得一提的是，虽然叫做字符组（字符类），但只是其中的一个字符。譬如[abc]匹配的是”a”、”b”、”c”其中之一</p><ol><li><p>范围表示法<br>如果一个字符组里面字符太多的话，可以用连字符“-”来省略和简写。<br>譬如匹配字母，可以写为：[a-zA-Z]</p><blockquote><p>如果需要匹配的字符带有特殊字符，则应该放在开头、结尾或者转义，避免引擎认为是特殊用法</p></blockquote></li><li><p>排除字符组（取反）<br>[^abc]表示一个除”a”、”b”、”c”之外的任意字符。字符组第一位放^（脱字符）表示取反</p></li><li><p>常见简写形式</p><table><thead><tr><th align="center">字符组</th><th>具体含义</th></tr></thead><tbody><tr><td align="center">\d</td><td>[0-9]，表示一位数字</td></tr><tr><td align="center">\D</td><td>[^0-9]，表示除数字外的任意字符</td></tr><tr><td align="center">\w</td><td>[0-9a-zA-Z_]，表示数字、大小写字母、下划线</td></tr><tr><td align="center">\W</td><td>[^0-9a-zA-Z]，表示非单词字符</td></tr><tr><td align="center">\s</td><td>[\t\n\v\r\f]，表示空白符，包括空格、水平垂直制表符、换行符、换页符、回车符</td></tr><tr><td align="center">\S</td><td>[^\t\n\v\r\f]，表示非空白符</td></tr><tr><td align="center">.</td><td>通配符，表示几乎任意字符</td></tr></tbody></table></li></ol><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ol><li><p>简写形式</p><table><thead><tr><th align="center">量词</th><th>具体含义</th></tr></thead><tbody><tr><td align="center">{m,}</td><td>表示至少出现m次</td></tr><tr><td align="center">{m}</td><td>表示出现m次</td></tr><tr><td align="center">?</td><td>等价于{0,1}，表示出现或者不出现</td></tr><tr><td align="center">+</td><td>等价于{1,}，表示至少出现一次</td></tr><tr><td align="center">*</td><td>等价于{0,}，表示有可能不出现，或出现任意次</td></tr></tbody></table></li><li><p>贪婪匹配与惰性匹配<br>贪婪匹配：在满足条件的情况下，尽可能多的匹配<br>惰性匹配：在满足条件的情况下，尽可能少的匹配</p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var reg1 = /\d{2,5}/g;</span><br><span class="line">var reg2 = /\d{2,5}?/g;</span><br><span class="line">var str = "123 1234 12345 123456";</span><br><span class="line">console.log(str.match(reg1)); //["123", "1234", "12345", "12345"]</span><br><span class="line">console.log(str.match(reg2)); //["12", "12", "34" "12", "34", "12", "34", "56"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码单独运算时，呈现出了两种不同的结果；其中reg1运算是贪婪匹配，reg2是惰性匹配(通过在量词后面加”？“就能实现）</p><ol start="3"><li>多选分支<br>多选分支可以支持多个子模式任选其一。譬如(p1|p2|p3)，其中p1，p2，p3是子模式，用管道符（|）分隔表示其中任何之一。</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var reg = /good|nice/g;</span><br><span class="line">var str = "good idea, nice boy.";</span><br><span class="line">console.log(str.match(reg)); //["good","nice"]</span><br></pre></td></tr></tbody></table></figure><p>值得注意的是，<em>分支结构属于惰性匹配，就是当前面的匹配上了，后面的就不在尝试了</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var reg = /good|goodbye/g;</span><br><span class="line">var str = "goodbye";</span><br><span class="line">console.log(str.match(reg)); //["good"]</span><br></pre></td></tr></tbody></table></figure><h3 id="经典案例分析"><a href="#经典案例分析" class="headerlink" title="经典案例分析"></a>经典案例分析</h3><p>匹配字符，其实就是字符串、量词、分支结构的组合使用(注意：案例代码使用了全局匹配g，需要单独验证，否则会出错)</p><ol><li>匹配16进制颜色<blockquote><p>分析：<br>表示一个16进制字符，可以用字符组[0-9a-fA-F]<br>其中字符可以出现3次或者6次，需要用量词和分支结构，使用分支结构时需要注意顺序</p></blockquote></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var reg = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;</span><br><span class="line">var str = "#FF6600 #fff #CCc";</span><br><span class="line">console.log(str.match(reg)); //["#FF6600","#fff","#CCc"]</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>匹配24小时制时间<blockquote><p>分析：<br>24小时制时间展示主要如：23：59、02：01<br>共有4个数字，第一位数字可以是[0-2]<br>当第一位数字是”2”时，第二位可以是[0-3]，否则第二位是[0-9]<br>第三位可以是[0-5]，第四位可是是[0-9]<br>如果要求匹配”2:2”这种时间格式，则前面的0是可以省略的</p></blockquote></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/g;</span><br><span class="line">console.log(reg.test("23:59")); //true</span><br><span class="line">console.log(reg.test("02:03")); //true</span><br><span class="line">console.log(reg.test("2:2")); //true</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>匹配日期（yyyy-mm-dd格式）<blockquote><p>分析：<br>年：四位数即可，可以表示为[0-9]{4}<br>月：分为两种情况：”01”、”02”、…、”09”和”10”、”11”、”12”，可以表示为(0[1-9]|1[0-2])<br>日：最大为31日，可以表示为(0[1-9]|[12][0-9]|3[01])</p></blockquote></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/g;</span><br><span class="line">console.log(reg.test("2017-02-05")); //true</span><br></pre></td></tr></tbody></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>掌握字符组和量词的大致知识，基本上就算是正则入门了…后续再学习有关于正则表达式的位置匹配~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式的学习之路…&lt;/p&gt;
    
    </summary>
    
      <category term="RegExp" scheme="http://lry61.cn/blog/categories/RegExp/"/>
    
    
      <category term="正则" scheme="http://lry61.cn/blog/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Array知识清单</title>
    <link href="http://lry61.cn/blog//posts/0/"/>
    <id>http://lry61.cn/blog//posts/0/</id>
    <published>2019-09-24T14:18:08.775Z</published>
    <updated>2020-01-02T02:17:59.104Z</updated>
    
    <content type="html"><![CDATA[<p>Array知识清单</p><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/font-end/Array.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>Array是JS的原生对象，同时也是一个构造函数，可以用它来生成新数组</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(3);</span><br><span class="line">arr.length;  //3</span><br><span class="line">arr;  //[empty x 3]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，Array构造函数的参数3，表示生成一个三位成员的数组，每个位置都是空值。<code>var arr = new Array(3)</code>等同于<code>var arr = Array(3)</code></p><h3 id="静态方法-isArray"><a href="#静态方法-isArray" class="headerlink" title="静态方法 .isArray"></a>静态方法 .isArray</h3><p>Array.isArray()方法返回一个Boolean值，表示参数是否为数组</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">typeof arr;  //"object"</span><br><span class="line">Array.isArray(arr);  //true</span><br></pre></td></tr></tbody></table></figure><h3 id="valueOf、toString"><a href="#valueOf、toString" class="headerlink" title="valueOf、toString"></a>valueOf、toString</h3><p>数组的valueOf方法返回数组本身，而toString方法返回数组的字符串形式</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3];</span><br><span class="line">arr.valueOf(); //[1, 2, 3]</span><br><span class="line">arr.toString(); //"1, 2, 3"</span><br></pre></td></tr></tbody></table></figure><h3 id="pop、push"><a href="#pop、push" class="headerlink" title="pop、push"></a>pop、push</h3><p>push方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。<em>该方法会改变原数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">arr.push(1); //1</span><br><span class="line">arr.push("a"); //2</span><br><span class="line">arr.push(true,{}); //4</span><br><span class="line">arr; //[1,"a",true,{}]</span><br></pre></td></tr></tbody></table></figure><p>pop方法用于删除数组的最后一个元素，并返回该元素。<em>该方法会改变原数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">arr.pop(); //3</span><br><span class="line">arr; //[1,2]</span><br></pre></td></tr></tbody></table></figure><p>对空数组使用pop方法，不会报错，返回undefined</p><blockquote><p>[ ].pop(); //undefined</p></blockquote><h3 id="shift、unshift"><a href="#shift、unshift" class="headerlink" title="shift、unshift"></a>shift、unshift</h3><p>shift方法用于删除数组的第一个元素，并返回该元素。<em>该方法会改变原数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">arr.shift(); //1</span><br><span class="line">arr; //[2,3]</span><br></pre></td></tr></tbody></table></figure><p>unshift方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。<em>该方法会改变原数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">arr.unshift(4); //4</span><br><span class="line">arr; //[4,1,2,3]</span><br></pre></td></tr></tbody></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>join方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = [1, 2, 3, 4];</span><br><span class="line">a.join(' '); //"1 2 3 4"</span><br><span class="line">a.join(' | '); //"1 | 2 | 3 | 4"</span><br><span class="line">a.join(); //"1,2,3,4"</span><br></pre></td></tr></tbody></table></figure><p>如果数组成员是undefined或null或空位，会被转成空字符串。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[undefined, null].join(' '); //' '</span><br><span class="line">['a',, 'b'].join('-'); //'a--b'</span><br></pre></td></tr></tbody></table></figure><p>通过call方法，这个方法也可以用于字符串或类似数组的对象。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.join.call('hello', '-'); // "h-e-l-l-o"</span><br><span class="line">var obj = { 0: 'a', 1: 'b', length: 2 };</span><br><span class="line">Array.prototype.join.call(obj, '-'); // 'a-b'</span><br></pre></td></tr></tbody></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>concat方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，<em>原数组不变</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">['hello'].concat(['world']); //["hello", "world"]</span><br><span class="line">['hello'].concat(['world'], ['!']); //["hello", "world", "!"]</span><br><span class="line">[].concat({a: 1}, {b: 2}); //[{ a: 1 }, { b: 2 }]</span><br><span class="line">[2].concat({a: 1}); //[2, {a: 1}]</span><br><span class="line"></span><br><span class="line">var arr1 = [1,2];</span><br><span class="line">var arr2 = [3,4];</span><br><span class="line">var arr3 = arr1.concat(arr2);</span><br><span class="line">console.log(arr1); //[1,2]</span><br><span class="line">console.log(arr3); //[1,2,3,4]</span><br></pre></td></tr></tbody></table></figure><p>除了数组作为参数，concat也接受其他类型的值作为参数，添加到目标数组尾部。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].concat(4, 5, 6); // [1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></tbody></table></figure><p>如果数组成员包括对象，concat方法返回当前数组的一个浅拷贝。所谓“浅拷贝”，指的是新数组拷贝的是对象的引用。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj = { a: 1 };</span><br><span class="line">var oldArray = [obj];</span><br><span class="line">var newArray = oldArray.concat();</span><br><span class="line">obj.a = 2;</span><br><span class="line">newArray[0].a; //2</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，原数组包含一个对象，concat方法生成的新数组包含这个对象的引用。所以，改变原对象以后，新数组跟着改变。</p><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>reverse方法用于颠倒排列数组元素，返回改变后的数组。<em>该方法将改变原数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c'];</span><br><span class="line">a.reverse(); //["c", "b", "a"]</span><br><span class="line">a; //["c", "b", "a"]</span><br></pre></td></tr></tbody></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>slice方法用于提取目标数组的一部分，返回一个新数组，<em>原数组不变</em><br>1.<code>arr.slice(start, end)</code><br>它的第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c'];</span><br><span class="line">a.slice(0); //["a", "b", "c"]</span><br><span class="line">a.slice(1); //["b", "c"]</span><br><span class="line">a.slice(1, 2); //["b"]</span><br><span class="line">a.slice(2, 6); //["c"]</span><br><span class="line">a.slice(); //["a", "b", "c"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，最后一个例子slice没有参数，实际上等于返回一个原数组的拷贝。</p><p>如果slice方法的参数是负数，则表示倒数计算的位置。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c'];</span><br><span class="line">a.slice(-2); //["b", "c"]</span><br><span class="line">a.slice(-2, -1); //["b"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，-2表示倒数计算的第二个位置，-1表示倒数计算的第一个位置。</p><p>如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c'];</span><br><span class="line">a.slice(4); //[]</span><br><span class="line">a.slice(2, 1); //[]</span><br></pre></td></tr></tbody></table></figure><p>2.<code>Array.prototype.slice.call（this）</code><br>slice方法的一个重要应用，是<em>将类似数组的对象转为真正的数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.slice.call({ 0: 'a', 1: 'b', length: 2 }); //['a', 'b']</span><br><span class="line">Array.prototype.slice.call(document.querySelectorAll("div"));</span><br><span class="line">Array.prototype.slice.call(arguments);</span><br></pre></td></tr></tbody></table></figure><p>上面代码的参数都不是数组，但是通过call方法，在它们上面调用slice方法，就可以把它们转为真正的数组。</p><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>splice方法用于删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素。<em>该方法会改变原数组</em><br><code>arr.splice(start, count, addElement1, addElement2, ...)</code><br>splice的第一个参数是删除的起始位置（从0开始），第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c', 'd', 'e', 'f'];</span><br><span class="line">a.splice(4, 2); //["e", "f"]</span><br><span class="line">a; //["a", "b", "c", "d"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码从原数组4号位置，删除了两个数组成员。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c', 'd', 'e', 'f'];</span><br><span class="line">a.splice(4, 2, 1, 2); //["e", "f"]</span><br><span class="line">a; //["a", "b", "c", "d", 1, 2]</span><br></pre></td></tr></tbody></table></figure><p>上面代码除了删除成员，还插入了两个新成员。</p><p>起始位置如果是负数，就表示从倒数位置开始删除。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c', 'd', 'e', 'f'];</span><br><span class="line">a.splice(-4, 2); //["c", "d"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码表示，从倒数第四个位置c开始删除两个成员。</p><p>如果只是单纯地插入元素，splice方法的第二个参数可以设为0。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = [1, 1, 1];</span><br><span class="line">a.splice(1, 0, 2); //[]</span><br><span class="line">a; //[1, 2, 1, 1]</span><br></pre></td></tr></tbody></table></figure><p>如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = [1, 2, 3, 4];</span><br><span class="line">a.splice(2); //[3, 4]</span><br><span class="line">a; //[1, 2]</span><br></pre></td></tr></tbody></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>sort方法对数组成员进行排序，默认是按照字典顺序排序。<em>排序后，原数组将被改变</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">['d', 'c', 'b', 'a'].sort(); //['a', 'b', 'c', 'd']</span><br><span class="line">[4, 3, 2, 1].sort(); //[1, 2, 3, 4]</span><br><span class="line">[11, 101].sort(); //[101, 11]</span><br><span class="line">[10111, 1101, 111].sort(); //[10111, 1101, 111]</span><br></pre></td></tr></tbody></table></figure><p>上面代码的最后两个例子，需要特殊注意。sort方法不是按照大小排序，而是按照字典顺序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以101排在11的前面。</p><p>如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[10111, 1101, 111].sort(function (a, b) {</span><br><span class="line">return a - b;</span><br><span class="line">}); //[111, 1101, 10111]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，sort的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于0，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">{ name: "张三", age: 30 },</span><br><span class="line">{ name: "李四", age: 24 },</span><br><span class="line">{ name: "王五", age: 28 }</span><br><span class="line">].sort(function (o1, o2) {</span><br><span class="line">return o1.age - o2.age;</span><br><span class="line">});</span><br><span class="line">//[</span><br><span class="line">//{ name: "李四", age: 24 },</span><br><span class="line">//{ name: "王五", age: 28 },</span><br><span class="line">//{ name: "张三", age: 30 }</span><br><span class="line">//]</span><br></pre></td></tr></tbody></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var numbers = [1, 2, 3];</span><br><span class="line">numbers.map(function (n) {</span><br><span class="line">return n + 1;</span><br><span class="line">}); //[2, 3, 4]</span><br><span class="line">numbers; //[1, 2, 3]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，numbers数组的所有成员依次执行参数函数，运行结果组成一个新数组返回。<em>原数组没有变化</em></p><p>map方法接受一个函数作为参数。该函数调用时，map方法向它传入三个参数：当前成员、当前位置和数组本身。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].map(function(elem, index, arr) {</span><br><span class="line">  return elem * index;</span><br><span class="line">}); //[0, 2, 6]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，map方法的回调函数有三个参数，elem为当前成员的值，index为当前成员的位置，arr为原数组（[1, 2, 3]）</p><p>map方法还可以接受第二个参数，用来绑定回调函数内部的this变量。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = ['a', 'b', 'c'];</span><br><span class="line">[1, 2].map(function (e) {</span><br><span class="line">return this[e];</span><br><span class="line">}, arr); //['b', 'c']</span><br></pre></td></tr></tbody></table></figure><p>上面代码通过map方法的第二个参数，将回调函数内部的this对象，指向arr数组。</p><p>如果数组有空位，map方法的回调函数在这个位置不会执行，会跳过数组的空位。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var f = function (n) { return 'a' };</span><br><span class="line">[1, undefined, 2].map(f); //["a", "a", "a"]</span><br><span class="line">[1, null, 2].map(f); //["a", "a", "a"]</span><br><span class="line">[1, , 2].map(f); //["a", , "a"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，map方法不会跳过undefined和null，但是会跳过空位</p><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>forEach方法与map方法很相似，也是对数组的所有成员依次执行参数函数。但是，forEach方法不返回值，只用来操作数据。这就是说，如果数组遍历的目的是为了得到返回值，那么使用map方法，否则使用forEach方法。<br>forEach的用法与map方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function log(element, index, array) {</span><br><span class="line">console.log('[' + index + '] = ' + element);</span><br><span class="line">}</span><br><span class="line">[2, 5, 9].forEach(log);</span><br><span class="line">//[0] = 2</span><br><span class="line">//[1] = 5</span><br><span class="line">//[2] = 9</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，forEach遍历数组不是为了得到返回值，而是为了在屏幕输出内容，所以不必使用map方法。</p><p>forEach方法也可以接受第二个参数，绑定参数函数的this变量。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var out = [];</span><br><span class="line">[1, 2, 3].forEach(function(elem) {</span><br><span class="line">this.push(elem * elem);</span><br><span class="line">}, out);</span><br><span class="line">out; //[1, 4, 9]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，空数组out是forEach方法的第二个参数，结果，回调函数内部的this关键字就指向out。</p><p>注意，<em>forEach方法无法中断执行，总是会将所有成员遍历完</em>。如果希望符合某种条件时，就中断遍历，要使用for循环。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3];</span><br><span class="line">for (var i = 0; i &lt; arr.length; i++) {</span><br><span class="line">if (arr[i] === 2) break;</span><br><span class="line">console.log(arr[i]);</span><br><span class="line">} //1</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，执行到数组的第二个成员时，就会中断执行。forEach方法做不到这一点。</p><p>forEach方法也会跳过数组的空位。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var log = function (n) {</span><br><span class="line">console.log(n + 1);</span><br><span class="line">};</span><br><span class="line">[1, undefined, 2].forEach(log);</span><br><span class="line">//2</span><br><span class="line">//NaN</span><br><span class="line">//3</span><br><span class="line">[1, null, 2].forEach(log);</span><br><span class="line">//2</span><br><span class="line">//1</span><br><span class="line">//3</span><br><span class="line">[1, , 2].forEach(log);</span><br><span class="line">//2</span><br><span class="line">//3</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，forEach方法不会跳过undefined和null，但会跳过空位。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter方法用于过滤数组成员，满足条件的成员组成一个新数组返回。<br>它的参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。<em>该方法不会改变原数组</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5].filter(function (elem) {</span><br><span class="line">return (elem &gt; 3);</span><br><span class="line">});</span><br><span class="line">//[4, 5]</span><br></pre></td></tr></tbody></table></figure><p>上面代码将大于3的数组成员，作为一个新数组返回。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [0, 1, 'a', false];</span><br><span class="line">arr.filter(Boolean);</span><br><span class="line">//[1, "a"]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，filter方法返回数组arr里面所有布尔值为true的成员。</p><p>filter方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5].filter(function (elem, index, arr) {</span><br><span class="line">return index % 2 === 0;</span><br><span class="line">});</span><br><span class="line">//[1, 3, 5]</span><br></pre></td></tr></tbody></table></figure><p>上面代码返回偶数位置的成员组成的新数组。</p><p>filter方法还可以接受第二个参数，用来绑定参数函数内部的this变量。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj = { MAX: 3 };</span><br><span class="line">var myFilter = function (item) {</span><br><span class="line">if (item &gt; this.MAX) return true;</span><br><span class="line">};</span><br><span class="line">var arr = [2, 8, 3, 4, 1, 3, 2, 9];</span><br><span class="line">arr.filter(myFilter, obj); //[8, 4, 9]</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，过滤器myFilter内部有this变量，它可以被filter方法的第二个参数obj绑定，返回大于3的成员。</p><h3 id="some、every"><a href="#some、every" class="headerlink" title="some、every"></a>some、every</h3><p>这两个方法类似“断言”（assert），返回一个布尔值，表示判断数组成员是否符合某种条件。<br>它们接受一个函数作为参数，所有数组成员依次执行该函数。该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。<br>some方法是只要一个成员的返回值是true，则整个some方法的返回值就是true，否则返回false。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line">arr.some(function (elem, index, arr) {</span><br><span class="line">return elem &gt;= 3;</span><br><span class="line">});</span><br><span class="line">//true</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，如果数组arr有一个成员大于等于3，some方法就返回true。</p><p>every方法是所有成员的返回值都是true，整个every方法才返回true，否则返回false。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line">arr.every(function (elem, index, arr) {</span><br><span class="line">  return elem &gt;= 3;</span><br><span class="line">});</span><br><span class="line">//false</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，数组arr并非所有成员大于等于3，所以返回false。</p><p>注意，对于空数组，some方法返回false，every方法返回true，回调函数都不会执行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isEven(x) { return x % 2 === 0 }</span><br><span class="line">[].some(isEven); //false</span><br><span class="line">[].every(isEven); //true</span><br></pre></td></tr></tbody></table></figure><p>some和every方法还可以接受第二个参数，用来绑定参数函数内部的this变量。</p><h3 id="reduce、reduceRight"><a href="#reduce、reduceRight" class="headerlink" title="reduce、reduceRight"></a>reduce、reduceRight</h3><p>reduce方法和reduceRight方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，reduce是从左到右处理（从第一个成员到最后一个成员），reduceRight则是从右到左（从最后一个成员到第一个成员），其他完全一样。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5].reduce(function (a, b) {</span><br><span class="line">console.log(a, b);</span><br><span class="line">return a + b;</span><br><span class="line">});</span><br><span class="line">//1 2</span><br><span class="line">//3 3</span><br><span class="line">//6 4</span><br><span class="line">//10 5</span><br><span class="line">//最后结果：15</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，reduce方法求出数组所有成员的和。第一次执行，a是数组的第一个成员1，b是数组的第二个成员2。第二次执行，a为上一轮的返回值3，b为第三个成员3。第三次执行，a为上一轮的返回值6，b为第四个成员4。第四次执行，a为上一轮返回值10，b为第五个成员5。至此所有成员遍历完成，整个方法的返回值就是最后一轮的返回值15。</p><p>reduce方法和reduceRight方法的第一个参数都是一个函数。该函数接受以下四个参数。<br>累积变量：默认为数组的第一个成员；<br>当前变量：默认为数组的第二个成员；<br>当前位置（从0开始）；<br>原数组<br>这四个参数之中，只有前两个是必须的，后两个则是可选的。<br>如果要对累积变量指定初值，可以把它放在reduce方法和reduceRight方法的第二个参数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5].reduce(function (a, b) {</span><br><span class="line">return a + b;</span><br><span class="line">}, 10);</span><br><span class="line">//25</span><br></pre></td></tr></tbody></table></figure><p>上面代码指定参数a的初值为10，所以数组从10开始累加，最终结果为25。注意，这时b是从数组的第一个成员开始遍历。<br>上面的第二个参数相当于设定了默认值，处理空数组时尤其有用。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function add(prev, cur) {</span><br><span class="line">return prev + cur;</span><br><span class="line">}</span><br><span class="line">[].reduce(add);</span><br><span class="line">//TypeError: Reduce of empty array with no initial value</span><br><span class="line">[].reduce(add, 1);</span><br><span class="line">//1</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，由于空数组取不到初始值，reduce方法会报错。这时，加上第二个参数，就能保证总是会返回一个值。</p><p>下面是一个reduceRight方法的例子。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function subtract(prev, cur) {</span><br><span class="line">return prev - cur;</span><br><span class="line">}</span><br><span class="line">[3, 2, 1].reduce(subtract); //0</span><br><span class="line">[3, 2, 1].reduceRight(subtract); //-4</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，reduce方法相当于3减去2再减去1，reduceRight方法相当于1减去2再减去3。</p><p>由于这两个方法会遍历数组，所以实际上还可以用来做一些遍历相关的操作。比如，找出字符长度最长的数组成员。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function findLongest(entries) {</span><br><span class="line">return entries.reduce(function (longest, entry) {</span><br><span class="line">return entry.length &gt; longest.length ? entry : longest;</span><br><span class="line">}, '');</span><br><span class="line">}</span><br><span class="line">findLongest(['aaa', 'bb', 'c']); //"aaa"</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，reduce的参数函数会将字符长度较长的那个数组成员，作为累积值。这导致遍历所有成员之后，累积值就是字符长度最长的那个成员。</p><h3 id="indexOf、lastIndexOf"><a href="#indexOf、lastIndexOf" class="headerlink" title="indexOf、lastIndexOf"></a>indexOf、lastIndexOf</h3><p>indexOf方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = ['a', 'b', 'c'];</span><br><span class="line">a.indexOf('b'); //1</span><br><span class="line">a.indexOf('y'); //-1</span><br></pre></td></tr></tbody></table></figure><p>indexOf方法还可以接受第二个参数，表示搜索的开始位置。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">['a', 'b', 'c'].indexOf('a', 1); //-1</span><br></pre></td></tr></tbody></table></figure><p>上面代码从1号位置开始搜索字符a，结果为-1，表示没有搜索到。</p><p>lastIndexOf方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = [2, 5, 9, 2];</span><br><span class="line">a.lastIndexOf(2); //3</span><br><span class="line">a.lastIndexOf(7); //-1</span><br></pre></td></tr></tbody></table></figure><p>注意，这两个方法不能用来搜索NaN的位置，即它们无法确定数组成员是否包含NaN。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[NaN].indexOf(NaN); //-1</span><br><span class="line">[NaN].lastIndexOf(NaN); //-1</span><br></pre></td></tr></tbody></table></figure><p>这是因为这两个方法内部，使用严格相等运算符（===）进行比较，而NaN是唯一一个不等于自身的值。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>Array知识清单将不定时更新所包含的知识，如果有书写错误请指正~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Array知识清单&lt;/p&gt;
    
    </summary>
    
      <category term="Js" scheme="http://lry61.cn/blog/categories/Js/"/>
    
    
      <category term="前端" scheme="http://lry61.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到狗子赖的博客</title>
    <link href="http://lry61.cn/blog//posts/fbf759eb/"/>
    <id>http://lry61.cn/blog//posts/fbf759eb/</id>
    <published>2019-08-22T07:14:46.311Z</published>
    <updated>2020-01-14T04:41:51.842Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到狗子赖的博客</p><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Lry0504/image_resources/master/blog/welcome/blog_welcome.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>终于开通了自己的博客了~很久之前就萌生了写博客的想法，奈何一直没有实现。几周前在学习某个知识点的时候刚好看到一个博主的博客，觉得实在是太吸引我了(✪ω✪)，于是在网上参考了许多方式搭了这个博客</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到狗子赖的博客&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
